{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/authors/","text":"This file contains information about the codeflow authors for copyright purposes. The copyright for the code is held by the contributors of the code. The revision history in the version control system is the primary source of authorship information for copyright purposes. Contributors that have requested to also be noted explicitly in this file are listed below: Markus Pawellek \"lyrahgames\" ( markus.pawellek@mailbox.org )","title":"Authors"},{"location":"about/license/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html","title":"License"},{"location":"developer/generate_the_documentation/","text":"Generate the Documentation \u00b6 Requirements \u00b6 Git Mkdocs Configuration Setup \u00b6 Open a shell and create a global folder for the project and its configurations. This is a general advice for other projects as well. mkdir codeflow cd codeflow Now clone the repository to be able to work with the actual code on the master branch. Most of the time, coding will be done in this folder. git clone https://github.com/lyrahgames/codeflow.git codeflow Automatic Documentation Generation Of course, it would be possible to automatically generate the documentation with a CI environment. But we do not recommend it. For this, we would need another server which additionally would have to be configured. This may introduce unnecessary version controlling for the generated site and as a result unnecessary memory usage of the repository. For a simple documentation site, this may be too much overhead. If one would not want to use GitHub Pages, we could use ReadTheDocs to automatically generate every commit to the master branch. We need another clone to be able to manually generate the site. git clone https://github.com/lyrahgames/codeflow.git codeflow-gh-pages Make sure to set the correct branch on the output directory. cd codeflow-gh-pages git checkout gh-pages Work on the Documentation \u00b6 Now change to the actual documentation directory. cd ../codeflow/docs/web Change something and do work. Use the mkdocs serve command to inspect changes. If everything is alright, commit and push the changes. git add . git commit git push origin master Generate and Update the Site \u00b6 Build the documentation into the output directory. mkdocs build -d ../../../codeflow-gh-pages Commit the changes in the out directory by amending. This makes sure the site will not be version-controlled and takes up no additional space. The generated site is a build artifact. We do not want it to be version controlled in contrast to the code. cd ../../../codeflow-gh-pages git add . git commit --amend -m \"Update site\" Push the changes. Because we have amended, we have to do a force push to the correct branch. git push -f origin gh-pages.","title":"Generate the Documentation"},{"location":"developer/generate_the_documentation/#generate-the-documentation","text":"","title":"Generate the Documentation"},{"location":"developer/generate_the_documentation/#requirements","text":"Git Mkdocs","title":"Requirements"},{"location":"developer/generate_the_documentation/#configuration-setup","text":"Open a shell and create a global folder for the project and its configurations. This is a general advice for other projects as well. mkdir codeflow cd codeflow Now clone the repository to be able to work with the actual code on the master branch. Most of the time, coding will be done in this folder. git clone https://github.com/lyrahgames/codeflow.git codeflow Automatic Documentation Generation Of course, it would be possible to automatically generate the documentation with a CI environment. But we do not recommend it. For this, we would need another server which additionally would have to be configured. This may introduce unnecessary version controlling for the generated site and as a result unnecessary memory usage of the repository. For a simple documentation site, this may be too much overhead. If one would not want to use GitHub Pages, we could use ReadTheDocs to automatically generate every commit to the master branch. We need another clone to be able to manually generate the site. git clone https://github.com/lyrahgames/codeflow.git codeflow-gh-pages Make sure to set the correct branch on the output directory. cd codeflow-gh-pages git checkout gh-pages","title":"Configuration Setup"},{"location":"developer/generate_the_documentation/#work-on-the-documentation","text":"Now change to the actual documentation directory. cd ../codeflow/docs/web Change something and do work. Use the mkdocs serve command to inspect changes. If everything is alright, commit and push the changes. git add . git commit git push origin master","title":"Work on the Documentation"},{"location":"developer/generate_the_documentation/#generate-and-update-the-site","text":"Build the documentation into the output directory. mkdocs build -d ../../../codeflow-gh-pages Commit the changes in the out directory by amending. This makes sure the site will not be version-controlled and takes up no additional space. The generated site is a build artifact. We do not want it to be version controlled in contrast to the code. cd ../../../codeflow-gh-pages git add . git commit --amend -m \"Update site\" Push the changes. Because we have amended, we have to do a force push to the correct branch. git push -f origin gh-pages.","title":"Generate and Update the Site"},{"location":"developer/mkdocs_start/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"developer/mkdocs_start/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"developer/mkdocs_start/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"developer/mkdocs_start/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"developer/test/","text":"Test \u00b6 C++ Example \u00b6 #include <iostream> using namespace std ; int main (){ cout << \"Hello, World! \\n \" ; } Latex Example \u00b6 \\[ f\\colon X\\to Y, \\qquad f(x) \\colon= \\int_0^1 x e^{x^2} \\, \\mathrm{d}x \\] Misc \u00b6 Now we do some inline code auto start = std :: chrono :: system_clock :: now (); and int main (){} \u2192 \u2190 \u2194 \u00a9 \u00ae \u2122 \u00bd \u00bc \u215d","title":"Test"},{"location":"developer/test/#test","text":"","title":"Test"},{"location":"developer/test/#c-example","text":"#include <iostream> using namespace std ; int main (){ cout << \"Hello, World! \\n \" ; }","title":"C++ Example"},{"location":"developer/test/#latex-example","text":"\\[ f\\colon X\\to Y, \\qquad f(x) \\colon= \\int_0^1 x e^{x^2} \\, \\mathrm{d}x \\]","title":"Latex Example"},{"location":"developer/test/#misc","text":"Now we do some inline code auto start = std :: chrono :: system_clock :: now (); and int main (){} \u2192 \u2190 \u2194 \u00a9 \u00ae \u2122 \u00bd \u00bc \u215d","title":"Misc"},{"location":"mathematics/exercises/cardinal_number_of_finite_power_set/","text":"Cardinal Number of Finite Power Sets \u00b6 Problem \u00b6 Prove that the number of different subsets of a finite set \\(X\\) with \\(n\\in\\mathbb{N}\\) elements is given by \\(2^n\\) . Proof \u00b6 Initial Case: \\(n=1\\) In this case, the set \\(X\\) consists only of one element which will be denoted by \\(x\\) . \\[ X = \\{ x \\} \\quad \\implies \\quad \\emptyset \\neq X \\] \\[ \\mathcal{P}(X) = \\{ \\emptyset, X \\} \\quad \\implies \\quad |\\mathcal{P}(X)| = 2 \\] Induction Step: \\(n\\implies n+1\\) Let \\(X\\) be a set with \\(n\\in\\mathbb{N}\\) elements. According to the induction hypothesis, the following holds. \\[ |\\mathcal{P}(X)| = 2^n \\] Assume \\(x\\notin X\\) and define \\(Y\\) to be their joined set. \\[ Y = X \\cup \\{ x \\} \\qquad \\emptyset = X \\cap \\{x\\} \\] Hence, every subset of \\(X\\) is a subset of \\(Y\\) but not vice versa and the subsets of \\(Y\\) that are not subsets of \\(X\\) have to contain the element \\(x\\) . As a consequence, these can be described by the following expression. \\[ \\mathcal{P}(Y)\\setminus \\mathcal{P}(X) = \\left\\{ A \\cup \\{x\\} : A \\in \\mathcal{P}(X) \\right\\} \\] Based on this, we conclude the number of subsets of \\(Y\\) that are not subsets of \\(X\\) to be the same as the number of subsets of \\(X\\) . \\[ |\\mathcal{P}(Y) \\setminus \\mathcal{P}(X)| = |\\mathcal{P}(X)| \\] Furthermore, we know that their union defines the power set of \\(Y\\) and that they are disjoint. \\[ \\mathcal{P}(Y) = \\mathcal{P}(X) \\cup \\mathcal{P}(Y)\\setminus \\mathcal{P}(X) \\] \\[ \\emptyset = \\mathcal{P}(X) \\cap [ \\mathcal{P}(Y)\\setminus \\mathcal{P}(X) ] \\] Therefore the number of elements in the power set of \\(Y\\) can be computed by the following expression. \\[ |\\mathcal{P}(Y)| = |\\mathcal{P}(X)| + |\\mathcal{P}(Y) \\setminus \\mathcal{P}(X)| = 2 |\\mathcal{P}(X)| = 2 \\cdot 2^n = 2^{n+1} \\] By mathematical induction, this proves the lemma.","title":"Cardinal Number of Finite Power Sets"},{"location":"mathematics/exercises/cardinal_number_of_finite_power_set/#cardinal-number-of-finite-power-sets","text":"","title":"Cardinal Number of Finite Power Sets"},{"location":"mathematics/exercises/cardinal_number_of_finite_power_set/#problem","text":"Prove that the number of different subsets of a finite set \\(X\\) with \\(n\\in\\mathbb{N}\\) elements is given by \\(2^n\\) .","title":"Problem"},{"location":"mathematics/exercises/cardinal_number_of_finite_power_set/#proof","text":"Initial Case: \\(n=1\\) In this case, the set \\(X\\) consists only of one element which will be denoted by \\(x\\) . \\[ X = \\{ x \\} \\quad \\implies \\quad \\emptyset \\neq X \\] \\[ \\mathcal{P}(X) = \\{ \\emptyset, X \\} \\quad \\implies \\quad |\\mathcal{P}(X)| = 2 \\] Induction Step: \\(n\\implies n+1\\) Let \\(X\\) be a set with \\(n\\in\\mathbb{N}\\) elements. According to the induction hypothesis, the following holds. \\[ |\\mathcal{P}(X)| = 2^n \\] Assume \\(x\\notin X\\) and define \\(Y\\) to be their joined set. \\[ Y = X \\cup \\{ x \\} \\qquad \\emptyset = X \\cap \\{x\\} \\] Hence, every subset of \\(X\\) is a subset of \\(Y\\) but not vice versa and the subsets of \\(Y\\) that are not subsets of \\(X\\) have to contain the element \\(x\\) . As a consequence, these can be described by the following expression. \\[ \\mathcal{P}(Y)\\setminus \\mathcal{P}(X) = \\left\\{ A \\cup \\{x\\} : A \\in \\mathcal{P}(X) \\right\\} \\] Based on this, we conclude the number of subsets of \\(Y\\) that are not subsets of \\(X\\) to be the same as the number of subsets of \\(X\\) . \\[ |\\mathcal{P}(Y) \\setminus \\mathcal{P}(X)| = |\\mathcal{P}(X)| \\] Furthermore, we know that their union defines the power set of \\(Y\\) and that they are disjoint. \\[ \\mathcal{P}(Y) = \\mathcal{P}(X) \\cup \\mathcal{P}(Y)\\setminus \\mathcal{P}(X) \\] \\[ \\emptyset = \\mathcal{P}(X) \\cap [ \\mathcal{P}(Y)\\setminus \\mathcal{P}(X) ] \\] Therefore the number of elements in the power set of \\(Y\\) can be computed by the following expression. \\[ |\\mathcal{P}(Y)| = |\\mathcal{P}(X)| + |\\mathcal{P}(Y) \\setminus \\mathcal{P}(X)| = 2 |\\mathcal{P}(X)| = 2 \\cdot 2^n = 2^{n+1} \\] By mathematical induction, this proves the lemma.","title":"Proof"},{"location":"mathematics/exercises/characterization_bijectivity/","text":"Characterization of Bijectivity \u00b6 Problem \u00b6 Let \\(X\\) and \\(Y\\) be sets and \\(f:X\\to Y\\) a function. Show that \\(f\\) is bijective if and only if there exists a function \\(g:Y\\to X\\) with \\(f\\circ g = \\operatorname{id}_Y\\) and \\(g\\circ f = \\operatorname{id}_X\\) . Furthermore, show that in this case the function \\(g\\) is unique. Proof \u00b6 \\(\\implies\\) : Let \\(f\\) be bijective. The typical characterization of bijectivity is given as follows. \\[ \\forall\\ y\\in Y: \\exists!\\ x\\in X: \\quad f(x) = y \\] For all \\(y\\in Y\\) , let \\(x\\in X\\) be the unique element such that \\(f(x)=y\\) and define the function \\(g\\) to be the following. \\[ g:Y\\to X ,\\qquad g(y)=x \\] \\[ f(g(y)) = f(x) = y \\quad\\implies\\quad f\\circ g = \\operatorname{id}_Y \\] \\[ g(f(x)) = g(y) = x \\quad\\implies\\quad g\\circ f = \\operatorname{id}_X \\] \\(\\Longleftarrow\\) : Let \\(g:Y\\to X\\) with the following properties. \\[ f\\circ g = \\operatorname{id}_Y ,\\qquad g\\circ f = \\operatorname{id}_X \\] First, we show that \\(f\\) is injective which is defined by the following statement. \\[ \\forall\\ a,b \\in X: \\quad f(a)=f(b) \\implies a = b \\] Let \\(a,b\\in X\\) be arbitrary. Then the following to equations hold. \\[ g(f(a)) = a ,\\qquad g(f(b)) = b \\] \\[ f(a) = f(b) \\implies g(f(a)) = g(f(b)) \\implies a = b \\] This shows that the function \\(f\\) is injective. Now, we show that \\(f\\) is surjective which is characterized by the following statement. \\[ \\forall\\ y\\in Y: \\exists\\ x\\in X: \\quad f(x) = y \\] Let \\(y\\in Y\\) be arbitrary. \\[ f(g(y)) = y \\] Choose \\(x = g(y)\\) . \\[ f(x) = y \\] This shows that the function \\(f\\) is surjective and as a consequence bijective. Uniqueness: Let \\(g_1,g_2:Y\\to X\\) be two functions with the following properties for all \\(i\\in\\{1,2\\}\\) . \\[ f\\circ g_i = \\operatorname{id}_Y ,\\qquad g_i\\circ f = \\operatorname{id}_X \\] We have already proven that the function \\(f\\) is bijective. Now, let \\(y\\in Y\\) be arbitrary. \\[ f(g_1(y)) = y = f(g_2(y)) \\] Because \\(f\\) is injective this implies the uniqueness. \\[ g_1(y) = g_2(y) \\] Note The unique function \\(g\\) is called the inverse of \\(f\\) and is typically denoted with \\(f^{-1}\\) . So \\(f\\) is bijective if and only if its unique inverse exists.","title":"Characterization of Bijectivity"},{"location":"mathematics/exercises/characterization_bijectivity/#characterization-of-bijectivity","text":"","title":"Characterization of Bijectivity"},{"location":"mathematics/exercises/characterization_bijectivity/#problem","text":"Let \\(X\\) and \\(Y\\) be sets and \\(f:X\\to Y\\) a function. Show that \\(f\\) is bijective if and only if there exists a function \\(g:Y\\to X\\) with \\(f\\circ g = \\operatorname{id}_Y\\) and \\(g\\circ f = \\operatorname{id}_X\\) . Furthermore, show that in this case the function \\(g\\) is unique.","title":"Problem"},{"location":"mathematics/exercises/characterization_bijectivity/#proof","text":"\\(\\implies\\) : Let \\(f\\) be bijective. The typical characterization of bijectivity is given as follows. \\[ \\forall\\ y\\in Y: \\exists!\\ x\\in X: \\quad f(x) = y \\] For all \\(y\\in Y\\) , let \\(x\\in X\\) be the unique element such that \\(f(x)=y\\) and define the function \\(g\\) to be the following. \\[ g:Y\\to X ,\\qquad g(y)=x \\] \\[ f(g(y)) = f(x) = y \\quad\\implies\\quad f\\circ g = \\operatorname{id}_Y \\] \\[ g(f(x)) = g(y) = x \\quad\\implies\\quad g\\circ f = \\operatorname{id}_X \\] \\(\\Longleftarrow\\) : Let \\(g:Y\\to X\\) with the following properties. \\[ f\\circ g = \\operatorname{id}_Y ,\\qquad g\\circ f = \\operatorname{id}_X \\] First, we show that \\(f\\) is injective which is defined by the following statement. \\[ \\forall\\ a,b \\in X: \\quad f(a)=f(b) \\implies a = b \\] Let \\(a,b\\in X\\) be arbitrary. Then the following to equations hold. \\[ g(f(a)) = a ,\\qquad g(f(b)) = b \\] \\[ f(a) = f(b) \\implies g(f(a)) = g(f(b)) \\implies a = b \\] This shows that the function \\(f\\) is injective. Now, we show that \\(f\\) is surjective which is characterized by the following statement. \\[ \\forall\\ y\\in Y: \\exists\\ x\\in X: \\quad f(x) = y \\] Let \\(y\\in Y\\) be arbitrary. \\[ f(g(y)) = y \\] Choose \\(x = g(y)\\) . \\[ f(x) = y \\] This shows that the function \\(f\\) is surjective and as a consequence bijective. Uniqueness: Let \\(g_1,g_2:Y\\to X\\) be two functions with the following properties for all \\(i\\in\\{1,2\\}\\) . \\[ f\\circ g_i = \\operatorname{id}_Y ,\\qquad g_i\\circ f = \\operatorname{id}_X \\] We have already proven that the function \\(f\\) is bijective. Now, let \\(y\\in Y\\) be arbitrary. \\[ f(g_1(y)) = y = f(g_2(y)) \\] Because \\(f\\) is injective this implies the uniqueness. \\[ g_1(y) = g_2(y) \\] Note The unique function \\(g\\) is called the inverse of \\(f\\) and is typically denoted with \\(f^{-1}\\) . So \\(f\\) is bijective if and only if its unique inverse exists.","title":"Proof"},{"location":"mathematics/exercises/convergence_implies_fixed_point/","text":"Convergence Implies the Existence of a Fixed Point \u00b6 Lemma \u00b6 Let \\((X,d)\\) be a metric space and \\(f:X\\to X\\) a continuous function. Furthermore, let \\(x_0, x\\in X\\) and \\((x_n)_{n\\in\\mathbb{N}}\\) be a sequence in \\(X\\) such that for all \\(n\\in\\mathbb{N}_0\\) the following is true. \\[ x_{n+1} = f(x_n) \\ ,\\qquad \\lim_{n\\to\\infty} x_n = x \\] In this case, \\(x\\) is a fixed point of \\(f\\) and therefore \\(f(x) = x\\) . Proof \u00b6 To prove the lemma, we directly apply the continuity of \\(f\\) and the definition of \\((x_n)\\) . \\[ f(x) = f\\left( \\lim_{n\\to\\infty} x_n \\right) = \\lim_{n\\to\\infty} f(x_n) = \\lim_{n\\to\\infty} x_{n+1} = x \\] Note The lemma gives us a way of computing the limit of a converging sequence by solving the equation \\(f(x)=x\\) . Example \u00b6 \\[ f:[0,1]\\to[0,1] \\ ,\\qquad f(x) = \\begin{cases} x^2 &: x\\in (0,1] \\\\ \\frac 12 &: x=0 \\end{cases} \\] In this case, \\(f\\) is not continuous but provides a fixed point \\(f(1)=1\\) . The lemma cannot be applied. For \\(x_0=\\frac 12\\) , the sequence \\((x_n)\\) will converge to \\(0\\) but \\(f(0)\\neq 0\\) .","title":"Convergence Implies the Existence of a Fixed Point"},{"location":"mathematics/exercises/convergence_implies_fixed_point/#convergence-implies-the-existence-of-a-fixed-point","text":"","title":"Convergence Implies the Existence of a Fixed Point"},{"location":"mathematics/exercises/convergence_implies_fixed_point/#lemma","text":"Let \\((X,d)\\) be a metric space and \\(f:X\\to X\\) a continuous function. Furthermore, let \\(x_0, x\\in X\\) and \\((x_n)_{n\\in\\mathbb{N}}\\) be a sequence in \\(X\\) such that for all \\(n\\in\\mathbb{N}_0\\) the following is true. \\[ x_{n+1} = f(x_n) \\ ,\\qquad \\lim_{n\\to\\infty} x_n = x \\] In this case, \\(x\\) is a fixed point of \\(f\\) and therefore \\(f(x) = x\\) .","title":"Lemma"},{"location":"mathematics/exercises/convergence_implies_fixed_point/#proof","text":"To prove the lemma, we directly apply the continuity of \\(f\\) and the definition of \\((x_n)\\) . \\[ f(x) = f\\left( \\lim_{n\\to\\infty} x_n \\right) = \\lim_{n\\to\\infty} f(x_n) = \\lim_{n\\to\\infty} x_{n+1} = x \\] Note The lemma gives us a way of computing the limit of a converging sequence by solving the equation \\(f(x)=x\\) .","title":"Proof"},{"location":"mathematics/exercises/convergence_implies_fixed_point/#example","text":"\\[ f:[0,1]\\to[0,1] \\ ,\\qquad f(x) = \\begin{cases} x^2 &: x\\in (0,1] \\\\ \\frac 12 &: x=0 \\end{cases} \\] In this case, \\(f\\) is not continuous but provides a fixed point \\(f(1)=1\\) . The lemma cannot be applied. For \\(x_0=\\frac 12\\) , the sequence \\((x_n)\\) will converge to \\(0\\) but \\(f(0)\\neq 0\\) .","title":"Example"},{"location":"mathematics/exercises/divisibility_by_133/","text":"Divisibility by 133 \u00b6 Problem \u00b6 Show by mathematical induction that for all \\(n \\in \\mathbb{N}\\) there exists an \\(m \\in \\mathbb{N}\\) such that the following equations holds. \\[ 11^{n+1} + 12^{2n-1} = 133 \\cdot m \\] Proof \u00b6 Initial Case: \\(n=1\\) \\[ 11^{n+1} + 12^{2n-1} = 11^2 + 12 = 133 \\quad \\implies \\quad m = 1 \\] Induction Step: \\(n\\implies n+1\\) Let \\(n\\in\\mathbb{N}\\) . According to the induction hypothesis, there exists an \\(m\\in\\mathbb{N}\\) such that the following holds. \\[ 11^{n+1} + 12^{2n-1} = 133 \\cdot m \\] We will now show that based on this hypothesis there exists another \\(m' \\in \\mathbb{N}\\) such that the same equation holds for \\(n+1\\) . \\[ 11^{(n+1)+1} + 12^{2(n+1)-1} = 11 \\cdot 11^{n+1} + 12^2 \\cdot 12^{2n-1} \\] First, we factor out the number \\(11\\) . For the right term, we are left with a remaining part. \\[ = 11 \\cdot \\left( 11^{n+1} + 12^{2n-1} \\right) + \\left( 12^2 - 11 \\right) \\cdot 12^{2n-1} \\] \\[ = 11 \\cdot \\left( 11^{n+1} + 12^{2n-1} \\right) + 133 \\cdot 12^{2n-1} \\] Using the induction hypothesis, we know that the first term is divisible by \\(133\\) . After factoring out \\(133\\) , it can then be seen that for \\(n+1\\) the given number is divisible by \\(133\\) . \\[ = 11 \\cdot 133 \\cdot m + 133 \\cdot 12^{2n-1} \\] \\[ = 133 \\cdot \\left( 11 \\cdot m + 12^{2n-1} \\right) \\quad\\implies\\quad m' = 11 \\cdot m + 12^{2n-1} \\] By mathematical induction, this proves the lemma.","title":"Divisibility by 133"},{"location":"mathematics/exercises/divisibility_by_133/#divisibility-by-133","text":"","title":"Divisibility by 133"},{"location":"mathematics/exercises/divisibility_by_133/#problem","text":"Show by mathematical induction that for all \\(n \\in \\mathbb{N}\\) there exists an \\(m \\in \\mathbb{N}\\) such that the following equations holds. \\[ 11^{n+1} + 12^{2n-1} = 133 \\cdot m \\]","title":"Problem"},{"location":"mathematics/exercises/divisibility_by_133/#proof","text":"Initial Case: \\(n=1\\) \\[ 11^{n+1} + 12^{2n-1} = 11^2 + 12 = 133 \\quad \\implies \\quad m = 1 \\] Induction Step: \\(n\\implies n+1\\) Let \\(n\\in\\mathbb{N}\\) . According to the induction hypothesis, there exists an \\(m\\in\\mathbb{N}\\) such that the following holds. \\[ 11^{n+1} + 12^{2n-1} = 133 \\cdot m \\] We will now show that based on this hypothesis there exists another \\(m' \\in \\mathbb{N}\\) such that the same equation holds for \\(n+1\\) . \\[ 11^{(n+1)+1} + 12^{2(n+1)-1} = 11 \\cdot 11^{n+1} + 12^2 \\cdot 12^{2n-1} \\] First, we factor out the number \\(11\\) . For the right term, we are left with a remaining part. \\[ = 11 \\cdot \\left( 11^{n+1} + 12^{2n-1} \\right) + \\left( 12^2 - 11 \\right) \\cdot 12^{2n-1} \\] \\[ = 11 \\cdot \\left( 11^{n+1} + 12^{2n-1} \\right) + 133 \\cdot 12^{2n-1} \\] Using the induction hypothesis, we know that the first term is divisible by \\(133\\) . After factoring out \\(133\\) , it can then be seen that for \\(n+1\\) the given number is divisible by \\(133\\) . \\[ = 11 \\cdot 133 \\cdot m + 133 \\cdot 12^{2n-1} \\] \\[ = 133 \\cdot \\left( 11 \\cdot m + 12^{2n-1} \\right) \\quad\\implies\\quad m' = 11 \\cdot m + 12^{2n-1} \\] By mathematical induction, this proves the lemma.","title":"Proof"},{"location":"mathematics/exercises/orthogonal_invariance_of_laplacian/","text":"Invariance of the Laplacian \u00b6 Problem \u00b6 Let \\(n\\in\\mathbb{N}\\) , \\(\\Omega\\subset\\mathbb{R}^n\\) an open subset, and \\(u:\\Omega\\to\\mathbb{R}\\) a two-times continuously differentiable scalar function. Additionally, let \\(A = (a_{ij}) \\in\\mathbb{R}^{n\\times n}\\) denote an orthogonal matrix and \\(b\\in\\mathbb{R}^n\\) an arbitrary shift vector. Define the affine transformation \\(\\varphi:\\mathbb{R}^n\\to\\mathbb{R}^n\\) with \\(\\varphi(x)=Ax + b\\) for all \\(x\\in\\mathbb{R}^n\\) . In this case the Laplacian is invariant under the transformation \\(\\varphi\\) . \\[ \\Delta(u\\circ\\varphi) = \\Delta u\\circ\\varphi \\] Proof \u00b6 We proof the proposition by computation. \\[ \\Delta(u\\circ\\varphi) = \\nabla\\cdot\\nabla (u\\circ\\varphi) \\] \\[ = \\nabla\\cdot\\left( \\mathrm{D}\\varphi \\cdot \\nabla u\\circ\\varphi \\right) \\] \\[ = \\nabla\\cdot\\left(A \\cdot \\nabla u\\circ\\varphi \\right) \\] At this point, let us go over to a simplified Einstein notation where doubled indices demand a summation from \\(1\\) to \\(n\\) . \\[ = \\partial_p ( a_{pq} \\cdot \\partial_qu\\circ\\varphi ) \\] \\[ = a_{pq} \\cdot \\partial_p (\\partial_q u\\circ\\varphi) \\] \\[ = a_{pq} \\cdot \\partial_r \\partial_q u\\circ\\varphi \\cdot \\partial_p\\varphi_r \\] \\[ = a_{pq} a_{rp} \\cdot \\partial_r \\partial_q u\\circ\\varphi \\] Now, we apply orthogonality of \\(A\\) which means \\(A^\\mathrm{T}A = \\mathbb{I}\\) . \\[ = \\delta_{rq} \\cdot \\partial_r \\partial_q u\\circ\\varphi \\] \\[ = \\partial_q\\partial_q u\\circ\\varphi = \\Delta u\\circ\\varphi \\]","title":"Invariance of the Laplacian"},{"location":"mathematics/exercises/orthogonal_invariance_of_laplacian/#invariance-of-the-laplacian","text":"","title":"Invariance of the Laplacian"},{"location":"mathematics/exercises/orthogonal_invariance_of_laplacian/#problem","text":"Let \\(n\\in\\mathbb{N}\\) , \\(\\Omega\\subset\\mathbb{R}^n\\) an open subset, and \\(u:\\Omega\\to\\mathbb{R}\\) a two-times continuously differentiable scalar function. Additionally, let \\(A = (a_{ij}) \\in\\mathbb{R}^{n\\times n}\\) denote an orthogonal matrix and \\(b\\in\\mathbb{R}^n\\) an arbitrary shift vector. Define the affine transformation \\(\\varphi:\\mathbb{R}^n\\to\\mathbb{R}^n\\) with \\(\\varphi(x)=Ax + b\\) for all \\(x\\in\\mathbb{R}^n\\) . In this case the Laplacian is invariant under the transformation \\(\\varphi\\) . \\[ \\Delta(u\\circ\\varphi) = \\Delta u\\circ\\varphi \\]","title":"Problem"},{"location":"mathematics/exercises/orthogonal_invariance_of_laplacian/#proof","text":"We proof the proposition by computation. \\[ \\Delta(u\\circ\\varphi) = \\nabla\\cdot\\nabla (u\\circ\\varphi) \\] \\[ = \\nabla\\cdot\\left( \\mathrm{D}\\varphi \\cdot \\nabla u\\circ\\varphi \\right) \\] \\[ = \\nabla\\cdot\\left(A \\cdot \\nabla u\\circ\\varphi \\right) \\] At this point, let us go over to a simplified Einstein notation where doubled indices demand a summation from \\(1\\) to \\(n\\) . \\[ = \\partial_p ( a_{pq} \\cdot \\partial_qu\\circ\\varphi ) \\] \\[ = a_{pq} \\cdot \\partial_p (\\partial_q u\\circ\\varphi) \\] \\[ = a_{pq} \\cdot \\partial_r \\partial_q u\\circ\\varphi \\cdot \\partial_p\\varphi_r \\] \\[ = a_{pq} a_{rp} \\cdot \\partial_r \\partial_q u\\circ\\varphi \\] Now, we apply orthogonality of \\(A\\) which means \\(A^\\mathrm{T}A = \\mathbb{I}\\) . \\[ = \\delta_{rq} \\cdot \\partial_r \\partial_q u\\circ\\varphi \\] \\[ = \\partial_q\\partial_q u\\circ\\varphi = \\Delta u\\circ\\varphi \\]","title":"Proof"},{"location":"programming/advanced_project/","text":"Advanced Project \u00b6 From the Basic to the Advanced Toolchain \u00b6 Strong Interaction of different Tools \u00b6 Auto Formatter \u00b6 Web Hosting \u00b6 Issue Management \u00b6 Licensing \u00b6 Documentation \u00b6 Unit Testing Framework \u00b6 Testing Multiple Configurations \u00b6 Debugger \u00b6 Logging \u00b6 Hooks \u00b6 Virtual Machines \u00b6 Continuous Integration \u00b6 GitHub \u00b6 CircleCI \u00b6 Automatic Documentation Generation \u00b6 Code Coverage \u00b6 Codecov \u00b6 Benchmarking \u00b6 Perf \u00b6 Profilers for CPU, Memory, and GPU \u00b6","title":"Advanced Project"},{"location":"programming/advanced_project/#advanced-project","text":"","title":"Advanced Project"},{"location":"programming/advanced_project/#from-the-basic-to-the-advanced-toolchain","text":"","title":"From the Basic to the Advanced Toolchain"},{"location":"programming/advanced_project/#strong-interaction-of-different-tools","text":"","title":"Strong Interaction of different Tools"},{"location":"programming/advanced_project/#auto-formatter","text":"","title":"Auto Formatter"},{"location":"programming/advanced_project/#web-hosting","text":"","title":"Web Hosting"},{"location":"programming/advanced_project/#issue-management","text":"","title":"Issue Management"},{"location":"programming/advanced_project/#licensing","text":"","title":"Licensing"},{"location":"programming/advanced_project/#documentation","text":"","title":"Documentation"},{"location":"programming/advanced_project/#unit-testing-framework","text":"","title":"Unit Testing Framework"},{"location":"programming/advanced_project/#testing-multiple-configurations","text":"","title":"Testing Multiple Configurations"},{"location":"programming/advanced_project/#debugger","text":"","title":"Debugger"},{"location":"programming/advanced_project/#logging","text":"","title":"Logging"},{"location":"programming/advanced_project/#hooks","text":"","title":"Hooks"},{"location":"programming/advanced_project/#virtual-machines","text":"","title":"Virtual Machines"},{"location":"programming/advanced_project/#continuous-integration","text":"","title":"Continuous Integration"},{"location":"programming/advanced_project/#github","text":"","title":"GitHub"},{"location":"programming/advanced_project/#circleci","text":"","title":"CircleCI"},{"location":"programming/advanced_project/#automatic-documentation-generation","text":"","title":"Automatic Documentation Generation"},{"location":"programming/advanced_project/#code-coverage","text":"","title":"Code Coverage"},{"location":"programming/advanced_project/#codecov","text":"","title":"Codecov"},{"location":"programming/advanced_project/#benchmarking","text":"","title":"Benchmarking"},{"location":"programming/advanced_project/#perf","text":"","title":"Perf"},{"location":"programming/advanced_project/#profilers-for-cpu-memory-and-gpu","text":"","title":"Profilers for CPU, Memory, and GPU"},{"location":"programming/basic_toolchain/","text":"Basic Toolchain \u00b6 The basic toolchain consists of all tools that are needed on a daily basis. Hence, we should strive for a deep understanding of all those tools. Especially, we should take the time to learn and configure them in a way that will help us to improve our workflow and efficiency when developing applications. Furthermore, after the comprehension of those tools, it would even help us to consider to optimize their interaction processes. In the following, the basic toolchain for a C++ project will be shown. Every part will be discussed as an independent tool. This following scheme shows an overview and gives an idea on how these tools interact with each other. Click on the image to get the according PDF. Notes on Integrated Development Environments \u00b6 Integrated Development Environments (IDEs) are software applications for computer programmers to support the process of writing and debugging code. They merge independent software development tools, such as source code editors, build automation tools, and debuggers, together in one bigger application. But there is no clear boundary if something should be called an IDE or a supporting tool. In general, the usage of an IDE will simplify installing the environment and will speed up code refactoring. On the other hand, IDEs tend to use up a huge amount of memory in the operating system. Furthermore, in my opinion, for a beginner, lots of things are made too simple so that learning and understanding is hindered and not really possible. A typical solution, which both sides agree with, is a minimal IDE that does not impose the disadvantages of a full-blown IDE, yet enhancing the development process. Nevertheless, the decision which of them to use is left to the reader. Operating System \u00b6 Recommendation Use a Linux distribution. The operating system is the most basic part of the development environment and is used in every single stage of a software project. Hence, it should support the development workflow in such a way that the programmer should not realize its existence. Therefore an ideal operating system for development would fulfill the following conditions. lightweight (older hardware should be capable of running this system) optimized for the hardware it is used on fast installation to new hardware fast booting and shutdown short response times (user should not wait) efficient interaction and communication with user (for example via a terminal through keyboard) capable of graphical output (humans are more attracted to nice looking designs) fast internet browsing for research fast installation of new packages and tools from modern repositories easily upgradeable without being forced to good defaults so no real configuration is needed compatibility to all development tools easy to learn for newcomers open source system / providing ways to use open source software free to use In reality there is no operating system which fulfills all of these conditions. As a consequence we look for the best subset. In our experience any Linux distribution seems to be a really good candidate. Most Linux distributions are lightweight, easy to install, fast to boot and shutdown and free to use. With nearly every distribution coding and installing tools can be done without problems. Upgrading a Linux distribution can be done manually. Choosing a specific Linux distribution is a matter of taste. But we recommend one of the following. Ubuntu/Debian-based (Ubuntu, Debian, Mint) Arch-based (Arch, Manjaro) Shell \u00b6 Recommendation Use a modern and efficient shell, like fish , elvish , ion , or try to adhere to the standard with bash or zsh . The shell is one of the most frequently used applications while developing. It is a user interface to access the services of an operating system and therefore the only possibility for a user besides the GUI to communicate with the operating system. Because of that the shell usage has to be highly optimized such that it not intervenes with the thought process or the actual development workflow. There are some resulting conditions a shell should fulfill. lightweight and fast to startup multiple instances easy scripting with easy syntax ease to learn for newcomers features that support navigation and search short response times good history tracking and usage easy configuration good defaults so no configuration is needed high availability on different systems independent of the operating system good handling of environment variables Again, there is no shell which fulfills every condition. Our suggestion is to think about modern alternatives. fish : easy to install, learn, use and script with support for all systems elvish : efficient with good features for history and navigation xonsh : superset of python and currently in development ion : really efficient But if you really want to have high availability of your shell then you should stick to bash , zsh or dash . The shell is a command-line interface to the standard operating system routines. Typically, we work with graphical user interfaces (GUIs) and therefore the shell has to be executed inside a terminal emulator. Like the name says, the terminal emulator emulates a terminal interface in which characters can be typed and interpreted by a running shell. If you have no other preferences, we recommend to choose the default terminal emulator of your operating system. Version Control System \u00b6 Recommendation Use Git as your version control system. Version control systems (VCS) are software programs that record changes to a file or a set of files over time so that it is possible to recall specific versions later. Therefore a VCS is a versatile alternative to the plain old backup process of manually copying folders. This makes it indispensable while working on the code for a project. Currently, the de-facto standard seems to be Git. Alternatives are given by Subversion, also known as SVN, and Mercurial. The overall performance of a VCS can be characterized by the following points. Centralized vs. Distributed Speed and Efficiency Compression Model and Memory Efficiency Command-Line Interface: Easy/Powerful/Low-Level/Abstraction Branching Model Learning Curve Level of Knowledge Needed Creation of New Repositories Server Setup Access Granularity Security Large-Project Scaling Availability and Interaction with External Tools Merge Strategies Group Capabilities Workflows New Feature Inclusion from External Users Property Git SVN Mercurial Centralized vs. Distributed Distributed Centralized Distributed Git can be used as a client for SVN and Mercurial References: Git Subversion SVN Mercurial https://svnvsgit.com/ https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/ https://ikriv.com/blog/?p=1905 Text Editor \u00b6 Recommendation Use Sublime Text , Atom or Visual Studio Code as your main general-purpose graphical text editor with your custom configurations and snippets. Use simple and standard command-line editors like vim or emacs for editing configuration files in place if there is only a command-line available. As a software developer your major work will have to do with source code. In general one uses a text editor to display code to work on it. Because of this the text editor has to be highly optimized like in the case of the shell. lightweight and fast (multiple instances) really efficient user interaction via keyboard and shortcuts (programmer has to work with the keyboard anyway) project handling (working on different projects at the same time) good interaction with shell (shell access should be fast) highly customizable through configurations and packages good defaults such that configuration is not really needed easy and fast package installation process simple and attractive design easy to learn for newcomers integrated build systems when needed useful for different languages Compiler \u00b6 Recommendation Use GCC compiler g++ , LLVM compiler clang and Intel C++ compiler icpc . On Windows use MinGW compiler g++ . Build System and Package Manager \u00b6 Recommendation For your own smaller projects use a modern build system with support for package managers, like build2 . For larger projects use modern CMake and think about providing support for build2 . Version Control System Server \u00b6 Recommendation Use an external hosting platform, such as GitHub or Bitbucket, or set up your own server, like Gitea. There are no real boundaries when choosing the hosting platform for your code repositories handled by the version control system. External hosting platforms, such as GitHub, Bitbucket, or GitLab, provide an easy web interface and are reliable with nearly no configuration needed. On the contrary, your code repositories may be private and you do not want them to reside on an external cloud storage. An alternative would be to set up your own Git server providing necessary storage and web access. A good choice for Git would be to use Gitea, which is a lightweight, fast, and easy-to-set-up self-hosted Git server platform. Other alternatives include GitLab, GitWeb, and Gogs. If the web access is not needed, one can completely rely on the file system of the host computer without setting up any hosting platform. In the case of a self-hosted platform, one should further consider security issues, like HTTPS, and backup procedures, such as RAID.","title":"Basic Toolchain"},{"location":"programming/basic_toolchain/#basic-toolchain","text":"The basic toolchain consists of all tools that are needed on a daily basis. Hence, we should strive for a deep understanding of all those tools. Especially, we should take the time to learn and configure them in a way that will help us to improve our workflow and efficiency when developing applications. Furthermore, after the comprehension of those tools, it would even help us to consider to optimize their interaction processes. In the following, the basic toolchain for a C++ project will be shown. Every part will be discussed as an independent tool. This following scheme shows an overview and gives an idea on how these tools interact with each other. Click on the image to get the according PDF.","title":"Basic Toolchain"},{"location":"programming/basic_toolchain/#notes-on-integrated-development-environments","text":"Integrated Development Environments (IDEs) are software applications for computer programmers to support the process of writing and debugging code. They merge independent software development tools, such as source code editors, build automation tools, and debuggers, together in one bigger application. But there is no clear boundary if something should be called an IDE or a supporting tool. In general, the usage of an IDE will simplify installing the environment and will speed up code refactoring. On the other hand, IDEs tend to use up a huge amount of memory in the operating system. Furthermore, in my opinion, for a beginner, lots of things are made too simple so that learning and understanding is hindered and not really possible. A typical solution, which both sides agree with, is a minimal IDE that does not impose the disadvantages of a full-blown IDE, yet enhancing the development process. Nevertheless, the decision which of them to use is left to the reader.","title":"Notes on Integrated Development Environments"},{"location":"programming/basic_toolchain/#operating-system","text":"Recommendation Use a Linux distribution. The operating system is the most basic part of the development environment and is used in every single stage of a software project. Hence, it should support the development workflow in such a way that the programmer should not realize its existence. Therefore an ideal operating system for development would fulfill the following conditions. lightweight (older hardware should be capable of running this system) optimized for the hardware it is used on fast installation to new hardware fast booting and shutdown short response times (user should not wait) efficient interaction and communication with user (for example via a terminal through keyboard) capable of graphical output (humans are more attracted to nice looking designs) fast internet browsing for research fast installation of new packages and tools from modern repositories easily upgradeable without being forced to good defaults so no real configuration is needed compatibility to all development tools easy to learn for newcomers open source system / providing ways to use open source software free to use In reality there is no operating system which fulfills all of these conditions. As a consequence we look for the best subset. In our experience any Linux distribution seems to be a really good candidate. Most Linux distributions are lightweight, easy to install, fast to boot and shutdown and free to use. With nearly every distribution coding and installing tools can be done without problems. Upgrading a Linux distribution can be done manually. Choosing a specific Linux distribution is a matter of taste. But we recommend one of the following. Ubuntu/Debian-based (Ubuntu, Debian, Mint) Arch-based (Arch, Manjaro)","title":"Operating System"},{"location":"programming/basic_toolchain/#shell","text":"Recommendation Use a modern and efficient shell, like fish , elvish , ion , or try to adhere to the standard with bash or zsh . The shell is one of the most frequently used applications while developing. It is a user interface to access the services of an operating system and therefore the only possibility for a user besides the GUI to communicate with the operating system. Because of that the shell usage has to be highly optimized such that it not intervenes with the thought process or the actual development workflow. There are some resulting conditions a shell should fulfill. lightweight and fast to startup multiple instances easy scripting with easy syntax ease to learn for newcomers features that support navigation and search short response times good history tracking and usage easy configuration good defaults so no configuration is needed high availability on different systems independent of the operating system good handling of environment variables Again, there is no shell which fulfills every condition. Our suggestion is to think about modern alternatives. fish : easy to install, learn, use and script with support for all systems elvish : efficient with good features for history and navigation xonsh : superset of python and currently in development ion : really efficient But if you really want to have high availability of your shell then you should stick to bash , zsh or dash . The shell is a command-line interface to the standard operating system routines. Typically, we work with graphical user interfaces (GUIs) and therefore the shell has to be executed inside a terminal emulator. Like the name says, the terminal emulator emulates a terminal interface in which characters can be typed and interpreted by a running shell. If you have no other preferences, we recommend to choose the default terminal emulator of your operating system.","title":"Shell"},{"location":"programming/basic_toolchain/#version-control-system","text":"Recommendation Use Git as your version control system. Version control systems (VCS) are software programs that record changes to a file or a set of files over time so that it is possible to recall specific versions later. Therefore a VCS is a versatile alternative to the plain old backup process of manually copying folders. This makes it indispensable while working on the code for a project. Currently, the de-facto standard seems to be Git. Alternatives are given by Subversion, also known as SVN, and Mercurial. The overall performance of a VCS can be characterized by the following points. Centralized vs. Distributed Speed and Efficiency Compression Model and Memory Efficiency Command-Line Interface: Easy/Powerful/Low-Level/Abstraction Branching Model Learning Curve Level of Knowledge Needed Creation of New Repositories Server Setup Access Granularity Security Large-Project Scaling Availability and Interaction with External Tools Merge Strategies Group Capabilities Workflows New Feature Inclusion from External Users Property Git SVN Mercurial Centralized vs. Distributed Distributed Centralized Distributed Git can be used as a client for SVN and Mercurial References: Git Subversion SVN Mercurial https://svnvsgit.com/ https://stevebennett.me/2012/02/24/10-things-i-hate-about-git/ https://ikriv.com/blog/?p=1905","title":"Version Control System"},{"location":"programming/basic_toolchain/#text-editor","text":"Recommendation Use Sublime Text , Atom or Visual Studio Code as your main general-purpose graphical text editor with your custom configurations and snippets. Use simple and standard command-line editors like vim or emacs for editing configuration files in place if there is only a command-line available. As a software developer your major work will have to do with source code. In general one uses a text editor to display code to work on it. Because of this the text editor has to be highly optimized like in the case of the shell. lightweight and fast (multiple instances) really efficient user interaction via keyboard and shortcuts (programmer has to work with the keyboard anyway) project handling (working on different projects at the same time) good interaction with shell (shell access should be fast) highly customizable through configurations and packages good defaults such that configuration is not really needed easy and fast package installation process simple and attractive design easy to learn for newcomers integrated build systems when needed useful for different languages","title":"Text Editor"},{"location":"programming/basic_toolchain/#compiler","text":"Recommendation Use GCC compiler g++ , LLVM compiler clang and Intel C++ compiler icpc . On Windows use MinGW compiler g++ .","title":"Compiler"},{"location":"programming/basic_toolchain/#build-system-and-package-manager","text":"Recommendation For your own smaller projects use a modern build system with support for package managers, like build2 . For larger projects use modern CMake and think about providing support for build2 .","title":"Build System and Package Manager"},{"location":"programming/basic_toolchain/#version-control-system-server","text":"Recommendation Use an external hosting platform, such as GitHub or Bitbucket, or set up your own server, like Gitea. There are no real boundaries when choosing the hosting platform for your code repositories handled by the version control system. External hosting platforms, such as GitHub, Bitbucket, or GitLab, provide an easy web interface and are reliable with nearly no configuration needed. On the contrary, your code repositories may be private and you do not want them to reside on an external cloud storage. An alternative would be to set up your own Git server providing necessary storage and web access. A good choice for Git would be to use Gitea, which is a lightweight, fast, and easy-to-set-up self-hosted Git server platform. Other alternatives include GitLab, GitWeb, and Gogs. If the web access is not needed, one can completely rely on the file system of the host computer without setting up any hosting platform. In the case of a self-hosted platform, one should further consider security issues, like HTTPS, and backup procedures, such as RAID.","title":"Version Control System Server"},{"location":"programming/common_toolchain/","text":"Common Toolchain \u00b6 Linux \u00b6 Shells \u00b6 bash dash zsh fish elvish ion Terminal Emulator \u00b6 Gnome Terminal Compiler \u00b6 GCC Compiler Clang Compiler Intel C++ Compiler Assembler \u00b6 NASM GAS Build Systems \u00b6 Make CMake Ninja build2 Version Control \u00b6 Git GitHub CLI Text Editors and IDEs \u00b6 Sublime Text Visual Studio Code CLion Web Browser \u00b6 Firefox Google Chrome Cross Compilation Tools \u00b6 Wine MinGW Cross Compiler Virtual Machines and Managers \u00b6 QEMU Virtualbox Windows Virtual Machine macOS Virtual Machine Windows \u00b6 Compiler \u00b6 MinGW Nuwen MinGW Distribution MSVC Clang Intel C++ Compiler Console Emulator \u00b6 Cmder Virtual Machines \u00b6 Virtualbox Linux Virtual Machine Windows Subsystem for Linux","title":"Common Toolchain"},{"location":"programming/common_toolchain/#common-toolchain","text":"","title":"Common Toolchain"},{"location":"programming/common_toolchain/#linux","text":"","title":"Linux"},{"location":"programming/common_toolchain/#shells","text":"bash dash zsh fish elvish ion","title":"Shells"},{"location":"programming/common_toolchain/#terminal-emulator","text":"Gnome Terminal","title":"Terminal Emulator"},{"location":"programming/common_toolchain/#compiler","text":"GCC Compiler Clang Compiler Intel C++ Compiler","title":"Compiler"},{"location":"programming/common_toolchain/#assembler","text":"NASM GAS","title":"Assembler"},{"location":"programming/common_toolchain/#build-systems","text":"Make CMake Ninja build2","title":"Build Systems"},{"location":"programming/common_toolchain/#version-control","text":"Git GitHub CLI","title":"Version Control"},{"location":"programming/common_toolchain/#text-editors-and-ides","text":"Sublime Text Visual Studio Code CLion","title":"Text Editors and IDEs"},{"location":"programming/common_toolchain/#web-browser","text":"Firefox Google Chrome","title":"Web Browser"},{"location":"programming/common_toolchain/#cross-compilation-tools","text":"Wine MinGW Cross Compiler","title":"Cross Compilation Tools"},{"location":"programming/common_toolchain/#virtual-machines-and-managers","text":"QEMU Virtualbox Windows Virtual Machine macOS Virtual Machine","title":"Virtual Machines and Managers"},{"location":"programming/common_toolchain/#windows","text":"","title":"Windows"},{"location":"programming/common_toolchain/#compiler_1","text":"MinGW Nuwen MinGW Distribution MSVC Clang Intel C++ Compiler","title":"Compiler"},{"location":"programming/common_toolchain/#console-emulator","text":"Cmder","title":"Console Emulator"},{"location":"programming/common_toolchain/#virtual-machines","text":"Virtualbox Linux Virtual Machine Windows Subsystem for Linux","title":"Virtual Machines"},{"location":"programming/community_files/","text":"Community Files \u00b6 License Files \u00b6 Please refer to choosealicense.com for a detailed explanation. README Files \u00b6 Short Summary \u00b6 Development Status and Badges \u00b6 Authors and Mailing Lists \u00b6 Requirements \u00b6 Support \u00b6 Clone \u00b6 Build \u00b6 Install \u00b6 Test \u00b6 Usage \u00b6 API \u00b6 Examples \u00b6 Background \u00b6 References \u00b6 Features \u00b6 Implementation Details \u00b6 Further Reading \u00b6 Roadmap \u00b6 Contributing Files \u00b6 Issue System and Issue Templates \u00b6 Documentation Style \u00b6 Style Guide \u00b6 Code Formatting \u00b6 Naming \u00b6 Concepts \u00b6 Git Workflow and Branch Naming, Rebase vs. Merge, GPG Signing, Hooks, Commit Messages, Templates, Scripts \u00b6 Strategies \u00b6 Pull Requests \u00b6 Mailing List \u00b6 Membership \u00b6 CI Pipelines and Unit Tests \u00b6 Remote Locations: GitHub, Gitea \u00b6 Authors Files \u00b6 News Files \u00b6","title":"Community Files"},{"location":"programming/community_files/#community-files","text":"","title":"Community Files"},{"location":"programming/community_files/#license-files","text":"Please refer to choosealicense.com for a detailed explanation.","title":"License Files"},{"location":"programming/community_files/#readme-files","text":"","title":"README Files"},{"location":"programming/community_files/#short-summary","text":"","title":"Short Summary"},{"location":"programming/community_files/#development-status-and-badges","text":"","title":"Development Status and Badges"},{"location":"programming/community_files/#authors-and-mailing-lists","text":"","title":"Authors and Mailing Lists"},{"location":"programming/community_files/#requirements","text":"","title":"Requirements"},{"location":"programming/community_files/#support","text":"","title":"Support"},{"location":"programming/community_files/#clone","text":"","title":"Clone"},{"location":"programming/community_files/#build","text":"","title":"Build"},{"location":"programming/community_files/#install","text":"","title":"Install"},{"location":"programming/community_files/#test","text":"","title":"Test"},{"location":"programming/community_files/#usage","text":"","title":"Usage"},{"location":"programming/community_files/#api","text":"","title":"API"},{"location":"programming/community_files/#examples","text":"","title":"Examples"},{"location":"programming/community_files/#background","text":"","title":"Background"},{"location":"programming/community_files/#references","text":"","title":"References"},{"location":"programming/community_files/#features","text":"","title":"Features"},{"location":"programming/community_files/#implementation-details","text":"","title":"Implementation Details"},{"location":"programming/community_files/#further-reading","text":"","title":"Further Reading"},{"location":"programming/community_files/#roadmap","text":"","title":"Roadmap"},{"location":"programming/community_files/#contributing-files","text":"","title":"Contributing Files"},{"location":"programming/community_files/#issue-system-and-issue-templates","text":"","title":"Issue System and Issue Templates"},{"location":"programming/community_files/#documentation-style","text":"","title":"Documentation Style"},{"location":"programming/community_files/#style-guide","text":"","title":"Style Guide"},{"location":"programming/community_files/#code-formatting","text":"","title":"Code Formatting"},{"location":"programming/community_files/#naming","text":"","title":"Naming"},{"location":"programming/community_files/#concepts","text":"","title":"Concepts"},{"location":"programming/community_files/#git-workflow-and-branch-naming-rebase-vs-merge-gpg-signing-hooks-commit-messages-templates-scripts","text":"","title":"Git Workflow and Branch Naming, Rebase vs. Merge, GPG Signing, Hooks, Commit Messages, Templates, Scripts"},{"location":"programming/community_files/#strategies","text":"","title":"Strategies"},{"location":"programming/community_files/#pull-requests","text":"","title":"Pull Requests"},{"location":"programming/community_files/#mailing-list","text":"","title":"Mailing List"},{"location":"programming/community_files/#membership","text":"","title":"Membership"},{"location":"programming/community_files/#ci-pipelines-and-unit-tests","text":"","title":"CI Pipelines and Unit Tests"},{"location":"programming/community_files/#remote-locations-github-gitea","text":"","title":"Remote Locations: GitHub, Gitea"},{"location":"programming/community_files/#authors-files","text":"","title":"Authors Files"},{"location":"programming/community_files/#news-files","text":"","title":"News Files"},{"location":"programming/documentation/","text":"Developing a software project which is used by others is a rewarding task. By communicating with users, you are able to improve the code and the overall design of the project. The users on the other side are happy to see their comments implemented and will use the tool more intensive. But even if the user base consists only of a few people, it becomes tedious to explain the basic usage of your program or library every time your API has changed. Additionally, not every user wants to communicate with you directly. Hence, documenting your software is mandatory if you want people to use it. But on the other hand, creating documentation seems not to be rewarding. And therefore, one likes to ignore this part of writing code. I am not a technical writer. So I will not talk about how to actually write documentation for your software, such that it is understandable by everyone. Instead, I would like to give you an idea about how to start with the basics and how to create a system which looks professional and is easy to handle. The first impression counts. And so, even yourself may be tempted to write more and better documentation. Basic Techniques \u00b6 There are a lot of possibilities out there for documenting software. I am not able to cover all of them. But I will try to explain some basic approaches and to provide a few more elaborate techniques for handling your documentation. Comments \u00b6 Recommendation Use comments only to give other developers hints about design decisions in your implementation or interface. Writing comments inside your code is a great and easy way to provide some sort of documentation where the programming language itself is not able to make the intention clear. But most of the times it is an overused feature. Blocks of comments reduce the readability of your code tremendously. Doxygen , for example, is a documentation tool which builds upon comments inside your code. Its usage is deprecated, in my opinion. Instead, use comments in your code to explain details about special implementation or interface parts. As a result, comments make it possible to give other developers hints about design decisions in your implementation or interface, but they are not suitable for documenting the usage of your software. README File \u00b6 Recommendation Always keep a README file in the root of your project up-to-date. In general, you will use a code hosting platform, like GitHub or Bitbucket, to publish your git repository. These platforms will recognize and automatically surface a README file in the root of your project to repository visitors. A README file is often the first item a visitor will see. Additionally, you do not have to use a specific extension or format. You can create a README file as README.txt for a simple text-based approach, as README.md to write your text in Markdown, as README.rst to use the reST format or as other formats that are supported by your code hosting platform. Hence, it is a perfect starting point for the documentation of every project. It is fast and easy to create and gives some advanced utilities based on the format you are using. Nearly every developer would first try to find such a README file to learn something about your code. Advanced Techniques \u00b6 Recommendation If your documentation does not fit into a README.md file anymore then use MkDocs and GitHub Pages as a hosting platform. If the manual building of the documentation becomes too cumbersome, try to use ReadTheDocs. There will be a point in time when writing information into a README file will not suffice as documentation. Therefore, tools were developed to make things easier for developers and technical writers. If you need more than one file to structure your documentation, you will generally use a folder docs inside your repository where you will put all of your documentation files. This will reduce merge conflicts and therefore make it easier for a developer to add new documentation parts or change already existing ones. But for a user of the library or application, the new layer of indirection introduces overhead. As a developer, you should make it appealing to read the documentation. This is why we need tools which make it possible to display the documentation in a stylish way. There are two types of tools we need. First, we use a documentation builder that takes the documentation sources and generates the HTML webpage. Afterwards, we will push to a hosting platform which then provides worldwide access to the generated HTML webpage. Unfortunately, both of them have to be compatible with each other. Documentation Builder: Sphinx : It is an easy-to-use build system written in Python which is not only able to generate HTML webpages but also LaTeX PDF documents and other formats. Documentation sources can be written in reST and Markdown. MkDocs : This is a fast and simple static site generator written in Python mainly used for building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Jekyll : This is a simple, extendable, static site generator written in Ruby. You give it text written in your favorite markup language and it churns through layouts to create a static website. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. Documentation Hosting Platform: ReadTheDocs : They call themselves a continuous documentation platform. For every commit, the documentation will be built and hosted. It is even possible to deploy different versions. Because of that, it is only possible to use Sphinx or MkDocs with it. GitHub Pages : This is a general hosting platform for static websites powered by GitHub and is therefore perfect to be integrated with your GitHub repositories. Nearly every static documentation builder should be compatible with it. But it is mainly used for Jekyll webpages. As an example, take a look at the build process of this documenation. Other Techniques \u00b6 GitHub Wiki GitBooks","title":"Creating a Documentation for your Project"},{"location":"programming/documentation/#basic-techniques","text":"There are a lot of possibilities out there for documenting software. I am not able to cover all of them. But I will try to explain some basic approaches and to provide a few more elaborate techniques for handling your documentation.","title":"Basic Techniques"},{"location":"programming/documentation/#comments","text":"Recommendation Use comments only to give other developers hints about design decisions in your implementation or interface. Writing comments inside your code is a great and easy way to provide some sort of documentation where the programming language itself is not able to make the intention clear. But most of the times it is an overused feature. Blocks of comments reduce the readability of your code tremendously. Doxygen , for example, is a documentation tool which builds upon comments inside your code. Its usage is deprecated, in my opinion. Instead, use comments in your code to explain details about special implementation or interface parts. As a result, comments make it possible to give other developers hints about design decisions in your implementation or interface, but they are not suitable for documenting the usage of your software.","title":"Comments"},{"location":"programming/documentation/#readme-file","text":"Recommendation Always keep a README file in the root of your project up-to-date. In general, you will use a code hosting platform, like GitHub or Bitbucket, to publish your git repository. These platforms will recognize and automatically surface a README file in the root of your project to repository visitors. A README file is often the first item a visitor will see. Additionally, you do not have to use a specific extension or format. You can create a README file as README.txt for a simple text-based approach, as README.md to write your text in Markdown, as README.rst to use the reST format or as other formats that are supported by your code hosting platform. Hence, it is a perfect starting point for the documentation of every project. It is fast and easy to create and gives some advanced utilities based on the format you are using. Nearly every developer would first try to find such a README file to learn something about your code.","title":"README File"},{"location":"programming/documentation/#advanced-techniques","text":"Recommendation If your documentation does not fit into a README.md file anymore then use MkDocs and GitHub Pages as a hosting platform. If the manual building of the documentation becomes too cumbersome, try to use ReadTheDocs. There will be a point in time when writing information into a README file will not suffice as documentation. Therefore, tools were developed to make things easier for developers and technical writers. If you need more than one file to structure your documentation, you will generally use a folder docs inside your repository where you will put all of your documentation files. This will reduce merge conflicts and therefore make it easier for a developer to add new documentation parts or change already existing ones. But for a user of the library or application, the new layer of indirection introduces overhead. As a developer, you should make it appealing to read the documentation. This is why we need tools which make it possible to display the documentation in a stylish way. There are two types of tools we need. First, we use a documentation builder that takes the documentation sources and generates the HTML webpage. Afterwards, we will push to a hosting platform which then provides worldwide access to the generated HTML webpage. Unfortunately, both of them have to be compatible with each other. Documentation Builder: Sphinx : It is an easy-to-use build system written in Python which is not only able to generate HTML webpages but also LaTeX PDF documents and other formats. Documentation sources can be written in reST and Markdown. MkDocs : This is a fast and simple static site generator written in Python mainly used for building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Jekyll : This is a simple, extendable, static site generator written in Ruby. You give it text written in your favorite markup language and it churns through layouts to create a static website. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. Documentation Hosting Platform: ReadTheDocs : They call themselves a continuous documentation platform. For every commit, the documentation will be built and hosted. It is even possible to deploy different versions. Because of that, it is only possible to use Sphinx or MkDocs with it. GitHub Pages : This is a general hosting platform for static websites powered by GitHub and is therefore perfect to be integrated with your GitHub repositories. Nearly every static documentation builder should be compatible with it. But it is mainly used for Jekyll webpages. As an example, take a look at the build process of this documenation.","title":"Advanced Techniques"},{"location":"programming/documentation/#other-techniques","text":"GitHub Wiki GitBooks","title":"Other Techniques"},{"location":"programming/git_basics/","text":"Git Basics \u00b6 Initialization \u00b6 After installing git make sure to set the user name and mail address. git config --global user.name \" $USER \" git config --global user.email \" $EMAIL \" Additionally, you should set the command-line editor as the commit message editor when using git from command-line. Graphicals tools will mostly have their own ways of communicating with Git. git config --global core.editor \" $EDITOR \" Since version 2.27, we should also configure the pull strategy. git config --global pull.rebase false .gitignore Whitelisting and Blacklisting Workflow \u00b6 The .gitignore file gives us the possibility to lighten up the process of adding modified or untracked files to the staging area. Instead of committing every file manually, we can do so by git add . . A proper .gitignore file will make sure only the necessary and important files are added to version control system. Because of this and due to different ignoring strategies, the .gitignore file can become a little bit more complicated. As a consequence, we need a way to test if the ignoring is working correctly. Git already provides a built-in tool for things like this. It is called git ls-files . Git Hooks \u00b6 git config --global core.hooksPath .githooks git config --local core.hooksPath .githooks References \u00b6 Pro Git : Main source for learning about Git available in multiple languages","title":"Git Basics"},{"location":"programming/git_basics/#git-basics","text":"","title":"Git Basics"},{"location":"programming/git_basics/#initialization","text":"After installing git make sure to set the user name and mail address. git config --global user.name \" $USER \" git config --global user.email \" $EMAIL \" Additionally, you should set the command-line editor as the commit message editor when using git from command-line. Graphicals tools will mostly have their own ways of communicating with Git. git config --global core.editor \" $EDITOR \" Since version 2.27, we should also configure the pull strategy. git config --global pull.rebase false","title":"Initialization"},{"location":"programming/git_basics/#gitignore-whitelisting-and-blacklisting-workflow","text":"The .gitignore file gives us the possibility to lighten up the process of adding modified or untracked files to the staging area. Instead of committing every file manually, we can do so by git add . . A proper .gitignore file will make sure only the necessary and important files are added to version control system. Because of this and due to different ignoring strategies, the .gitignore file can become a little bit more complicated. As a consequence, we need a way to test if the ignoring is working correctly. Git already provides a built-in tool for things like this. It is called git ls-files .","title":".gitignore Whitelisting and Blacklisting Workflow"},{"location":"programming/git_basics/#git-hooks","text":"git config --global core.hooksPath .githooks git config --local core.hooksPath .githooks","title":"Git Hooks"},{"location":"programming/git_basics/#references","text":"Pro Git : Main source for learning about Git available in multiple languages","title":"References"},{"location":"programming/licensing/","text":"Licensing a repository is an important step for every open source project. But the process of licensing seems to be rather official and too complicated for some small piece of code which currently is used only as an example. But take a look at choosealicense and the Open Source Guide . Besides the drawbacks of not using a license, you will find out that adding a license to your repository does not involve any official registrations or similar things. Instead, it is as easy as adding a new file called LICENSE based on some template to the root of your repository. Using GitHub the process can be even accelerated by using the standard templates already provided. The usual choice would be the so-called MIT License . I would suggest using this simple feature wherever possible. Documentation Licensing https://www.gnu.org/licenses/license-list.html","title":"Licensing a Repository"},{"location":"programming/linux_development_environment/","text":"Development Environment \u00b6 Windows and MacOS \u00b6 For consistent learning, every code snippet will refer to a clearly defined Linux distribution. We have chosen Manjaro. In our experience, Windows operating systems tend to introduce a major overhead to the learning process. Hence, we will provide instructions for using a Linux distribution inside a virtual machine. But please note that it is possible to do everything in Windows as well. Download and install VirtualBox for Windows hosts Download an ISO for Manjaro Gnome (or another Linux distribution of your choice) Initialize new virtual machine for a 64bit Arch-Linux Run the ISO of Manjaro in the new virtual machine and install it Shutdown the virtual machine and remove the ISO Restart the virtual machine You should now have a working Linux system. From this point on, we will only work inside this virtual machine to develop and run the code. Installing the Basic Tools \u00b6 Typical system package managers in Linux distributions allow us to easily install needed software. Make sure your Linux distribution is up-to-date. sudo pacman -Syu --noconfirm The distributions comes with a default terminal. If you want to use a different terminal, like fish , install and configure it. sudo pacman -S fish chsh -s /usr/bin/fish <username> Download the most common C++ compilers, like GCC, Clang and Intel. sudo pacman -S gcc clang Download the most common build systems for other libraries. sudo pacman -S make cmake Download and install build2 Make sure the version control system git is installed and configured. sudo pacman -S git git config --global user.name <username> git config --global user.email <email> Choose an editor for your future projects and install it. Here, we will use Sublime Text . Instructions can be found here . Make sure to choose the pacman -branch and the stable version. Afterwards, configure your editor on your own preferences. For Sublime Text , we provide this default.","title":"Development Environment"},{"location":"programming/linux_development_environment/#development-environment","text":"","title":"Development Environment"},{"location":"programming/linux_development_environment/#windows-and-macos","text":"For consistent learning, every code snippet will refer to a clearly defined Linux distribution. We have chosen Manjaro. In our experience, Windows operating systems tend to introduce a major overhead to the learning process. Hence, we will provide instructions for using a Linux distribution inside a virtual machine. But please note that it is possible to do everything in Windows as well. Download and install VirtualBox for Windows hosts Download an ISO for Manjaro Gnome (or another Linux distribution of your choice) Initialize new virtual machine for a 64bit Arch-Linux Run the ISO of Manjaro in the new virtual machine and install it Shutdown the virtual machine and remove the ISO Restart the virtual machine You should now have a working Linux system. From this point on, we will only work inside this virtual machine to develop and run the code.","title":"Windows and MacOS"},{"location":"programming/linux_development_environment/#installing-the-basic-tools","text":"Typical system package managers in Linux distributions allow us to easily install needed software. Make sure your Linux distribution is up-to-date. sudo pacman -Syu --noconfirm The distributions comes with a default terminal. If you want to use a different terminal, like fish , install and configure it. sudo pacman -S fish chsh -s /usr/bin/fish <username> Download the most common C++ compilers, like GCC, Clang and Intel. sudo pacman -S gcc clang Download the most common build systems for other libraries. sudo pacman -S make cmake Download and install build2 Make sure the version control system git is installed and configured. sudo pacman -S git git config --global user.name <username> git config --global user.email <email> Choose an editor for your future projects and install it. Here, we will use Sublime Text . Instructions can be found here . Make sure to choose the pacman -branch and the stable version. Afterwards, configure your editor on your own preferences. For Sublime Text , we provide this default.","title":"Installing the Basic Tools"},{"location":"programming/mkdocs_and_gh_pages_workflow/","text":"MkDocs and GitHub Pages Workflow \u00b6 This article will not explain the syntax and semantics of MkDocs or how to actually write a documentation. Instead, it aims at providing a workflow on how to start and integrate MkDocs in an ongoing project. Hence, this explanation should be useful if you want to learn how to start with a documentation and/or if your README.md of your project is not sufficient. Without loss of generality, we assume the name of the project to be codeflow and the name of the user to be lyrahgames . Please interchange both of them with your own preference. Requirements \u00b6 Python pip MkDocs Preliminaries \u00b6 Typically, the project files of your project codeflow will reside in their own directory, also known as the project directory , with the same name. In the most cases, the project directory is version-controlled by Git and as a result, we may as well call the respective directory the project repository . As an example, assume your project would be a C++ application. The content of the project could then be something like the following. codeflow \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md Here, we have some files and folders concerning Git, the chosen build system, the source code itself, license files, and the up-to-this-point-sufficient documentation in the file README.md . In a C++ project, we tend to use more than one configuration to build and test the source code of the project. As an example, we would like to build the project with the GCC and the Clang compiler. Due to their strong platform-dependence, these configurations should not be stored inside the project repository. Hence, they are not version-controlled by Git. To keep the overview over all those configurations, we use another parent directory again with the same name as the project. We call this parent directory the developer folder . In the following, the tree of the content for this example is shown. codeflow/ # Developer Folder \u2502 \u251c\u2500\u2500 codeflow/ # Project Folder \u2502 \u251c\u2500\u2500 .git/... \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u2502 \u2502 \u251c\u2500\u2500 build/ \u2502 \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2502 \u2514\u2500\u2500 root.build \u2502 \u251c\u2500\u2500 buildfile \u2502 \u251c\u2500\u2500 manifest \u2502 \u2502 \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u2502 \u2502 \u251c\u2500\u2500 LICENSE \u2502 \u2514\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 codeflow-gcc/... # Configuration Folder 'gcc' \u2502 \u2514\u2500\u2500 codeflow-clang/... # Configuration Folder 'clang' Initialization \u00b6 In the next step, we will initialize the documentation with its configuration. We assume that you are currently residing inside the developer folder of your project. $ pwd /home/lyrahgames/projects/codeflow Go into the project folder and create a directory for the documentation. Afterwards, initialize a new web documentation with MkDocs. cd codeflow mkdir docs cd docs mkdocs new web Note Sometimes the documentation for a project does not only exist as website readable by browsers but also as LaTeX documents or other presentations. In this case, we want to be able to keep such files inside the docs directory without changing the web documentation. Therefore we use another subdirectory called web . If you do want to keep things very simple then run mkdocs new docs inside your project folder. But please be aware that this will pollute your project folder with configuration files concerning MkDocs and its themes. We now have to make sure that Git is not ignoring those new files created by MkDocs. If you have chosen the white-listing approach for your .gitignore files, we can add something like the following to a new .gitignore file inside the web documentation folder. # File: docs/web/.gitignore !*.md !mkdocs.yml !requirements.txt Because MkDocs is based on Python, we additionally have created the file requirements.txt for the pip Package Manager to provide all requirements the documentation needs to be built. At this moment, it should only contain mkdocs . # File: docs/web/requirements.txt mkdocs The project folder structure should now look like the following. codeflow # Project Folder \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 docs/ # Documentation Folder \u2502 \u2514\u2500\u2500 web/ # Web Documentation Folder \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 docs/ \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md Now, to get an impression of the website, MkDocs provides the serve command. It will generate the documentation, update it every time a file in the directory has changed, and provide browser access to the generated site at address 127.0.0.1:8000 . So go into the web documentation folder, run the following command, and look at the result in your browser. mkdocs serve This finalizes the initialization process and as a good practice, a commit should be made. Configuration \u00b6 At this point, you are able to start documenting your project by adding new files in the Markdown format inside the docs folder of your web documentation folder. MkDocs will automatically detect those files and show them in the table of contents inside your browser. But on the other hand, it may be a good idea to take some more time to configure the MkDocs build process to slightly tweak the generated documentation. Basics \u00b6 The complete configuration of MkDocs can be done by adjusting the file mkdocs.yml inside the web documentation folder. At first you should add the basic information about your project and its documentation. # File: docs/web/mkdocs.yml site_name : Codeflow site_url : https://lyrahgames.github.io/codeflow site_author : Markus Pawellek site_description : >- Tutorials, Explanations, Exercises, Solutions, Workflows referring to Coding and Sciences repo_name : lyrahgames/codeflow repo_url : https://github.com/lyrahgames/codeflow copyright : Copyright &copy; 2020 Markus Pawellek Theme \u00b6 Afterwards, in my opinion one of the main decisions has to be made. We have to choose a theme. I recommend to choose the Material for MkDocs theme . This theme comes with an extremely good documentation about its usage and configuration. Furthermore, it gives you some hints about what extensions and plugins to additionally add to your MkDocs configuration to make the documentation process easier and faster. Here, we do not go through details but provide an example configuration for the Material theme. # File: docs/web/mkdocs.yml # ... theme : name : material custom_dir : overrides language : en features : - tabs palette : scheme : default primary : white accent : indigo font : text : Roboto code : Roboto Mono icon : logo : material/library repo : fontawesome/brands/git-alt extra : social : - icon : fontawesome/brands/github link : https://github.com/lyrahgames markdown_extensions : - admonition - codehilite : guess_lang : false linenums : false - toc : permalink : true - meta - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tabbed - pymdownx.tilde extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML plugins : - search - minify : minify_html : true - git-revision-date-localized - awesome-pages We make sure not to use something not provided by the system and add some new entries to the requirements.txt file. # File: docs/web/requirements.txt mkdocs mkdocs-material mkdocs-minify-plugin mkdocs-git-revision-date-localized-plugin mkdocs-awesome-pages-plugin Before looking at the generated output, make sure to use pip with this requirements.txt to install the missing dependencies for ourselves by running the following command. pip install -r requirements.txt Customization of Material Theme: Justify Text \u00b6 Nearly every theme for MkDocs will give possibilities to customize its design, formatting rules, and other stuff. As an example for the Material theme, we will show how to set the alignment of content text blocks to the justify mode. For this, we use the override mechanism provided by the Material theme. First, create a new directory overrides in the web documentation folder. cd docs/web mkdir overrides cd overrides Now, open the new file main.html inside the folder overrides and add the following content. {% extends \"base.html\" %} {% block content %} < style type = \"text/css\" > p { text-align : justify ; text-justify : inter-word ; } </ style > {{ super() }} {% endblock %} Your current project folder structure should look like the following. codeflow # Project Folder \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 docs/ # Documentation Folder \u2502 \u2514\u2500\u2500 web/ # Web Documentation Folder \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 docs/ # Folder for the Actual Documentation Files \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 overrides/ # Material Theme Customization Folder \u2502 \u2502 \u2514\u2500\u2500 main.html # Customization for all Documentation Files \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md Build and Deploy \u00b6 After complete configuration and the writing of new documentation files, the generated site should be observed in the browser to test if all settings work as expected. This can be done again by using the command mkdocs serve . If everything seems to be alright, we have to build the documentation to actually get the files of the website. We want to push those files to a documentation hosting platform, in our case GitHub Pages, to make the documentation available to other people. Initialization \u00b6 First, we set up a new configuration folder inside the developer folder where all files of the generated documentation will be put. Because we want to use GitHub Pages as a hosting platform, we have to make sure to use a Git repository which is pushing to the branch gh-pages . Make sure that you are in the developer folder. $ pwd /home/lyrahgames/projects/codeflow Initialize a new Git repository, set it to the according branch, and provide the GitHub repository address as a remote by using the following commands. git init codeflow-gh-pages cd codeflow-gh-pages git checkout -b gh-pages git remote add origin git@github.com:lyrahgames/codeflow.git The structure of your developer folder should now look like this. codeflow/ # Developer Folder \u2502 \u251c\u2500\u2500 codeflow/... # Project Folder \u2502 \u251c\u2500\u2500 codeflow-gcc/... # Configuration Folder 'gcc' \u2502 \u251c\u2500\u2500 codeflow-clang/... # Configuration Folder 'clang' \u2502 \u2514\u2500\u2500 codeflow-gh-pages/ # Configuration Folder for GitHub Pages The GitHub Pages environment on GitHub does not have to be turned on manually. GitHub should automatically enable this feature if the gh-pages branch is available in the GitHub repository. If this is not the case, enable the environment manually. Updating \u00b6 Building the documentation has to be done every time you want to push the changes to the hosting platform. To keep your GitHub repository consistent, you should first make a commit in the project folder and push it to the master branch of your GitHub repository. git add . git commit git push origin master Afterwards, you are now able to actually build the documentation into the configuration folder for GitHub Pages. Make sure to run the following command inside the web documentation folder. mkdocs build -d ../../../codeflow-gh-pages Now, we go into the configuration folder for GitHub Pages and commit its changes by amending to the previous commit. This makes sure the site will not be version-controlled by Git. We do not want it to be version-controlled because the generated site is a build artifact. cd ../../../codeflow-gh-pages git add . git commit --amend -m \"Update site\" Because we have amended to the previous commit, we have to do a force push to the gh-pages branch to update the documentation on the hosting platform. git push -f origin gh-pages. Automatic Documentation Generation Of course, it would be possible to automatically generate the documentation with a CI environment. But we do not recommend it. For this, we would need another server which additionally would have to be configured. This may introduce unnecessary version controlling for the generated site and as a result unnecessary memory usage of the repository. For a simple documentation site, this may be too much overhead. If one would not want to use GitHub Pages, we could use ReadTheDocs to automatically generate every commit to the master branch. Making it Easier through Scripts \u00b6 If you are frequently writing the documentation of your project on different platforms, it can become cumbersome to run all the commands for the initialization, building, and deploying every time. To make it easier and faster, we can provide simple scripts that allow us to do these processes in one simple step. Here, it is done for a Linux-based operating system. We will create two shell scripts, init.sh for the initialization and build_and_deploy.sh for the building and deployment, inside the web documentation folder. Your current project folder structure should then look like the following. codeflow # Project Folder \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 docs/ # Documentation Folder \u2502 \u2514\u2500\u2500 web/ # Web Documentation Folder \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 docs/ # Folder for the Actual Documentation Files \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 overrides/ \u2502 \u2502 \u2514\u2500\u2500 main.html \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 init.sh # Shell Script for Initialization \u2502 \u2514\u2500\u2500 build_and_deploy.sh # Shell Script for Building and Deployment \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md Both scripts only contain the commands that were already described in the above sections. Additionally, we have added a mechanism to determine the current folder and changing the current directory to the directory where the script itself lies. This makes sure there will be no problems when the scripts are called from another directory. # File: docs/web/init.sh #!/bin/sh # Make sure to run the run the commands in the web documentation folder. doc_dir = ` dirname \" $0 \" ` cd $doc_dir # Install all requirements to be able to build the documentation. pip install -r requirements.txt # Create a configuration folder for the gh-pages branch next to the # project folder and hopefully inside the developer folder. # After building the documentation, we typically do a force push to # the remote repository. Hence, it is enough to create a new repository # and not to clone the remote repository. # We can even run these commands if there is no gh-pages branch available. cd ../../.. git init codeflow-gh-pages cd codeflow-gh-pages git checkout -b gh-pages git remote add origin git@github.com:lyrahgames/codeflow.git touch index.html git add . git commit -m \"Initial commit\" # Alternative initialization process using cloning. # cd ../../.. # git clone git@github.com:lyrahgames/codeflow.git --branch gh-pages --single-branch codeflow-gh-pages # cd codeflow-gh-pages # git checkout gh-pages # File: docs/web/build_and_deploy.sh #!/bin/sh # Make sure to run the run the commands in the web documentation folder. doc_dir = ` dirname \" $0 \" ` cd $doc_dir # Build the documentation into the GitHub Pages configuration folder. mkdocs build -d ../../../codeflow-gh-pages # Deploy the documentation by amending the changes to disable version control # and by force pushing to the remote repository. cd ../../../codeflow-gh-pages git add . git commit --amend -m \"Update site\" git push -f origin gh-pages Of course, we have to slightly change the .gitignore file to allow the shell scripts to be captured by Git. # File: docs/web/.gitignore !overrides/*.html !mkdocs.yml !requirements.txt !*.sh Afterwards, we set the executable flags to be able to run the scripts from the command line. chmod +x init.sh build_and_deploy.sh For the future this means, after cloning the repository, one should execute the init.sh script to generate the GitHub Pages configuration folder. After changing the documentation and committing the result, one should call the build_and_deploy.sh script to push the newly created site to documentation hosting platform. Note Going one step further, we could even think about using Git hooks to automatically run the build_and_deploy.sh script for every commit on the master branch. References \u00b6 MkDocs Documentation Material for MkDocs Documentation","title":"MkDocs and GitHub Pages Workflow"},{"location":"programming/mkdocs_and_gh_pages_workflow/#mkdocs-and-github-pages-workflow","text":"This article will not explain the syntax and semantics of MkDocs or how to actually write a documentation. Instead, it aims at providing a workflow on how to start and integrate MkDocs in an ongoing project. Hence, this explanation should be useful if you want to learn how to start with a documentation and/or if your README.md of your project is not sufficient. Without loss of generality, we assume the name of the project to be codeflow and the name of the user to be lyrahgames . Please interchange both of them with your own preference.","title":"MkDocs and GitHub Pages Workflow"},{"location":"programming/mkdocs_and_gh_pages_workflow/#requirements","text":"Python pip MkDocs","title":"Requirements"},{"location":"programming/mkdocs_and_gh_pages_workflow/#preliminaries","text":"Typically, the project files of your project codeflow will reside in their own directory, also known as the project directory , with the same name. In the most cases, the project directory is version-controlled by Git and as a result, we may as well call the respective directory the project repository . As an example, assume your project would be a C++ application. The content of the project could then be something like the following. codeflow \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md Here, we have some files and folders concerning Git, the chosen build system, the source code itself, license files, and the up-to-this-point-sufficient documentation in the file README.md . In a C++ project, we tend to use more than one configuration to build and test the source code of the project. As an example, we would like to build the project with the GCC and the Clang compiler. Due to their strong platform-dependence, these configurations should not be stored inside the project repository. Hence, they are not version-controlled by Git. To keep the overview over all those configurations, we use another parent directory again with the same name as the project. We call this parent directory the developer folder . In the following, the tree of the content for this example is shown. codeflow/ # Developer Folder \u2502 \u251c\u2500\u2500 codeflow/ # Project Folder \u2502 \u251c\u2500\u2500 .git/... \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u2502 \u2502 \u251c\u2500\u2500 build/ \u2502 \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2502 \u2514\u2500\u2500 root.build \u2502 \u251c\u2500\u2500 buildfile \u2502 \u251c\u2500\u2500 manifest \u2502 \u2502 \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u2502 \u2502 \u251c\u2500\u2500 LICENSE \u2502 \u2514\u2500\u2500 README.md \u2502 \u251c\u2500\u2500 codeflow-gcc/... # Configuration Folder 'gcc' \u2502 \u2514\u2500\u2500 codeflow-clang/... # Configuration Folder 'clang'","title":"Preliminaries"},{"location":"programming/mkdocs_and_gh_pages_workflow/#initialization","text":"In the next step, we will initialize the documentation with its configuration. We assume that you are currently residing inside the developer folder of your project. $ pwd /home/lyrahgames/projects/codeflow Go into the project folder and create a directory for the documentation. Afterwards, initialize a new web documentation with MkDocs. cd codeflow mkdir docs cd docs mkdocs new web Note Sometimes the documentation for a project does not only exist as website readable by browsers but also as LaTeX documents or other presentations. In this case, we want to be able to keep such files inside the docs directory without changing the web documentation. Therefore we use another subdirectory called web . If you do want to keep things very simple then run mkdocs new docs inside your project folder. But please be aware that this will pollute your project folder with configuration files concerning MkDocs and its themes. We now have to make sure that Git is not ignoring those new files created by MkDocs. If you have chosen the white-listing approach for your .gitignore files, we can add something like the following to a new .gitignore file inside the web documentation folder. # File: docs/web/.gitignore !*.md !mkdocs.yml !requirements.txt Because MkDocs is based on Python, we additionally have created the file requirements.txt for the pip Package Manager to provide all requirements the documentation needs to be built. At this moment, it should only contain mkdocs . # File: docs/web/requirements.txt mkdocs The project folder structure should now look like the following. codeflow # Project Folder \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 docs/ # Documentation Folder \u2502 \u2514\u2500\u2500 web/ # Web Documentation Folder \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 docs/ \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md Now, to get an impression of the website, MkDocs provides the serve command. It will generate the documentation, update it every time a file in the directory has changed, and provide browser access to the generated site at address 127.0.0.1:8000 . So go into the web documentation folder, run the following command, and look at the result in your browser. mkdocs serve This finalizes the initialization process and as a good practice, a commit should be made.","title":"Initialization"},{"location":"programming/mkdocs_and_gh_pages_workflow/#configuration","text":"At this point, you are able to start documenting your project by adding new files in the Markdown format inside the docs folder of your web documentation folder. MkDocs will automatically detect those files and show them in the table of contents inside your browser. But on the other hand, it may be a good idea to take some more time to configure the MkDocs build process to slightly tweak the generated documentation.","title":"Configuration"},{"location":"programming/mkdocs_and_gh_pages_workflow/#basics","text":"The complete configuration of MkDocs can be done by adjusting the file mkdocs.yml inside the web documentation folder. At first you should add the basic information about your project and its documentation. # File: docs/web/mkdocs.yml site_name : Codeflow site_url : https://lyrahgames.github.io/codeflow site_author : Markus Pawellek site_description : >- Tutorials, Explanations, Exercises, Solutions, Workflows referring to Coding and Sciences repo_name : lyrahgames/codeflow repo_url : https://github.com/lyrahgames/codeflow copyright : Copyright &copy; 2020 Markus Pawellek","title":"Basics"},{"location":"programming/mkdocs_and_gh_pages_workflow/#theme","text":"Afterwards, in my opinion one of the main decisions has to be made. We have to choose a theme. I recommend to choose the Material for MkDocs theme . This theme comes with an extremely good documentation about its usage and configuration. Furthermore, it gives you some hints about what extensions and plugins to additionally add to your MkDocs configuration to make the documentation process easier and faster. Here, we do not go through details but provide an example configuration for the Material theme. # File: docs/web/mkdocs.yml # ... theme : name : material custom_dir : overrides language : en features : - tabs palette : scheme : default primary : white accent : indigo font : text : Roboto code : Roboto Mono icon : logo : material/library repo : fontawesome/brands/git-alt extra : social : - icon : fontawesome/brands/github link : https://github.com/lyrahgames markdown_extensions : - admonition - codehilite : guess_lang : false linenums : false - toc : permalink : true - meta - pymdownx.arithmatex - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tabbed - pymdownx.tilde extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML plugins : - search - minify : minify_html : true - git-revision-date-localized - awesome-pages We make sure not to use something not provided by the system and add some new entries to the requirements.txt file. # File: docs/web/requirements.txt mkdocs mkdocs-material mkdocs-minify-plugin mkdocs-git-revision-date-localized-plugin mkdocs-awesome-pages-plugin Before looking at the generated output, make sure to use pip with this requirements.txt to install the missing dependencies for ourselves by running the following command. pip install -r requirements.txt","title":"Theme"},{"location":"programming/mkdocs_and_gh_pages_workflow/#customization-of-material-theme-justify-text","text":"Nearly every theme for MkDocs will give possibilities to customize its design, formatting rules, and other stuff. As an example for the Material theme, we will show how to set the alignment of content text blocks to the justify mode. For this, we use the override mechanism provided by the Material theme. First, create a new directory overrides in the web documentation folder. cd docs/web mkdir overrides cd overrides Now, open the new file main.html inside the folder overrides and add the following content. {% extends \"base.html\" %} {% block content %} < style type = \"text/css\" > p { text-align : justify ; text-justify : inter-word ; } </ style > {{ super() }} {% endblock %} Your current project folder structure should look like the following. codeflow # Project Folder \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 docs/ # Documentation Folder \u2502 \u2514\u2500\u2500 web/ # Web Documentation Folder \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 docs/ # Folder for the Actual Documentation Files \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 overrides/ # Material Theme Customization Folder \u2502 \u2502 \u2514\u2500\u2500 main.html # Customization for all Documentation Files \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md","title":"Customization of Material Theme: Justify Text"},{"location":"programming/mkdocs_and_gh_pages_workflow/#build-and-deploy","text":"After complete configuration and the writing of new documentation files, the generated site should be observed in the browser to test if all settings work as expected. This can be done again by using the command mkdocs serve . If everything seems to be alright, we have to build the documentation to actually get the files of the website. We want to push those files to a documentation hosting platform, in our case GitHub Pages, to make the documentation available to other people.","title":"Build and Deploy"},{"location":"programming/mkdocs_and_gh_pages_workflow/#initialization_1","text":"First, we set up a new configuration folder inside the developer folder where all files of the generated documentation will be put. Because we want to use GitHub Pages as a hosting platform, we have to make sure to use a Git repository which is pushing to the branch gh-pages . Make sure that you are in the developer folder. $ pwd /home/lyrahgames/projects/codeflow Initialize a new Git repository, set it to the according branch, and provide the GitHub repository address as a remote by using the following commands. git init codeflow-gh-pages cd codeflow-gh-pages git checkout -b gh-pages git remote add origin git@github.com:lyrahgames/codeflow.git The structure of your developer folder should now look like this. codeflow/ # Developer Folder \u2502 \u251c\u2500\u2500 codeflow/... # Project Folder \u2502 \u251c\u2500\u2500 codeflow-gcc/... # Configuration Folder 'gcc' \u2502 \u251c\u2500\u2500 codeflow-clang/... # Configuration Folder 'clang' \u2502 \u2514\u2500\u2500 codeflow-gh-pages/ # Configuration Folder for GitHub Pages The GitHub Pages environment on GitHub does not have to be turned on manually. GitHub should automatically enable this feature if the gh-pages branch is available in the GitHub repository. If this is not the case, enable the environment manually.","title":"Initialization"},{"location":"programming/mkdocs_and_gh_pages_workflow/#updating","text":"Building the documentation has to be done every time you want to push the changes to the hosting platform. To keep your GitHub repository consistent, you should first make a commit in the project folder and push it to the master branch of your GitHub repository. git add . git commit git push origin master Afterwards, you are now able to actually build the documentation into the configuration folder for GitHub Pages. Make sure to run the following command inside the web documentation folder. mkdocs build -d ../../../codeflow-gh-pages Now, we go into the configuration folder for GitHub Pages and commit its changes by amending to the previous commit. This makes sure the site will not be version-controlled by Git. We do not want it to be version-controlled because the generated site is a build artifact. cd ../../../codeflow-gh-pages git add . git commit --amend -m \"Update site\" Because we have amended to the previous commit, we have to do a force push to the gh-pages branch to update the documentation on the hosting platform. git push -f origin gh-pages. Automatic Documentation Generation Of course, it would be possible to automatically generate the documentation with a CI environment. But we do not recommend it. For this, we would need another server which additionally would have to be configured. This may introduce unnecessary version controlling for the generated site and as a result unnecessary memory usage of the repository. For a simple documentation site, this may be too much overhead. If one would not want to use GitHub Pages, we could use ReadTheDocs to automatically generate every commit to the master branch.","title":"Updating"},{"location":"programming/mkdocs_and_gh_pages_workflow/#making-it-easier-through-scripts","text":"If you are frequently writing the documentation of your project on different platforms, it can become cumbersome to run all the commands for the initialization, building, and deploying every time. To make it easier and faster, we can provide simple scripts that allow us to do these processes in one simple step. Here, it is done for a Linux-based operating system. We will create two shell scripts, init.sh for the initialization and build_and_deploy.sh for the building and deployment, inside the web documentation folder. Your current project folder structure should then look like the following. codeflow # Project Folder \u251c\u2500\u2500 .git/... \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 build/ \u2502 \u251c\u2500\u2500 bootstrap.build \u2502 \u2514\u2500\u2500 root.build \u251c\u2500\u2500 buildfile \u251c\u2500\u2500 manifest \u2502 \u251c\u2500\u2500 docs/ # Documentation Folder \u2502 \u2514\u2500\u2500 web/ # Web Documentation Folder \u2502 \u251c\u2500\u2500 .gitignore \u2502 \u251c\u2500\u2500 docs/ # Folder for the Actual Documentation Files \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 overrides/ \u2502 \u2502 \u2514\u2500\u2500 main.html \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u251c\u2500\u2500 requirements.txt \u2502 \u251c\u2500\u2500 init.sh # Shell Script for Initialization \u2502 \u2514\u2500\u2500 build_and_deploy.sh # Shell Script for Building and Deployment \u2502 \u251c\u2500\u2500 codeflow/ \u2502 \u251c\u2500\u2500 application.cpp \u2502 \u251c\u2500\u2500 application.hpp \u2502 \u251c\u2500\u2500 buildfile \u2502 \u2514\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md Both scripts only contain the commands that were already described in the above sections. Additionally, we have added a mechanism to determine the current folder and changing the current directory to the directory where the script itself lies. This makes sure there will be no problems when the scripts are called from another directory. # File: docs/web/init.sh #!/bin/sh # Make sure to run the run the commands in the web documentation folder. doc_dir = ` dirname \" $0 \" ` cd $doc_dir # Install all requirements to be able to build the documentation. pip install -r requirements.txt # Create a configuration folder for the gh-pages branch next to the # project folder and hopefully inside the developer folder. # After building the documentation, we typically do a force push to # the remote repository. Hence, it is enough to create a new repository # and not to clone the remote repository. # We can even run these commands if there is no gh-pages branch available. cd ../../.. git init codeflow-gh-pages cd codeflow-gh-pages git checkout -b gh-pages git remote add origin git@github.com:lyrahgames/codeflow.git touch index.html git add . git commit -m \"Initial commit\" # Alternative initialization process using cloning. # cd ../../.. # git clone git@github.com:lyrahgames/codeflow.git --branch gh-pages --single-branch codeflow-gh-pages # cd codeflow-gh-pages # git checkout gh-pages # File: docs/web/build_and_deploy.sh #!/bin/sh # Make sure to run the run the commands in the web documentation folder. doc_dir = ` dirname \" $0 \" ` cd $doc_dir # Build the documentation into the GitHub Pages configuration folder. mkdocs build -d ../../../codeflow-gh-pages # Deploy the documentation by amending the changes to disable version control # and by force pushing to the remote repository. cd ../../../codeflow-gh-pages git add . git commit --amend -m \"Update site\" git push -f origin gh-pages Of course, we have to slightly change the .gitignore file to allow the shell scripts to be captured by Git. # File: docs/web/.gitignore !overrides/*.html !mkdocs.yml !requirements.txt !*.sh Afterwards, we set the executable flags to be able to run the scripts from the command line. chmod +x init.sh build_and_deploy.sh For the future this means, after cloning the repository, one should execute the init.sh script to generate the GitHub Pages configuration folder. After changing the documentation and committing the result, one should call the build_and_deploy.sh script to push the newly created site to documentation hosting platform. Note Going one step further, we could even think about using Git hooks to automatically run the build_and_deploy.sh script for every commit on the master branch.","title":"Making it Easier through Scripts"},{"location":"programming/mkdocs_and_gh_pages_workflow/#references","text":"MkDocs Documentation Material for MkDocs Documentation","title":"References"},{"location":"programming/windows_development_environment/","text":"Development on Windows \u00b6 I am not very experienced with Windows but the following tools have proven to be good. Editors \u00b6 Terminal Emulator \u00b6 \u00b6","title":"Development on Windows"},{"location":"programming/windows_development_environment/#development-on-windows","text":"I am not very experienced with Windows but the following tools have proven to be good.","title":"Development on Windows"},{"location":"programming/windows_development_environment/#editors","text":"","title":"Editors"},{"location":"programming/windows_development_environment/#terminal-emulator","text":"","title":"Terminal Emulator"},{"location":"programming/windows_development_environment/#_1","text":"","title":""},{"location":"programming/c%2B%2B/clang_format_force_newlines/","text":"clang-format is a tool which can automatically format your C++ source code. It provides different standard styles and custom configuration possibilities. Its usage lets you think more about the content of your code instead of its appearance. Most text editors provide packages to automatically run clang-format every time a specific file was changed or saved. But all this automation can introduce certain kinds of artifacts. Take the following example: pair < int , int > array [] = {{ 1 , 2 }, { 2 , 3 }, { 3 , 4 }, { 4 , 5 }, { 5 , 6 }, { 6 , 7 }, { 7 , 8 }, { 8 , 9 }}; Applying clang-format to this piece of code will result in the following code snippet. pair < int , int > array [] = {{ 1 , 2 }, { 2 , 3 }, { 3 , 4 }, { 4 , 5 }, { 5 , 6 }, { 6 , 7 }, { 7 , 8 }, { 8 , 9 }}; A newline character has been added between the forth and the fifth element. In most cases, this generic insertion of newline characters may be good enough. But let us assume you would like to have a newline character right after the equality sign. Applying clang-format will always result in the code snippet shown above. Hence, we somehow have to instruct clang-format to keep and insert newlines when needed. One way of doing this is to disable formatting on a piece of code by using the comments // clang-format on and // clang-format off . // clang-format off pair < int , int > array [] = {{ 1 , 2 }, { 2 , 3 }, { 3 , 4 }, { 4 , 5 }, { 5 , 6 }, { 6 , 7 }, { 7 , 8 }, { 8 , 9 }}; // clang-format on This method consists of certain drawbacks. First, we do not want to mention clang-format inside our code. Another issue is that by adding these comments, we have completely disabled the automatic formatting. But we only wanted to force clang-format to add one newline character. A much better solution is given by the following idea. We add an empty comment in front of newline characters we would like to keep. pair < int , int > array [] = // {{ 1 , 2 }, { 2 , 3 }, { 3 , 4 }, { 4 , 5 }, { 5 , 6 }, { 6 , 7 }, { 7 , 8 }, { 8 , 9 }}; In this case, clang-format will not remove the newline character and therefore keep the custom formatting. Additionally, clang-format is not mentioned in the code and all other parts will still be formatted automatically. Of course, it is possible to go even further. For example, by inserting newline characters after every second element in the array we get the following. pair < int , int > array [] = { { 1 , 2 }, { 2 , 3 }, // { 3 , 4 }, { 4 , 5 }, // { 5 , 6 }, { 6 , 7 }, // { 7 , 8 }, { 8 , 9 } // }; Special formatting is possible as well. pair < int , int > array [] = { { 1 , 2 }, // { 2 , 3 }, { 3 , 4 }, { 4 , 5 }, { 5 , 6 }, // { 6 , 7 }, { 7 , 8 }, { 8 , 9 } // }; So next time clang-format does not format the code the way you like it, think about the insertion of empty comments to force newline characters.","title":"Forcing Newlines while using clang-format"},{"location":"programming/c%2B%2B/cmake_taming_the_beast/","text":"CMake is more or less the current standard used by nearly all C++ developers to configure, build and install their software. It is one of the major tools we have to use several times a day. Thus, mastering CMake will render your workflow to be much more efficient. However, due to the backwards compatibility and the complex language it seems to be rather difficult to write robust, efficient and modern CMakeLists.txt -files. Finding simple solutions for some problems is nearly impossible. Albeit, the documentation of CMake is complete, it does not help understanding and learning new features. But the following references will give you some nice information about modern CMake and how to use it in a real world project. Since 2018 there is now a real e-book about how to write effective modern CMake code. I am sure you will find a way how to get it. Craig Scott, Professional CMake: A Practical Guide , 2018 There is also a living document about learning modern CMake. An Introduction to Modern CMake And if you really want to see some examples for applying the new features then you should watch the following videos. Daniel Pfeifer, Effective CMake , 2017 Mathieu Ropert, Modern CMake for Modular Design , 2017 Deniz Bahadir, More Modern CMake , 2018 Hope I could show you something new. Have fun with it!","title":"CMake: Taming the Beast"},{"location":"programming/c%2B%2B/hello_world/","text":"The Basics \u00b6 C++ is a compiled language. For a program to run, its source text has to be processed by a compiler, producing object files, which are combined by a linker yielding an executable program. Especially for C and C++ there exists a so called preprocessor, which replaces strings in a source based on defined macros. A C++ program typically consists of many source code files (usually simply called source files). Click on the image to get the PDF. An executable program is created for a specific hardware/system combination; it is not portable, say, from a Mac to a Windows PC. When we talk about portability of C++ programs, we usually mean portability of source code; that is, the source code can be successfully compiled and run on a variety of systems. The ISO C++ standard defines two kinds of entities: - Core Language Features , such as built-in types and loops - Standard-library Components , such as containers and I/O operations C++ is a statically typed language. That is, the type of every entity (e.g., object, value, name, and expression) must be known to the compiler at its point of use. The type of an object determines the set of operations applicable to it. The Minimal C++ Program \u00b6 The minimal C++ program, which does nothing, but is valid, is given by the following source code. Please note, that C++ is a key-sensitive language and therefore makes a difference between capital and non-capital letters. minimal.cpp: int main () {} This code defines the so-called main function of the program. main is one of the keywords of the C++ programming language and cannot be used in another place. The main function defines the unique entry point for a program. A computer then runs the executable code starting at this entry point. The open and closed round Brackets () mean that the main function does not take any input arguments. Later, we will see that there is another possibility. The curly braces {} express grouping in C++ and indicate the start and end of the function body. The function body defines the implementation of a function and therefore contains the code that the function should execute. In the case of the main function the program starts by executing the first command enclosed by curly braces. In front of the function the respective return type is defined. In the case of the main function it has to be the type int . int is an abbreviation for integer and describes some sort of integral number. int is again a keyword of the language and can only be used in the context of a type. The value returned by main is the program's return value to the system. In most cases a non-zero value indicates failure (and a zero value success). If there is no return value this means the program has succeeded. We do not have to explicitly state the program succession but we could do with the following code snippet. int main () { return 0 ; } Here return is another keyword of the C++ programming language which defines the output value of a function AND exits from this function. Therefore if the return directive is executed then every following command will be ignored. Producing Output on the Terminal \u00b6 Typical programs should do something! Therefore we start with one of the most basic steps of printing 'Hello, World!' on the terminal. The following code snippet demonstrates this example. hello.cpp: #include <iostream> int main () { std :: cout << \"Hello, World! \\n \" ; } The command #include <iostream> instructs the C++ preprocessor to include all declarations (not the implementations) of the I/O routines of the C++ standard library found in the file 'iostream'. Only with these declarations the command std::cout << \"Hello, World!\\n\"; makes sense. cout is the standard object for printing information on the console. To use the formatted output, we write the streaming operator << before the argument \"Hello, World!\\n\" . The argument \"Hello, World!\\n\" is a string literal which means that it is a sequence of characters surrounded by double quotes. In C++ the backslash \\ in a string literal is an escape character to make it possible to write special characters, like the newline character \\n or the tab character \\t . At the end of every command there has to be a semicolon ; . std is a so-called namespace which shall be explained in more detail later. You only have to remember that every standard facility is put in the namespace std (an abbreviation for 'standard'). To use any function or class in this namespace we have three main possibilities. - preceding the command by std:: to make the namespace explicit like it was already shown - defining a using namespace std; directive somewhere in the file to make anything available - defining a using std::cout; directive to make only cout available Both examples will be shown for convenience. #include <iostream> using namespace std ; int main () { cout << \"Hello, World! \\n \" ; } #include <iostream> int main () { using std :: cout ; cout << \"Hello, World! \\n \" ; } Writing Comments \u00b6 Using comments, which are ignored by the compiler, in the source code is usually a good way of explaining the way of working of your code to other people and your future self. C++ gives two kinds of comment-styles. The first style is started by using // . This indicates that until the end of the line there is a comment which should be ignored by the compiler. int main () { // we put a one-line comment here } The other style starts with /* and ends with */ . So this style is not ended by any newline- or other special character. int main () { /* Here we can write our comment in more than one line! */ std :: cout /*We can even create a comment inside a statement!*/ << \"Hello, World \\n \" ; } Building the Examples \u00b6 In this folder the minimal C++ program and the program which prints 'Hello, World!' on the terminal, are already given as .cc files. This file extension is one of the many standard extensions like .cpp , .cxx and .c++ . You are free to chose one that suits your taste and needs. For compiling these code examples open a terminal inside this directory and run the following command to build the example code. The GCC compiler for C++ is called by the command g++ . With the option -o <target name> your are able to name the resulting application. The last argument gives GCC the source file to be compiled. g++ -o minimal minimal.cc g++ -o hello hello.cc If there are no errors you should be able to see two executable files 'minimal' and 'hello' inside this directory. Execution \u00b6 The resulting applications can be called by using the following commands. ./minimal ./hello The program minimal is the minimal C++ program. Therefore there shoud be no output. But there should be no error message, either. Example Usage \u00b6 If you build and run the source code the output should look like this: $ g++ -o hello hello_main.cc $ ./hello Hello, World!","title":"Hello, World!"},{"location":"programming/c%2B%2B/hello_world/#the-basics","text":"C++ is a compiled language. For a program to run, its source text has to be processed by a compiler, producing object files, which are combined by a linker yielding an executable program. Especially for C and C++ there exists a so called preprocessor, which replaces strings in a source based on defined macros. A C++ program typically consists of many source code files (usually simply called source files). Click on the image to get the PDF. An executable program is created for a specific hardware/system combination; it is not portable, say, from a Mac to a Windows PC. When we talk about portability of C++ programs, we usually mean portability of source code; that is, the source code can be successfully compiled and run on a variety of systems. The ISO C++ standard defines two kinds of entities: - Core Language Features , such as built-in types and loops - Standard-library Components , such as containers and I/O operations C++ is a statically typed language. That is, the type of every entity (e.g., object, value, name, and expression) must be known to the compiler at its point of use. The type of an object determines the set of operations applicable to it.","title":"The Basics"},{"location":"programming/c%2B%2B/hello_world/#the-minimal-c-program","text":"The minimal C++ program, which does nothing, but is valid, is given by the following source code. Please note, that C++ is a key-sensitive language and therefore makes a difference between capital and non-capital letters. minimal.cpp: int main () {} This code defines the so-called main function of the program. main is one of the keywords of the C++ programming language and cannot be used in another place. The main function defines the unique entry point for a program. A computer then runs the executable code starting at this entry point. The open and closed round Brackets () mean that the main function does not take any input arguments. Later, we will see that there is another possibility. The curly braces {} express grouping in C++ and indicate the start and end of the function body. The function body defines the implementation of a function and therefore contains the code that the function should execute. In the case of the main function the program starts by executing the first command enclosed by curly braces. In front of the function the respective return type is defined. In the case of the main function it has to be the type int . int is an abbreviation for integer and describes some sort of integral number. int is again a keyword of the language and can only be used in the context of a type. The value returned by main is the program's return value to the system. In most cases a non-zero value indicates failure (and a zero value success). If there is no return value this means the program has succeeded. We do not have to explicitly state the program succession but we could do with the following code snippet. int main () { return 0 ; } Here return is another keyword of the C++ programming language which defines the output value of a function AND exits from this function. Therefore if the return directive is executed then every following command will be ignored.","title":"The Minimal C++ Program"},{"location":"programming/c%2B%2B/hello_world/#producing-output-on-the-terminal","text":"Typical programs should do something! Therefore we start with one of the most basic steps of printing 'Hello, World!' on the terminal. The following code snippet demonstrates this example. hello.cpp: #include <iostream> int main () { std :: cout << \"Hello, World! \\n \" ; } The command #include <iostream> instructs the C++ preprocessor to include all declarations (not the implementations) of the I/O routines of the C++ standard library found in the file 'iostream'. Only with these declarations the command std::cout << \"Hello, World!\\n\"; makes sense. cout is the standard object for printing information on the console. To use the formatted output, we write the streaming operator << before the argument \"Hello, World!\\n\" . The argument \"Hello, World!\\n\" is a string literal which means that it is a sequence of characters surrounded by double quotes. In C++ the backslash \\ in a string literal is an escape character to make it possible to write special characters, like the newline character \\n or the tab character \\t . At the end of every command there has to be a semicolon ; . std is a so-called namespace which shall be explained in more detail later. You only have to remember that every standard facility is put in the namespace std (an abbreviation for 'standard'). To use any function or class in this namespace we have three main possibilities. - preceding the command by std:: to make the namespace explicit like it was already shown - defining a using namespace std; directive somewhere in the file to make anything available - defining a using std::cout; directive to make only cout available Both examples will be shown for convenience. #include <iostream> using namespace std ; int main () { cout << \"Hello, World! \\n \" ; } #include <iostream> int main () { using std :: cout ; cout << \"Hello, World! \\n \" ; }","title":"Producing Output on the Terminal"},{"location":"programming/c%2B%2B/hello_world/#writing-comments","text":"Using comments, which are ignored by the compiler, in the source code is usually a good way of explaining the way of working of your code to other people and your future self. C++ gives two kinds of comment-styles. The first style is started by using // . This indicates that until the end of the line there is a comment which should be ignored by the compiler. int main () { // we put a one-line comment here } The other style starts with /* and ends with */ . So this style is not ended by any newline- or other special character. int main () { /* Here we can write our comment in more than one line! */ std :: cout /*We can even create a comment inside a statement!*/ << \"Hello, World \\n \" ; }","title":"Writing Comments"},{"location":"programming/c%2B%2B/hello_world/#building-the-examples","text":"In this folder the minimal C++ program and the program which prints 'Hello, World!' on the terminal, are already given as .cc files. This file extension is one of the many standard extensions like .cpp , .cxx and .c++ . You are free to chose one that suits your taste and needs. For compiling these code examples open a terminal inside this directory and run the following command to build the example code. The GCC compiler for C++ is called by the command g++ . With the option -o <target name> your are able to name the resulting application. The last argument gives GCC the source file to be compiled. g++ -o minimal minimal.cc g++ -o hello hello.cc If there are no errors you should be able to see two executable files 'minimal' and 'hello' inside this directory.","title":"Building the Examples"},{"location":"programming/c%2B%2B/hello_world/#execution","text":"The resulting applications can be called by using the following commands. ./minimal ./hello The program minimal is the minimal C++ program. Therefore there shoud be no output. But there should be no error message, either.","title":"Execution"},{"location":"programming/c%2B%2B/hello_world/#example-usage","text":"If you build and run the source code the output should look like this: $ g++ -o hello hello_main.cc $ ./hello Hello, World!","title":"Example Usage"},{"location":"programming/c%2B%2B/project_start/","text":"Starting with a Really Simple C++ Project \u00b6 Create a folder <project> with the name of your project and initialize git git init <project> Start with .gitignore -whitelisting * !*.cc !*.h !CMakeLists.txt !README.md !.gitignore Create a file README.md and write down most important informations about your project. For directly testing the source code create the file doctest_main.cc #define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN #include <doctest/doctest.h> Create a C++ source file with the name <code>.cc to write the actual code #include <doctest/doctest.h> // STL includes #include <iostream> // custom includes // namespace directives and declarations using namespace std ; // actual code // test cases to test the actual code TEST_CASE ( \"\" ){ // your checks and requirements } Create the file CMakeLists.txt for building the code cmake_minimum_required ( 3.10 ) project ( <project> VERSION 0.1.0 LANGUAGES CXX ) enable_testing () find_package ( doctest REQUIRED ) add_executable ( main_test doctest_main.cc <code>.cc ) target_link_libraries ( main_test PRIVATE doctest::doctest ) add_test ( main_test main_test ) Create a GitHub repository for your project, make the initial commit and push it to the master branch git add . git commit -m \"Initial commit\" git remote add origin git@github.com:<user>/<project>.git git push origin master Initialize the build process mkdir build cd build cmake .. Use test-driven development cycle to write, test and commit new code Write test Make sure building or testing fails Write least simple code for a successful building and testing Make sure building and testing is successful. Commit the changes. Refactor the code for better design. Make sure building and testing is successful. Commit the changes. Building and Testing: cmake --build . ctest --verbose","title":"Starting a simple project in C++"},{"location":"programming/c%2B%2B/project_start/#starting-with-a-really-simple-c-project","text":"Create a folder <project> with the name of your project and initialize git git init <project> Start with .gitignore -whitelisting * !*.cc !*.h !CMakeLists.txt !README.md !.gitignore Create a file README.md and write down most important informations about your project. For directly testing the source code create the file doctest_main.cc #define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN #include <doctest/doctest.h> Create a C++ source file with the name <code>.cc to write the actual code #include <doctest/doctest.h> // STL includes #include <iostream> // custom includes // namespace directives and declarations using namespace std ; // actual code // test cases to test the actual code TEST_CASE ( \"\" ){ // your checks and requirements } Create the file CMakeLists.txt for building the code cmake_minimum_required ( 3.10 ) project ( <project> VERSION 0.1.0 LANGUAGES CXX ) enable_testing () find_package ( doctest REQUIRED ) add_executable ( main_test doctest_main.cc <code>.cc ) target_link_libraries ( main_test PRIVATE doctest::doctest ) add_test ( main_test main_test ) Create a GitHub repository for your project, make the initial commit and push it to the master branch git add . git commit -m \"Initial commit\" git remote add origin git@github.com:<user>/<project>.git git push origin master Initialize the build process mkdir build cd build cmake .. Use test-driven development cycle to write, test and commit new code Write test Make sure building or testing fails Write least simple code for a successful building and testing Make sure building and testing is successful. Commit the changes. Refactor the code for better design. Make sure building and testing is successful. Commit the changes. Building and Testing: cmake --build . ctest --verbose","title":"Starting with a Really Simple C++ Project"},{"location":"programming/c%2B%2B/project_structure/","text":"For a C++ developer when starting a project one of the major concerns is about the project structure. In general, the file hierarchy of a project should fulfill the following properties. - easy to maintain - easy to work with - self-explanatory - scalable - self-consistent - extensible by subprojects, documentation, scripts, external dependencies, examples, etc. - usable for different kinds of projects (eg. header-only libraries and projects for multiple applications and libraries) - compatible with C++ modules However, there are already some common folder structures for a C++ project. A typical one can be found here . Looking at other projects on GitHub, like doctest and Eigen , we can find a more modern approach. Personally, I would like to suggest the Canonical Project Structure developed by Boris Kolpackov which was already submitted to the C++ standard. Currently, it seems to fulfill every single requirement. Especially the application of such a structure to the process of developing a project from scratch does not introduce a major overhead in your workflow. It can be even used for a library realized by more than one project. It scales better to large code bases than prior project structures and is not as error-prone. The intrinsic support for executing integration tests independently of the build process after the installation is unique. Last but not least, putting headers, sources and unit tests inside the same directory structure prevents doubling of subtrees in the file hierarchy and makes the process of maintaining easier. The Canonical Project Structure is a really modern approach to handle the file hierarchy of a project without the typical drawbacks of other schemes. I would suggest to use it.","title":"C++ Project Structures"},{"location":"programming/c%2B%2B/course/00/","text":"0. Preliminaries \u00b6 Before starting with writing C++ code with have to make sure to set up the basic development environment which allows us to write, compile, and run our code. Furthermore, programming has a lot to do with mathematics. So, we should take a look at basics mathematics and its notions. Basic Development Environment \u00b6 The basic toolchain consists of all tools that are needed on a daily basis when programming C++ code. Hence, we should strive for a deep understanding of all those tools. Especially, we should take the time to learn and configure them in a way that will help us to improve our workflow and efficiency when developing applications. Furthermore, after the comprehension of those tools, it would even help us to consider to optimize their interaction processes. Please take a look at the basic toolchain for more information. Operating System and Shell \u00b6 In our experience any Linux distribution seems to be a really good candidate. Most Linux distributions are lightweight, easy to install, fast to boot and shutdown, and free to use. With nearly every distribution coding and installing tools can be done without problems. Upgrading and updating a Linux distribution can be done manually. Choosing a specific Linux distribution is a matter of taste. But we recommend one of the following. Ubuntu/Debian-based (Ubuntu, Debian, Mint) Arch-based (Arch, Manjaro) For Readers using Windows: For a consistent learning experience, every code snippet will refer to one or more clearly defined Linux distributions. It is possible to do everything in Windows as well. But in our experience, Windows operating systems tend to introduce a major overhead to the development process. Hence, we strongly recommend to use a Linux distribution at least inside a virtual machine. Use the following instructions do set it up. Download and install VirtualBox for Windows hosts Download an ISO for Manjaro Gnome (or another Linux distribution of your choice) Initialize a new virtual machine for a 64bit Arch-Linux Run the ISO of Manjaro in the new virtual machine and install it Shutdown the virtual machine and remove the ISO Restart the virtual machine You should now have a working Linux system. From this point on, we will only work inside this virtual machine to develop and run the code. Build Essentials and Version Control \u00b6 Ubuntu/Debian-based Linux $ sudo apt-get update && sudo apt-get install build-essential clang cmake git Arch-based Linux $ sudo pacman -S gcc clang cmake make git Build System \u00b6 The course projects will use the build2 toolchain to build them and manage their dependencies. Please install it by following the installation instructions for UNIX. To be not asked for approval while installing, use the following command instead of the last command given in the instructions. Please, interchange X.Y.Z with the current version of build2. $ sh build2-install-X.Y.Z.sh --yes --sudo false --no-check --trust yes Text Editor \u00b6 To actually write C++ source code, we need a text editor. We recommend to use Sublime Text . The installation instructions for a specific Linux operating system can be found here . Please, choose the appropriate package manager of your operating system and follow the instructions. Mathematical Background \u00b6 References \u00b6 Sublime Text Sublime Text Linux Installation build2 build2 Installation","title":"0. Preliminaries"},{"location":"programming/c%2B%2B/course/00/#0-preliminaries","text":"Before starting with writing C++ code with have to make sure to set up the basic development environment which allows us to write, compile, and run our code. Furthermore, programming has a lot to do with mathematics. So, we should take a look at basics mathematics and its notions.","title":"0. Preliminaries"},{"location":"programming/c%2B%2B/course/00/#basic-development-environment","text":"The basic toolchain consists of all tools that are needed on a daily basis when programming C++ code. Hence, we should strive for a deep understanding of all those tools. Especially, we should take the time to learn and configure them in a way that will help us to improve our workflow and efficiency when developing applications. Furthermore, after the comprehension of those tools, it would even help us to consider to optimize their interaction processes. Please take a look at the basic toolchain for more information.","title":"Basic Development Environment"},{"location":"programming/c%2B%2B/course/00/#operating-system-and-shell","text":"In our experience any Linux distribution seems to be a really good candidate. Most Linux distributions are lightweight, easy to install, fast to boot and shutdown, and free to use. With nearly every distribution coding and installing tools can be done without problems. Upgrading and updating a Linux distribution can be done manually. Choosing a specific Linux distribution is a matter of taste. But we recommend one of the following. Ubuntu/Debian-based (Ubuntu, Debian, Mint) Arch-based (Arch, Manjaro) For Readers using Windows: For a consistent learning experience, every code snippet will refer to one or more clearly defined Linux distributions. It is possible to do everything in Windows as well. But in our experience, Windows operating systems tend to introduce a major overhead to the development process. Hence, we strongly recommend to use a Linux distribution at least inside a virtual machine. Use the following instructions do set it up. Download and install VirtualBox for Windows hosts Download an ISO for Manjaro Gnome (or another Linux distribution of your choice) Initialize a new virtual machine for a 64bit Arch-Linux Run the ISO of Manjaro in the new virtual machine and install it Shutdown the virtual machine and remove the ISO Restart the virtual machine You should now have a working Linux system. From this point on, we will only work inside this virtual machine to develop and run the code.","title":"Operating System and Shell"},{"location":"programming/c%2B%2B/course/00/#build-essentials-and-version-control","text":"Ubuntu/Debian-based Linux $ sudo apt-get update && sudo apt-get install build-essential clang cmake git Arch-based Linux $ sudo pacman -S gcc clang cmake make git","title":"Build Essentials and Version Control"},{"location":"programming/c%2B%2B/course/00/#build-system","text":"The course projects will use the build2 toolchain to build them and manage their dependencies. Please install it by following the installation instructions for UNIX. To be not asked for approval while installing, use the following command instead of the last command given in the instructions. Please, interchange X.Y.Z with the current version of build2. $ sh build2-install-X.Y.Z.sh --yes --sudo false --no-check --trust yes","title":"Build System"},{"location":"programming/c%2B%2B/course/00/#text-editor","text":"To actually write C++ source code, we need a text editor. We recommend to use Sublime Text . The installation instructions for a specific Linux operating system can be found here . Please, choose the appropriate package manager of your operating system and follow the instructions.","title":"Text Editor"},{"location":"programming/c%2B%2B/course/00/#mathematical-background","text":"","title":"Mathematical Background"},{"location":"programming/c%2B%2B/course/00/#references","text":"Sublime Text Sublime Text Linux Installation build2 build2 Installation","title":"References"},{"location":"programming/c%2B%2B/course/01/","text":"1. Hello, World! \u00b6 The first code snippet one typically writes in any programming language is the \"Hello, World!\" program which prints \"Hello, World!\" on the terminal when executed. Such a program is very simple in most programming languages, and is often used to illustrate the basic syntax of a programming language. It is often the first program written by people learning to code. It can also be used as a sanity test to make sure that a computer language is correctly installed, and that the operator understands how to use it. Starting the First Project \u00b6 Open the terminal of your operating system. You should be in your home directory. Test this by using pwd like in the following case. $ pwd /home/lyrahgames Create a folder where to store your course data and change the current directory to it. Check again with pwd . $ mkdir -p projects/cpp-course $ cd projects/cpp-course $ pwd /home/lyrahgames/projects/cpp-course Create a folder for the first project in the course and change into it. $ mkdir 01-hello $ cd 01-hello $ pwd /home/lyrahgames/projects/cpp-course/01-hello Create a file by the following command and open your text editor in the course directory. touch main.cpp subl .. Click on the created file main.cpp in the folder 01-hello and type the following code. #include <iostream> using namespace std ; int main (){ cout << \"Hello, World! \\n \" ; } Make sure you have saved the changes. You can even do this in the terminal by directly outputting the content of the file using the cat command. $ pwd /home/lyrahgames/projects/cpp-course/01-hello $ ls main.cpp $ cat main.cpp #include <iostream> using namespace std; int main(){ cout << \"Hello, World!\\n\"; } We compile the program in the same folder and run the created executable. $ g++ main.cpp $ ./a.out Hello, World! The Minimal C++ Program \u00b6 The minimal C++ program, which does nothing, but is valid, is given by the following source code. Please note, that C++ is a key-sensitive language and therefore makes a difference between capital and non-capital letters. int main () {} This code defines the so-called main function of the program. main is one of the keywords of the C++ programming language and cannot be used in another place. The main function defines the unique entry point for a program. A computer then runs the executable code starting at this entry point. The open and closed round Brackets () mean that the main function does not take any input arguments. Later, we will see that there is another possibility. The curly braces {} express grouping in C++ and indicate the start and end of the function body. The function body defines the implementation of a function and therefore contains the code that the function should execute. In the case of the main function the program starts by executing the first command enclosed by curly braces. In front of the function the respective return type is defined. In the case of the main function it has to be the type int . int is an abbreviation for integer and describes some sort of integral number. int is again a keyword of the language and can only be used in the context of a type. The value returned by main is the program's return value to the system. In most cases a non-zero value indicates failure (and a zero value success). If there is no return value this means the program has succeeded. We do not have to explicitly state the program succession but we could do with the following code snippet. int main () { return 0 ; } Here return is another keyword of the C++ programming language which defines the output value of a function AND exits from this function. Therefore if the return directive is executed then every following command will be ignored. Producing Output on the Terminal \u00b6 Typical programs should do something! Therefore we start with one of the most basic steps of printing 'Hello, World!' on the terminal. The following code snippet demonstrates this example. #include <iostream> int main () { std :: cout << \"Hello, World! \\n \" ; } The command #include <iostream> instructs the C++ preprocessor to include all declarations (not the implementations) of the I/O routines of the C++ standard library found in the file 'iostream'. Only with these declarations the command std::cout << \"Hello, World!\\n\"; makes sense. cout is the standard object for printing information on the console. To use the formatted output, we write the streaming operator << before the argument \"Hello, World!\\n\" . The argument \"Hello, World!\\n\" is a string literal which means that it is a sequence of characters surrounded by double quotes. In C++ the backslash \\ in a string literal is an escape character to make it possible to write special characters, like the newline character \\n or the tab character \\t . At the end of every command there has to be a semicolon ; . std is a so-called namespace which shall be explained in more detail later. You only have to remember that every standard facility is put in the namespace std (an abbreviation for 'standard'). To use any function or class in this namespace we have three main possibilities. - preceding the command by std:: to make the namespace explicit like it was already shown - defining a using namespace std; directive somewhere in the file to make anything available - defining a using std::cout; directive to make only cout available Both examples will be shown for convenience. #include <iostream> using namespace std ; int main () { cout << \"Hello, World! \\n \" ; } #include <iostream> int main () { using std :: cout ; cout << \"Hello, World! \\n \" ; } Why are we doing this? \u00b6 Every program consists of an input, work that has to be done, and output. Without input and output, work that is done is useless. In my experience, handling input and output will take up more than 80 % of your working time. Only with proper input and output concepts, a program becomes usable and testable. As a consequence, we first have to understand the basic input and output facilities in C++. Give Me Your Name and Age \u00b6 Open a terminal or use an already opened terminal. Go into the course folder and start a new project. $ cd ~/projects/cpp-course $ mkdir 02-input $ ls 01-hello 02-input Create a new main.cpp file. $ cd 02-input $ touch main.cpp $ ls main.cpp Open Sublime Text and open the file main.cpp in the folder 02-input . Add the following lines. #include <iostream> #include <string> using namespace std ; int main () { cout << \"Please give me your name: \" ; string name ; string surname ; cin >> name ; cin >> surname ; cout << \"Please give me your age: \" ; int age ; cin >> age ; cout << \"Your name is '\" << name << \" \" << surname << \"'. \\n \" << \"Your current age is \" << age << \" years and at your next birthday you will become \" << age + 1 << \" years. \\n \" ; } We compile the program in the same folder and run the created executable. $ g++ main.cpp $ ./a.out Please give me your name: lyrah games Please give me your age: 123 Your name is 'lyrah games'. Your current age is 123 years and at your next birthday you will become 124 years. Simple Idea of Types and Variables \u00b6 In C++, objects and variables are synonyms. The same holds for types, classes, and structures. Every variable belongs to a unique type. Types are only known to the compiler and vanish after the code was compiled and transformed into an executable. Variables store actual data in memory represented by binary numbers. But the types tell us how to interpret those binary numbers. For example, think of a mathematical expression like the following. \\[ x\\in\\mathbb{R} \\] In this case, \\(x\\) is a variable of the set \\(\\mathbb{R}\\) . We interpret \\(\\mathbb{R}\\) as the type of \\(x\\) . So a type is more or less a set of all objects with certain constraints or requirements.","title":"1. Hello, World!"},{"location":"programming/c%2B%2B/course/01/#1-hello-world","text":"The first code snippet one typically writes in any programming language is the \"Hello, World!\" program which prints \"Hello, World!\" on the terminal when executed. Such a program is very simple in most programming languages, and is often used to illustrate the basic syntax of a programming language. It is often the first program written by people learning to code. It can also be used as a sanity test to make sure that a computer language is correctly installed, and that the operator understands how to use it.","title":"1. Hello, World!"},{"location":"programming/c%2B%2B/course/01/#starting-the-first-project","text":"Open the terminal of your operating system. You should be in your home directory. Test this by using pwd like in the following case. $ pwd /home/lyrahgames Create a folder where to store your course data and change the current directory to it. Check again with pwd . $ mkdir -p projects/cpp-course $ cd projects/cpp-course $ pwd /home/lyrahgames/projects/cpp-course Create a folder for the first project in the course and change into it. $ mkdir 01-hello $ cd 01-hello $ pwd /home/lyrahgames/projects/cpp-course/01-hello Create a file by the following command and open your text editor in the course directory. touch main.cpp subl .. Click on the created file main.cpp in the folder 01-hello and type the following code. #include <iostream> using namespace std ; int main (){ cout << \"Hello, World! \\n \" ; } Make sure you have saved the changes. You can even do this in the terminal by directly outputting the content of the file using the cat command. $ pwd /home/lyrahgames/projects/cpp-course/01-hello $ ls main.cpp $ cat main.cpp #include <iostream> using namespace std; int main(){ cout << \"Hello, World!\\n\"; } We compile the program in the same folder and run the created executable. $ g++ main.cpp $ ./a.out Hello, World!","title":"Starting the First Project"},{"location":"programming/c%2B%2B/course/01/#the-minimal-c-program","text":"The minimal C++ program, which does nothing, but is valid, is given by the following source code. Please note, that C++ is a key-sensitive language and therefore makes a difference between capital and non-capital letters. int main () {} This code defines the so-called main function of the program. main is one of the keywords of the C++ programming language and cannot be used in another place. The main function defines the unique entry point for a program. A computer then runs the executable code starting at this entry point. The open and closed round Brackets () mean that the main function does not take any input arguments. Later, we will see that there is another possibility. The curly braces {} express grouping in C++ and indicate the start and end of the function body. The function body defines the implementation of a function and therefore contains the code that the function should execute. In the case of the main function the program starts by executing the first command enclosed by curly braces. In front of the function the respective return type is defined. In the case of the main function it has to be the type int . int is an abbreviation for integer and describes some sort of integral number. int is again a keyword of the language and can only be used in the context of a type. The value returned by main is the program's return value to the system. In most cases a non-zero value indicates failure (and a zero value success). If there is no return value this means the program has succeeded. We do not have to explicitly state the program succession but we could do with the following code snippet. int main () { return 0 ; } Here return is another keyword of the C++ programming language which defines the output value of a function AND exits from this function. Therefore if the return directive is executed then every following command will be ignored.","title":"The Minimal C++ Program"},{"location":"programming/c%2B%2B/course/01/#producing-output-on-the-terminal","text":"Typical programs should do something! Therefore we start with one of the most basic steps of printing 'Hello, World!' on the terminal. The following code snippet demonstrates this example. #include <iostream> int main () { std :: cout << \"Hello, World! \\n \" ; } The command #include <iostream> instructs the C++ preprocessor to include all declarations (not the implementations) of the I/O routines of the C++ standard library found in the file 'iostream'. Only with these declarations the command std::cout << \"Hello, World!\\n\"; makes sense. cout is the standard object for printing information on the console. To use the formatted output, we write the streaming operator << before the argument \"Hello, World!\\n\" . The argument \"Hello, World!\\n\" is a string literal which means that it is a sequence of characters surrounded by double quotes. In C++ the backslash \\ in a string literal is an escape character to make it possible to write special characters, like the newline character \\n or the tab character \\t . At the end of every command there has to be a semicolon ; . std is a so-called namespace which shall be explained in more detail later. You only have to remember that every standard facility is put in the namespace std (an abbreviation for 'standard'). To use any function or class in this namespace we have three main possibilities. - preceding the command by std:: to make the namespace explicit like it was already shown - defining a using namespace std; directive somewhere in the file to make anything available - defining a using std::cout; directive to make only cout available Both examples will be shown for convenience. #include <iostream> using namespace std ; int main () { cout << \"Hello, World! \\n \" ; } #include <iostream> int main () { using std :: cout ; cout << \"Hello, World! \\n \" ; }","title":"Producing Output on the Terminal"},{"location":"programming/c%2B%2B/course/01/#why-are-we-doing-this","text":"Every program consists of an input, work that has to be done, and output. Without input and output, work that is done is useless. In my experience, handling input and output will take up more than 80 % of your working time. Only with proper input and output concepts, a program becomes usable and testable. As a consequence, we first have to understand the basic input and output facilities in C++.","title":"Why are we doing this?"},{"location":"programming/c%2B%2B/course/01/#give-me-your-name-and-age","text":"Open a terminal or use an already opened terminal. Go into the course folder and start a new project. $ cd ~/projects/cpp-course $ mkdir 02-input $ ls 01-hello 02-input Create a new main.cpp file. $ cd 02-input $ touch main.cpp $ ls main.cpp Open Sublime Text and open the file main.cpp in the folder 02-input . Add the following lines. #include <iostream> #include <string> using namespace std ; int main () { cout << \"Please give me your name: \" ; string name ; string surname ; cin >> name ; cin >> surname ; cout << \"Please give me your age: \" ; int age ; cin >> age ; cout << \"Your name is '\" << name << \" \" << surname << \"'. \\n \" << \"Your current age is \" << age << \" years and at your next birthday you will become \" << age + 1 << \" years. \\n \" ; } We compile the program in the same folder and run the created executable. $ g++ main.cpp $ ./a.out Please give me your name: lyrah games Please give me your age: 123 Your name is 'lyrah games'. Your current age is 123 years and at your next birthday you will become 124 years.","title":"Give Me Your Name and Age"},{"location":"programming/c%2B%2B/course/01/#simple-idea-of-types-and-variables","text":"In C++, objects and variables are synonyms. The same holds for types, classes, and structures. Every variable belongs to a unique type. Types are only known to the compiler and vanish after the code was compiled and transformed into an executable. Variables store actual data in memory represented by binary numbers. But the types tell us how to interpret those binary numbers. For example, think of a mathematical expression like the following. \\[ x\\in\\mathbb{R} \\] In this case, \\(x\\) is a variable of the set \\(\\mathbb{R}\\) . We interpret \\(\\mathbb{R}\\) as the type of \\(x\\) . So a type is more or less a set of all objects with certain constraints or requirements.","title":"Simple Idea of Types and Variables"},{"location":"programming/c%2B%2B/course/02/","text":"2. Building Blocks \u00b6 Writing Comments \u00b6 Using comments, which are ignored by the compiler, in the source code is usually a good way of explaining the way of working of your code to other people and your future self. C++ gives two kinds of comment-styles. The first style is started by using // . This indicates that until the end of the line there is a comment which should be ignored by the compiler. int main () { // we put a one-line comment here } The other style starts with /* and ends with */ . So this style is not ended by any newline- or other special character. int main () { /* Here we can write our comment in more than one line! */ std :: cout /*We can even create a comment inside a statement!*/ << \"Hello, World \\n \" ; } Explanation of the Streaming Operator \u00b6 Before we go into the details of the C++ streaming operator << for cout , let us briefly discuss the mathematical addition \\(+\\) of two real numbers \\(x\\) and \\(y\\) . The addition is a mathematical operation. A mathematical operation is nothing more than a function with a change of notation to make it more useful. The typical notation for the addition is given by the following expression. \\[ x+y \\] This formulation does not directly result from its definition. Looking at the typical definition for operations like \\(+\\) , we get something like the following. \\[ +:\\mathbb{R}\\times\\mathbb{R}\\to\\mathbb{R} \\ ,\\quad (a,b) \\mapsto +(a,b) \\] This would mean that the expression \\(x+y\\) would have to be expressed as below. \\[ +(x,y) \\] For convenience, in mathematics one makes those expressions interchangeable by definition. \\[ +(x,y) = x+y \\] Hence, if we would like to add three real numbers \\(x\\) , \\(y\\) , and \\(z\\) , we could write the following. \\[ x + y + z = (x+y)+z = +(x,y) + z = +(+(x,y),z) \\] In programming, the procedure used for the left-hand side is typically called chaining because we are able to chain all additions by only adding another \\(+\\) and a variable. The change of notation for mathematical operations, like \\(+\\) , \\(\\times\\) , or \\(\\frac{\\cdot}{\\cdot}\\) , makes it easier to express a specific intention. In C++, the concept of mathematical operations does exist as well. The functions of these mathematical operations are called operators and can be implemented by the programmer like any other function. But as before, to use them one has to change to the notation of mathematical operations. The operator << is a mathematical operation which takes a so-called output stream, like cout , as its first argument, and a variable to be printed to the output stream as the second argument. To enable the chaining mechanism as for the \\(+\\) operation, << always returns its first argument. cout << x ; // <=> <<(cout, x) = cout cout << \"x = \" << x ; // <=> <<(<<(cout, \"x = \"), x) = cout // <<(<<(<<(cout, \"x = \"), x), '\\n') = cout <=> cout << \"x = \" << x << '\\n' ; Fibonacci Sequence \u00b6 The Fibonacci sequence is a sequence \\(f:\\mathbb{N}\\to\\mathbb{N}\\) of natural numbers such that for all \\(n\\in\\mathbb{N}\\) the following holds. \\[ f(1)=1 \\ ,\\qquad f(2)=1 \\ ,\\qquad f(n+2) = f(n+1) + f(n) \\] The first few elements of this sequence are shown below. It is used as a typical programming example. \\[ (f(n))_{n\\in\\mathbb{N}} = (1\\,,\\ 1\\,,\\ 2\\,,\\ 3\\,,\\ 5\\,,\\ 8\\,,\\ 13\\,,\\ 21\\,,\\ 34\\,,\\ 55\\,,\\ 89\\,,\\ \\ldots) \\] Our goal is it to implement an algorithm which will generate a certain amount of those numbers and print it to the screen. For this, create a new folder in your course folder and open your text editor. $ pwd /home/lyrahgames/projects/cpp-course $ mkdir 03-fibonacci $ ls 01-hello 02-input 03-fibonacci $ subl . Go into the new folder and create a new main.cpp file. $ cd 03-fibonacci $ pwd /home/lyrahgames/projects/cpp-course/03-fibonacci $ touch main.cpp For Loop \u00b6 If we want to apply the computation rule for the Fibonacci sequence several times to be able to print more than a few values on the screen, we need a loop which is repeating parts of the code we have written. In C++, one typically uses the so-called for loop. for ( /* Initial Statement */ ; /* Loop Condition */ ; /* Iteration Statement */ ){ /* Loop Block */ } Before the for loop starts, the initial statement is executed. The for loop repeats the contents of its loop block as long as its loop condition is true. At the end of each loop block, it executes the iteration statement. A typical example is given below. for ( int i = 0 ; i < 10 ; ++ i ){ cout << i << '\\n' ; } Here, the initial statement is given by int i = 0 . It defines a local variable i of type int which is only applicable in the block of the for loop, and initializes it with 0 . The loop condition is given by i < 10 . So as long as the variable i is smaller than 10 the loop block will be repeated. The iteration statement is given by ++ i . After every loop block it makes sure to increment i by 1 . In the loop block, we can use the locally defined variable i to print it for example. Applying the for loop to the Fibonacci problem, we get something like the following. #include <iostream> using namespace std ; int main (){ int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < 10 ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } We have defined two starting values f_1 and f_2 as integers. Afterwards, we directly start with the loop and print the first argument on the screen. The actual computation of the Fibonacci sequence happens after the output. int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; In the locally defined integer variable f_tmp , we store newly computed next Fibonacci element. At this point, we do no longer need the value of f_1 . Hence, we will store the value of f_2 in f_1 to be able to store f_tmp in f_2 . By computing the element \\(f(n+2)\\) , we will therefore assume that the old value of \\(f(n+1)\\) is stored in f_2 and the value of \\(f(n)\\) is stored in f_1 . For the next iteration, \\(f(n+1)\\) has to become \\(f(n)\\) , \\(f(n+2)\\) has to become \\(f(n+1)\\) , and \\(f(n)\\) is no longer needed. Compilation with Custom Output Name \u00b6 For compiling the code, this time, we will use a so-called flag to directly name the output executable. For g++ , this can be done by writing -o and afterwards adding the name of your executable. g++ -o fibonacci main.cpp List the content of your folder and run your code. $ pwd /home/lyrahgames/projects/cpp-course/03-fibonacci $ ls main.cpp $ g++ -o fibonacci main.cpp $ ls fibonacci* main.cpp $ ./fibonacci f(1) = 1 f(2) = 1 f(3) = 2 f(4) = 3 f(5) = 5 f(6) = 8 f(7) = 13 f(8) = 21 f(9) = 34 f(10) = 55 Starting with Functions \u00b6 void print_fibonacci ( int n ){...} #include <iostream> using namespace std ; void print_fibonacci ( int n ) { int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } int main () { print_fibonacci ( 10 ); } // Declaration: Used for the interface. void print_fibonacci ( int n ); // Implementation: Used for the actual computation. void print_fibonacci ( int n ){...} #include <iostream> using namespace std ; void print_fibonacci ( int n ); int main () { print_fibonacci ( 10 ); } void print_fibonacci ( int n ) { int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } Exercises \u00b6 Prompt the user of the program to input a number. Use this number as count of elements of the Fibonacci sequence to be printed on the terminal. Add a second and a third argument to print_fibonacci function to parameterize the starting values of f_1 and f_2 . Test your implementation by calling the function in main several times with different argument values.","title":"2. Building Blocks"},{"location":"programming/c%2B%2B/course/02/#2-building-blocks","text":"","title":"2. Building Blocks"},{"location":"programming/c%2B%2B/course/02/#writing-comments","text":"Using comments, which are ignored by the compiler, in the source code is usually a good way of explaining the way of working of your code to other people and your future self. C++ gives two kinds of comment-styles. The first style is started by using // . This indicates that until the end of the line there is a comment which should be ignored by the compiler. int main () { // we put a one-line comment here } The other style starts with /* and ends with */ . So this style is not ended by any newline- or other special character. int main () { /* Here we can write our comment in more than one line! */ std :: cout /*We can even create a comment inside a statement!*/ << \"Hello, World \\n \" ; }","title":"Writing Comments"},{"location":"programming/c%2B%2B/course/02/#explanation-of-the-streaming-operator","text":"Before we go into the details of the C++ streaming operator << for cout , let us briefly discuss the mathematical addition \\(+\\) of two real numbers \\(x\\) and \\(y\\) . The addition is a mathematical operation. A mathematical operation is nothing more than a function with a change of notation to make it more useful. The typical notation for the addition is given by the following expression. \\[ x+y \\] This formulation does not directly result from its definition. Looking at the typical definition for operations like \\(+\\) , we get something like the following. \\[ +:\\mathbb{R}\\times\\mathbb{R}\\to\\mathbb{R} \\ ,\\quad (a,b) \\mapsto +(a,b) \\] This would mean that the expression \\(x+y\\) would have to be expressed as below. \\[ +(x,y) \\] For convenience, in mathematics one makes those expressions interchangeable by definition. \\[ +(x,y) = x+y \\] Hence, if we would like to add three real numbers \\(x\\) , \\(y\\) , and \\(z\\) , we could write the following. \\[ x + y + z = (x+y)+z = +(x,y) + z = +(+(x,y),z) \\] In programming, the procedure used for the left-hand side is typically called chaining because we are able to chain all additions by only adding another \\(+\\) and a variable. The change of notation for mathematical operations, like \\(+\\) , \\(\\times\\) , or \\(\\frac{\\cdot}{\\cdot}\\) , makes it easier to express a specific intention. In C++, the concept of mathematical operations does exist as well. The functions of these mathematical operations are called operators and can be implemented by the programmer like any other function. But as before, to use them one has to change to the notation of mathematical operations. The operator << is a mathematical operation which takes a so-called output stream, like cout , as its first argument, and a variable to be printed to the output stream as the second argument. To enable the chaining mechanism as for the \\(+\\) operation, << always returns its first argument. cout << x ; // <=> <<(cout, x) = cout cout << \"x = \" << x ; // <=> <<(<<(cout, \"x = \"), x) = cout // <<(<<(<<(cout, \"x = \"), x), '\\n') = cout <=> cout << \"x = \" << x << '\\n' ;","title":"Explanation of the Streaming Operator"},{"location":"programming/c%2B%2B/course/02/#fibonacci-sequence","text":"The Fibonacci sequence is a sequence \\(f:\\mathbb{N}\\to\\mathbb{N}\\) of natural numbers such that for all \\(n\\in\\mathbb{N}\\) the following holds. \\[ f(1)=1 \\ ,\\qquad f(2)=1 \\ ,\\qquad f(n+2) = f(n+1) + f(n) \\] The first few elements of this sequence are shown below. It is used as a typical programming example. \\[ (f(n))_{n\\in\\mathbb{N}} = (1\\,,\\ 1\\,,\\ 2\\,,\\ 3\\,,\\ 5\\,,\\ 8\\,,\\ 13\\,,\\ 21\\,,\\ 34\\,,\\ 55\\,,\\ 89\\,,\\ \\ldots) \\] Our goal is it to implement an algorithm which will generate a certain amount of those numbers and print it to the screen. For this, create a new folder in your course folder and open your text editor. $ pwd /home/lyrahgames/projects/cpp-course $ mkdir 03-fibonacci $ ls 01-hello 02-input 03-fibonacci $ subl . Go into the new folder and create a new main.cpp file. $ cd 03-fibonacci $ pwd /home/lyrahgames/projects/cpp-course/03-fibonacci $ touch main.cpp","title":"Fibonacci Sequence"},{"location":"programming/c%2B%2B/course/02/#for-loop","text":"If we want to apply the computation rule for the Fibonacci sequence several times to be able to print more than a few values on the screen, we need a loop which is repeating parts of the code we have written. In C++, one typically uses the so-called for loop. for ( /* Initial Statement */ ; /* Loop Condition */ ; /* Iteration Statement */ ){ /* Loop Block */ } Before the for loop starts, the initial statement is executed. The for loop repeats the contents of its loop block as long as its loop condition is true. At the end of each loop block, it executes the iteration statement. A typical example is given below. for ( int i = 0 ; i < 10 ; ++ i ){ cout << i << '\\n' ; } Here, the initial statement is given by int i = 0 . It defines a local variable i of type int which is only applicable in the block of the for loop, and initializes it with 0 . The loop condition is given by i < 10 . So as long as the variable i is smaller than 10 the loop block will be repeated. The iteration statement is given by ++ i . After every loop block it makes sure to increment i by 1 . In the loop block, we can use the locally defined variable i to print it for example. Applying the for loop to the Fibonacci problem, we get something like the following. #include <iostream> using namespace std ; int main (){ int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < 10 ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } We have defined two starting values f_1 and f_2 as integers. Afterwards, we directly start with the loop and print the first argument on the screen. The actual computation of the Fibonacci sequence happens after the output. int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; In the locally defined integer variable f_tmp , we store newly computed next Fibonacci element. At this point, we do no longer need the value of f_1 . Hence, we will store the value of f_2 in f_1 to be able to store f_tmp in f_2 . By computing the element \\(f(n+2)\\) , we will therefore assume that the old value of \\(f(n+1)\\) is stored in f_2 and the value of \\(f(n)\\) is stored in f_1 . For the next iteration, \\(f(n+1)\\) has to become \\(f(n)\\) , \\(f(n+2)\\) has to become \\(f(n+1)\\) , and \\(f(n)\\) is no longer needed.","title":"For Loop"},{"location":"programming/c%2B%2B/course/02/#compilation-with-custom-output-name","text":"For compiling the code, this time, we will use a so-called flag to directly name the output executable. For g++ , this can be done by writing -o and afterwards adding the name of your executable. g++ -o fibonacci main.cpp List the content of your folder and run your code. $ pwd /home/lyrahgames/projects/cpp-course/03-fibonacci $ ls main.cpp $ g++ -o fibonacci main.cpp $ ls fibonacci* main.cpp $ ./fibonacci f(1) = 1 f(2) = 1 f(3) = 2 f(4) = 3 f(5) = 5 f(6) = 8 f(7) = 13 f(8) = 21 f(9) = 34 f(10) = 55","title":"Compilation with Custom Output Name"},{"location":"programming/c%2B%2B/course/02/#starting-with-functions","text":"void print_fibonacci ( int n ){...} #include <iostream> using namespace std ; void print_fibonacci ( int n ) { int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } int main () { print_fibonacci ( 10 ); } // Declaration: Used for the interface. void print_fibonacci ( int n ); // Implementation: Used for the actual computation. void print_fibonacci ( int n ){...} #include <iostream> using namespace std ; void print_fibonacci ( int n ); int main () { print_fibonacci ( 10 ); } void print_fibonacci ( int n ) { int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } }","title":"Starting with Functions"},{"location":"programming/c%2B%2B/course/02/#exercises","text":"Prompt the user of the program to input a number. Use this number as count of elements of the Fibonacci sequence to be printed on the terminal. Add a second and a third argument to print_fibonacci function to parameterize the starting values of f_1 and f_2 . Test your implementation by calling the function in main several times with different argument values.","title":"Exercises"},{"location":"programming/c%2B%2B/course/03/","text":"3. Editor Configuration \u00b6 Solving the Exercises \u00b6 First, we will solve the exercises from the last lecture. Prompt the user of the program to input a number. Use this number as count of elements of the Fibonacci sequence to be printed on the terminal. #include <iostream> using namespace std ; void print_fibonacci ( int n ); int main () { cout << \"Give me the number of elements: \" ; int n ; cin >> n ; print_fibonacci ( n ); } void print_fibonacci ( int n , int f_1 , int f_2 ) { int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } Add a second and a third argument to print_fibonacci function to parameterize the starting values of f_1 and f_2 . Test your implementation by calling the function in main several times with different argument values. #include <iostream> using namespace std ; void print_fibonacci ( int n , int f_1 , int f_2 ); int main () { cout << \"Give me the number of elements: \" ; int n ; cin >> n ; print_fibonacci ( n , 1 , 1 ); print_fibonacci ( n , 3 , 2 ); print_fibonacci ( n , - 1 , 1 ); } void print_fibonacci ( int n , int f_1 , int f_2 ) { // int f_1 = 1; // int f_2 = 1; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } Comma versus Semicolon \u00b6 In C++, we have to use commas and semicolon. Typically, a semicolon is ending an expression and therefore making it a statement. Most of the time, we will use semicolon to mark those statements which are actually executing instructions on the processor. This means, for now, that we will find those semicolon mostly inside of scope blocks marked by the curly braces { and } . Commas on the other hand can be used to group several expressions into one bigger statement. This is a technique that will not be used at the beginning. So as a consequence for us, commas will be used when declaring, defining, or using functions inside their list of arguments to separate single elements. void print_fibonacci ( int n , int f_1 , int f_2 ); print_fibonacci ( n , 1 , 1 ); void print_fibonacci ( int n , int f_1 , int f_2 ){...} The for loop is not a function. Hence, we use semicolon to separate the expressions in the parentheses (...) . for ( int i = 0 ; i < n ; ++ i ) {...} Text Editor Configuration and Clang Format \u00b6 Most of our work will be done inside the text editor. For a productive workflow, it is therefore necessary to make use of features provided by the text editor, such as automatic file saving, fast file generation, shortcuts, fast file switching, project organization and handling, and automatic formatting. Learning and internalizing such features takes up a huge amount of time. Thus, we will strive for learning them step by step. For those who use Sublime Text as their main text editor, please take a look at our recommended Sublime Text configuration and carefully read the instructions. Furthermore, make sure to install Clang Format by using your system's package manager. This will enable the automatic formatting of your C++ code every time it is saved. Arch-based Linux Distributions: sudo pacman -S clang Debian-based Linux Distributions: sudo apt update && sudo apt install clang-format Sublime Text Useful Shortcuts \u00b6 If the following shortcuts do not suit your needs, do not hesitate to change them in the Sublime Text settings. ctrl + alt + n : Open the small command palette at the bottom of Sublime Text and type in the name of the file relative to project root that should be created. ctrl + s : Manually save the currently opened file and automatically use Clang Format on it. Focus Lost: Automatically save the file for which we have lost the focus and automatically apply Clang Format. alt + n : Open or close the command palette of Sublime Text. alt + f : Open or close the file palette in Sublime Text to switch between every possible in the currently opened project. ctrl + b : Run the integrated build system of Sublime Text to compile and run single C++ files. You do not have to use it. ctrl + 7 : In C++ files, change the selected lines to comments or back to actual code.","title":"3. Editor Configuration"},{"location":"programming/c%2B%2B/course/03/#3-editor-configuration","text":"","title":"3. Editor Configuration"},{"location":"programming/c%2B%2B/course/03/#solving-the-exercises","text":"First, we will solve the exercises from the last lecture. Prompt the user of the program to input a number. Use this number as count of elements of the Fibonacci sequence to be printed on the terminal. #include <iostream> using namespace std ; void print_fibonacci ( int n ); int main () { cout << \"Give me the number of elements: \" ; int n ; cin >> n ; print_fibonacci ( n ); } void print_fibonacci ( int n , int f_1 , int f_2 ) { int f_1 = 1 ; int f_2 = 1 ; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } } Add a second and a third argument to print_fibonacci function to parameterize the starting values of f_1 and f_2 . Test your implementation by calling the function in main several times with different argument values. #include <iostream> using namespace std ; void print_fibonacci ( int n , int f_1 , int f_2 ); int main () { cout << \"Give me the number of elements: \" ; int n ; cin >> n ; print_fibonacci ( n , 1 , 1 ); print_fibonacci ( n , 3 , 2 ); print_fibonacci ( n , - 1 , 1 ); } void print_fibonacci ( int n , int f_1 , int f_2 ) { // int f_1 = 1; // int f_2 = 1; for ( int i = 0 ; i < n ; ++ i ) { cout << \"f(\" << i + 1 << \") = \" << f_1 << \" \\n \" ; int f_tmp = f_1 + f_2 ; f_1 = f_2 ; f_2 = f_tmp ; } }","title":"Solving the Exercises"},{"location":"programming/c%2B%2B/course/03/#comma-versus-semicolon","text":"In C++, we have to use commas and semicolon. Typically, a semicolon is ending an expression and therefore making it a statement. Most of the time, we will use semicolon to mark those statements which are actually executing instructions on the processor. This means, for now, that we will find those semicolon mostly inside of scope blocks marked by the curly braces { and } . Commas on the other hand can be used to group several expressions into one bigger statement. This is a technique that will not be used at the beginning. So as a consequence for us, commas will be used when declaring, defining, or using functions inside their list of arguments to separate single elements. void print_fibonacci ( int n , int f_1 , int f_2 ); print_fibonacci ( n , 1 , 1 ); void print_fibonacci ( int n , int f_1 , int f_2 ){...} The for loop is not a function. Hence, we use semicolon to separate the expressions in the parentheses (...) . for ( int i = 0 ; i < n ; ++ i ) {...}","title":"Comma versus Semicolon"},{"location":"programming/c%2B%2B/course/03/#text-editor-configuration-and-clang-format","text":"Most of our work will be done inside the text editor. For a productive workflow, it is therefore necessary to make use of features provided by the text editor, such as automatic file saving, fast file generation, shortcuts, fast file switching, project organization and handling, and automatic formatting. Learning and internalizing such features takes up a huge amount of time. Thus, we will strive for learning them step by step. For those who use Sublime Text as their main text editor, please take a look at our recommended Sublime Text configuration and carefully read the instructions. Furthermore, make sure to install Clang Format by using your system's package manager. This will enable the automatic formatting of your C++ code every time it is saved. Arch-based Linux Distributions: sudo pacman -S clang Debian-based Linux Distributions: sudo apt update && sudo apt install clang-format","title":"Text Editor Configuration and Clang Format"},{"location":"programming/c%2B%2B/course/03/#sublime-text-useful-shortcuts","text":"If the following shortcuts do not suit your needs, do not hesitate to change them in the Sublime Text settings. ctrl + alt + n : Open the small command palette at the bottom of Sublime Text and type in the name of the file relative to project root that should be created. ctrl + s : Manually save the currently opened file and automatically use Clang Format on it. Focus Lost: Automatically save the file for which we have lost the focus and automatically apply Clang Format. alt + n : Open or close the command palette of Sublime Text. alt + f : Open or close the file palette in Sublime Text to switch between every possible in the currently opened project. ctrl + b : Run the integrated build system of Sublime Text to compile and run single C++ files. You do not have to use it. ctrl + 7 : In C++ files, change the selected lines to comments or back to actual code.","title":"Sublime Text Useful Shortcuts"},{"location":"programming/c%2B%2B/course/04/","text":"4. Multiple Files \u00b6 Gauss Sum and its Implementation \u00b6 We have already talked a little about functions in C++ and the separation of their declaration and definition. The declaration of a function describes only the interface and how the function can be used inside other code. The definition of a function describes its implementation, what the function does and how it does it. Let us take a look at the following mathematical definition of a function \\(g\\) . In mathematics, we have to follow the same rules. The first part in the following definition describes the interface of the function. It tells us that the function takes a natural number \\(n\\) as its argument and again outputs possibly another natural number \\(g(n)\\) . We can 'call' the function \\(g\\) without knowing what the output will be. We call this the Black Box Principle . \\[ g:\\mathbb{N}\\to\\mathbb{N} \\ ,\\qquad g(n) = \\sum_{i=1}^n i = 1 + 2 + \\ldots + n \\] The second part of the mathematical definition gives the details about the implementation of the function. It describes what the function is actually returning. In this case, \\(g(n)\\) is the sum of all natural numbers that are smaller or equal to \\(n\\) . This procedure is called the Gauss sum . If we now want to implement this function in C++, we would first start with the declaration. The function \\(g\\) gets and returns one natural number. In C++, natural numbers are mostly represented by the type int . So the direct translation to a C++ declaration would look like the following. int g ( int n ); Now, we are able to implement the function according to its definition. The Gauss sum as given as above can directly be translated into a for loop. We only have to make sure to create a variable result which is storing the result of the computation so that the function can return the respective value at the end of the function. int g ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } In C++, the definition of a function must include its interface because otherwise the function could not be properly implemented as the definition would not know about the types of input and output variables. As a consequence, the definition is self-consistent and C++ does not need the declaration of the function. So why are we even dealing with declarations? As we have seen in the second lecture, a call to a function that is only given by a definition has to appear after the respective definition. For complex projects, this is not always possible. The definition of a function must appear exactly once in the project. This is called the One Definition Rule (ODR). Declarations are allowed to appear multiple times as long as they are providing the same interface. So we can put the declaration of a function everywhere to make sure the code following is able to call the according function. Furthermore, we are able to change the implementation of a function without the user of this function recognizing it. For larger projects with multiple programmers, this opens up the possibility to work in parallel on different parts of the code. We will talk about this process in more detail in the next lessons. Looking back at the Fibonacci Project \u00b6 First, let us start by creating a new project. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci $ mkdir 04-files $ cd 04-files $ pwd /home/lyrahgames/projects/cpp-course/04-files Make sure to open your text editor in the folder where all of your course files reside and create a new file main.cpp in the directory 04-files . If you are using Sublime Text with the given configuration, type ctrl+alt+n to open a small window at the bottom that should ask you for the path of the new file. Type 04-file/main.cpp and press enter. Our goal is it to understand the usage of multiple source code files in a C++ project. Therefore we adapt the project 02-fibonacci and interchange the function print_fibonacci with our implementation of the function \\(g\\) . For convenience, we will rename it to gauss_sum . #include <iostream> using namespace std ; int gauss_sum ( int n ); int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) << '\\n' ; } } int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } This code uses the same structure as the project 02-fibonacci . First, we are declaring the function gauss_sum . Then we start the program and read a number from the command line given by the user. Afterwards, we run a loop for all natural numbers that are smaller or equal to the given number and output the value for the Gauss sum of the specific iteration. At the end of the source file, we are then defining the function gauss_sum . Make sure that the code is compiling. The output should look like the following. $ pwd /home/lyrahgames/projects/cpp-course/04-files $ ls main.cpp $ g++ -o gauss main.cpp $ ls gauss main.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 Gauss(2) = 3 Gauss(3) = 6 Gauss(4) = 10 Gauss(5) = 15 Gauss(6) = 21 Gauss(7) = 28 Gauss(8) = 36 Gauss(9) = 45 Gauss(10) = 55 Using Multiple Files \u00b6 Add another file to same source directory. We will call it gauss_sum.cpp and we will put the definition of the function gauss_sum into this file. // gauss_sum.cpp int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } Your file main.cpp should now look like this. // main.cpp #include <iostream> using namespace std ; int gauss_sum ( int n ); int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) << '\\n' ; } } If we now run the typical commands for compilation, the following will happen. $ pwd /home/lyrahgames/projects/cpp-course/04-files $ ls gauss_sum.cpp main.cpp $ g++ -o gauss main.cpp /usr/bin/ld: /tmp/cceWitU4.o: in function `main': main.cpp:(.text+0x79): undefined reference to `gauss_sum(int)' collect2: error: ld returned 1 exit status We do get a cryptic error message. The error is caused by the linker and is therefore called a linker error. It basically tells us that the function gauss_sum is declared but no definition exists. The C++ compiler needs to get the other source file gauss_sum.cpp where the definition of the function lies as second input argument so it will be able to find the definition. This behavior is a consequence of the procedure the C++ compiler uses to generate a binary executable file. Again, we will talk about this detail in the next lessons. $ g++ -o gauss main.cpp gauss_sum.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 Gauss(2) = 3 Gauss(3) = 6 Gauss(4) = 10 Gauss(5) = 15 Gauss(6) = 21 Gauss(7) = 28 Gauss(8) = 36 Gauss(9) = 45 Gauss(10) = 55 Adding a Second Function \u00b6 The Gauss sum cannot only be calculated by iterating over natural numbers and computing their sum. Gauss has proven the following alternative formula for evaluating a Gauss sum. \\[ g(n) = \\sum_{i=1}^n i = \\frac{n(n+1)}{2} \\] We will not show the correctness of the formula. But we will now add a second function implementing this alternative formula and we will test if the equation gives us really the same output for a few numbers. The implementation of this new function gauss_sum_eq is straightforward and uses the same principles as the implementation of the function gauss_sum . // gauss_sum.cpp int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } int gauss_sum_eq ( int n ) { return n * ( n + 1 ) / 2 ; } In the file main.cpp , we have to add the declaration to make sure the function is available for calling inside the function main . There we will add the call to gauss_sum_eq to the output procedure. // main.cpp #include <iostream> using namespace std ; int gauss_sum ( int n ); int gauss_sum_eq ( int n ); int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) // << \" = \" << gauss_sum_eq ( i ) << '\\n' ; } } The following listing shows an example output of the program where we see that the output is indeed the same for our tested numbers. $ g++ -o gauss main.cpp gauss_sum.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 = 1 Gauss(2) = 3 = 3 Gauss(3) = 6 = 6 Gauss(4) = 10 = 10 Gauss(5) = 15 = 15 Gauss(6) = 21 = 21 Gauss(7) = 28 = 28 Gauss(8) = 36 = 36 Gauss(9) = 45 = 45 Gauss(10) = 55 = 55 Removing the Need of Manual Declaration \u00b6 Now it becomes clear that every time we want to call one of the functions in gauss_sum.cpp in a different source file, we have to state the according declarations of these functions at the beginning of this source file. If we are using only one or two functions, this may not be a big problem. But it becomes a cumbersome process for many functions and more complicated projects. Hence, we would like to have a file containing all those declarations which can easily be included into the source file where we want to call the functions. This file serves not as a typical C++ source file. Instead, its content should be read and inserted into the file it is called from. We are calling such files header files and typically set their extension to hpp . So create another file gauss_sum.hpp and put the declarations there. // gauss_sum.hpp int gauss_sum ( int n ); int gauss_sum_eq ( int n ); Now, your main.cpp file has to include the header file by the typical #include directive which we have already used uncountable times to get access to standard input and output routines. // main.cpp #include <iostream> #include \"gauss_sum.hpp\" using namespace std ; int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) // << \" = \" << gauss_sum_eq ( i ) << '\\n' ; } } Please note, header files are in general not allowed to be compiled. Hence, the header file must not be given as an extra argument to the compiler. It is only used for text replacement. After its content was inserted into the source file by processing the #include directive, the manipulated source file will be compiled with a copy of the content of the header file. $ g++ -o gauss main.cpp gauss_sum.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 = 1 Gauss(2) = 3 = 3 Gauss(3) = 6 = 6 Gauss(4) = 10 = 10 Gauss(5) = 15 = 15 Gauss(6) = 21 = 21 Gauss(7) = 28 = 28 Gauss(8) = 36 = 36 Gauss(9) = 45 = 45 Gauss(10) = 55 = 55 Exercises \u00b6 In the #include directive, what is the difference between <...> and \"...\" ? Why are we not typing #include <iostream.hpp> ? Add a third function which outputs the factorial \\(n!\\) of a given natural number \\(n\\) to the files gauss_sum.hpp and gauss_sum.cpp . Call this function in main.cpp .","title":"4. Multiple Files"},{"location":"programming/c%2B%2B/course/04/#4-multiple-files","text":"","title":"4. Multiple Files"},{"location":"programming/c%2B%2B/course/04/#gauss-sum-and-its-implementation","text":"We have already talked a little about functions in C++ and the separation of their declaration and definition. The declaration of a function describes only the interface and how the function can be used inside other code. The definition of a function describes its implementation, what the function does and how it does it. Let us take a look at the following mathematical definition of a function \\(g\\) . In mathematics, we have to follow the same rules. The first part in the following definition describes the interface of the function. It tells us that the function takes a natural number \\(n\\) as its argument and again outputs possibly another natural number \\(g(n)\\) . We can 'call' the function \\(g\\) without knowing what the output will be. We call this the Black Box Principle . \\[ g:\\mathbb{N}\\to\\mathbb{N} \\ ,\\qquad g(n) = \\sum_{i=1}^n i = 1 + 2 + \\ldots + n \\] The second part of the mathematical definition gives the details about the implementation of the function. It describes what the function is actually returning. In this case, \\(g(n)\\) is the sum of all natural numbers that are smaller or equal to \\(n\\) . This procedure is called the Gauss sum . If we now want to implement this function in C++, we would first start with the declaration. The function \\(g\\) gets and returns one natural number. In C++, natural numbers are mostly represented by the type int . So the direct translation to a C++ declaration would look like the following. int g ( int n ); Now, we are able to implement the function according to its definition. The Gauss sum as given as above can directly be translated into a for loop. We only have to make sure to create a variable result which is storing the result of the computation so that the function can return the respective value at the end of the function. int g ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } In C++, the definition of a function must include its interface because otherwise the function could not be properly implemented as the definition would not know about the types of input and output variables. As a consequence, the definition is self-consistent and C++ does not need the declaration of the function. So why are we even dealing with declarations? As we have seen in the second lecture, a call to a function that is only given by a definition has to appear after the respective definition. For complex projects, this is not always possible. The definition of a function must appear exactly once in the project. This is called the One Definition Rule (ODR). Declarations are allowed to appear multiple times as long as they are providing the same interface. So we can put the declaration of a function everywhere to make sure the code following is able to call the according function. Furthermore, we are able to change the implementation of a function without the user of this function recognizing it. For larger projects with multiple programmers, this opens up the possibility to work in parallel on different parts of the code. We will talk about this process in more detail in the next lessons.","title":"Gauss Sum and its Implementation"},{"location":"programming/c%2B%2B/course/04/#looking-back-at-the-fibonacci-project","text":"First, let us start by creating a new project. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci $ mkdir 04-files $ cd 04-files $ pwd /home/lyrahgames/projects/cpp-course/04-files Make sure to open your text editor in the folder where all of your course files reside and create a new file main.cpp in the directory 04-files . If you are using Sublime Text with the given configuration, type ctrl+alt+n to open a small window at the bottom that should ask you for the path of the new file. Type 04-file/main.cpp and press enter. Our goal is it to understand the usage of multiple source code files in a C++ project. Therefore we adapt the project 02-fibonacci and interchange the function print_fibonacci with our implementation of the function \\(g\\) . For convenience, we will rename it to gauss_sum . #include <iostream> using namespace std ; int gauss_sum ( int n ); int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) << '\\n' ; } } int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } This code uses the same structure as the project 02-fibonacci . First, we are declaring the function gauss_sum . Then we start the program and read a number from the command line given by the user. Afterwards, we run a loop for all natural numbers that are smaller or equal to the given number and output the value for the Gauss sum of the specific iteration. At the end of the source file, we are then defining the function gauss_sum . Make sure that the code is compiling. The output should look like the following. $ pwd /home/lyrahgames/projects/cpp-course/04-files $ ls main.cpp $ g++ -o gauss main.cpp $ ls gauss main.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 Gauss(2) = 3 Gauss(3) = 6 Gauss(4) = 10 Gauss(5) = 15 Gauss(6) = 21 Gauss(7) = 28 Gauss(8) = 36 Gauss(9) = 45 Gauss(10) = 55","title":"Looking back at the Fibonacci Project"},{"location":"programming/c%2B%2B/course/04/#using-multiple-files","text":"Add another file to same source directory. We will call it gauss_sum.cpp and we will put the definition of the function gauss_sum into this file. // gauss_sum.cpp int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } Your file main.cpp should now look like this. // main.cpp #include <iostream> using namespace std ; int gauss_sum ( int n ); int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) << '\\n' ; } } If we now run the typical commands for compilation, the following will happen. $ pwd /home/lyrahgames/projects/cpp-course/04-files $ ls gauss_sum.cpp main.cpp $ g++ -o gauss main.cpp /usr/bin/ld: /tmp/cceWitU4.o: in function `main': main.cpp:(.text+0x79): undefined reference to `gauss_sum(int)' collect2: error: ld returned 1 exit status We do get a cryptic error message. The error is caused by the linker and is therefore called a linker error. It basically tells us that the function gauss_sum is declared but no definition exists. The C++ compiler needs to get the other source file gauss_sum.cpp where the definition of the function lies as second input argument so it will be able to find the definition. This behavior is a consequence of the procedure the C++ compiler uses to generate a binary executable file. Again, we will talk about this detail in the next lessons. $ g++ -o gauss main.cpp gauss_sum.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 Gauss(2) = 3 Gauss(3) = 6 Gauss(4) = 10 Gauss(5) = 15 Gauss(6) = 21 Gauss(7) = 28 Gauss(8) = 36 Gauss(9) = 45 Gauss(10) = 55","title":"Using Multiple Files"},{"location":"programming/c%2B%2B/course/04/#adding-a-second-function","text":"The Gauss sum cannot only be calculated by iterating over natural numbers and computing their sum. Gauss has proven the following alternative formula for evaluating a Gauss sum. \\[ g(n) = \\sum_{i=1}^n i = \\frac{n(n+1)}{2} \\] We will not show the correctness of the formula. But we will now add a second function implementing this alternative formula and we will test if the equation gives us really the same output for a few numbers. The implementation of this new function gauss_sum_eq is straightforward and uses the same principles as the implementation of the function gauss_sum . // gauss_sum.cpp int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } int gauss_sum_eq ( int n ) { return n * ( n + 1 ) / 2 ; } In the file main.cpp , we have to add the declaration to make sure the function is available for calling inside the function main . There we will add the call to gauss_sum_eq to the output procedure. // main.cpp #include <iostream> using namespace std ; int gauss_sum ( int n ); int gauss_sum_eq ( int n ); int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) // << \" = \" << gauss_sum_eq ( i ) << '\\n' ; } } The following listing shows an example output of the program where we see that the output is indeed the same for our tested numbers. $ g++ -o gauss main.cpp gauss_sum.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 = 1 Gauss(2) = 3 = 3 Gauss(3) = 6 = 6 Gauss(4) = 10 = 10 Gauss(5) = 15 = 15 Gauss(6) = 21 = 21 Gauss(7) = 28 = 28 Gauss(8) = 36 = 36 Gauss(9) = 45 = 45 Gauss(10) = 55 = 55","title":"Adding a Second Function"},{"location":"programming/c%2B%2B/course/04/#removing-the-need-of-manual-declaration","text":"Now it becomes clear that every time we want to call one of the functions in gauss_sum.cpp in a different source file, we have to state the according declarations of these functions at the beginning of this source file. If we are using only one or two functions, this may not be a big problem. But it becomes a cumbersome process for many functions and more complicated projects. Hence, we would like to have a file containing all those declarations which can easily be included into the source file where we want to call the functions. This file serves not as a typical C++ source file. Instead, its content should be read and inserted into the file it is called from. We are calling such files header files and typically set their extension to hpp . So create another file gauss_sum.hpp and put the declarations there. // gauss_sum.hpp int gauss_sum ( int n ); int gauss_sum_eq ( int n ); Now, your main.cpp file has to include the header file by the typical #include directive which we have already used uncountable times to get access to standard input and output routines. // main.cpp #include <iostream> #include \"gauss_sum.hpp\" using namespace std ; int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << \"Gauss(\" << i << \") = \" << gauss_sum ( i ) // << \" = \" << gauss_sum_eq ( i ) << '\\n' ; } } Please note, header files are in general not allowed to be compiled. Hence, the header file must not be given as an extra argument to the compiler. It is only used for text replacement. After its content was inserted into the source file by processing the #include directive, the manipulated source file will be compiled with a copy of the content of the header file. $ g++ -o gauss main.cpp gauss_sum.cpp $ ./gauss Give me a number: 10 Gauss(1) = 1 = 1 Gauss(2) = 3 = 3 Gauss(3) = 6 = 6 Gauss(4) = 10 = 10 Gauss(5) = 15 = 15 Gauss(6) = 21 = 21 Gauss(7) = 28 = 28 Gauss(8) = 36 = 36 Gauss(9) = 45 = 45 Gauss(10) = 55 = 55","title":"Removing the Need of Manual Declaration"},{"location":"programming/c%2B%2B/course/04/#exercises","text":"In the #include directive, what is the difference between <...> and \"...\" ? Why are we not typing #include <iostream.hpp> ? Add a third function which outputs the factorial \\(n!\\) of a given natural number \\(n\\) to the files gauss_sum.hpp and gauss_sum.cpp . Call this function in main.cpp .","title":"Exercises"},{"location":"programming/c%2B%2B/course/05/","text":"5. The Compilation Process \u00b6 Solutions to the Exercises \u00b6 Alternative Include Mechanisms \u00b6 C++ provides two different ways of including a header file in a source file. To include the C++ standard library for handling input and output on the terminal, we have used the following #include directive with angular brackets <...> . #include <iostream> But to get the declaration of the function gauss_sum in the last project, we have chosen to use another variant with double quotes \"...\" . #include \"gauss_sum.hpp\" Both of these variants are very similar. If the given file could be found, they take the content of it and insert it at the exact position of the #include directive. The subtle difference of these two variants is the search algorithm that has to look for the given file. By using tags <...> in the form #include <...> , the algorithm tries to find the given file in one of the standard include paths of the compiler. By using double quotes \"...\" , the algorithm will first try to find the file in the current directory with respect to the source file and if it could not find the given file, it looks it up in the standard include paths. For this course, we do not want to think about two different alternatives for including files. As a consequence, in the future, we will always use #include directives with angular brackets. This will force us to specify a file path relative to some standard include path of a project. When reading source files, this makes it clearer to us what the specific dependencies of a source file are and where those files can be found. Furthermore, this inclusion scheme generalizes the usage of your own code in form of a library. Shortly, it will be explained how to add more standard include paths to the compiler. Please note, the file extension of a header or source file is not important for the C++ compiler and can be changed arbitrarily. The standard file iostream even is a C++ header file with no additional extension. For the beginning, this may be too much freedom left to the programmer. Hence, we will stick to a typical standard naming scheme. Every source file will get the .cpp extension and every header file will get the .hpp extension. Adding a Factorial Function \u00b6 Implementing a function, that computes the factorial of a natural number, should be done the same way we have implemented the functions gauss_sum and gauss_sum_eq . Therefore we will start with the declaration in the file gauss_sum.hpp . The factorial of given natural number is again a natural number. Accordingly, the declaration should look like the following. // gauss_sum.hpp int gauss_sum ( int n ); int gauss_sum_eq ( int n ); int factorial ( int n ); Now we copy the declaration into the gauss_sum.cpp source file and will add the implementation. Please note, the computation of the factorial function is extremely similar to the computation of the Gauss sum. The only difference is that instead of an addition with a starting value of zero we have to use a multiplication with a starting value of one. // gauss_sum.cpp int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } int gauss_sum_eq ( int n ) { // return n * ( n + 1 ) / 2 ; } int factorial ( int n ){ int result = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result * i ; } return result ; } To completely fulfill the task of the exercise, we have to call the function in the main.cpp source file and output its computation to the terminal. // main.cpp #include <iostream> #include \"gauss_sum.hpp\" using namespace std ; int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << i << \"! = \" << factorial ( i ) << '\\n' ; } } Compilation Process and Stages \u00b6 Click on the image to get the PDF. For efficiently dealing with multiple files in a project, we will now take a deeper look into the actual compilation process and the different stages that are involved when we are calling the compiler on the command line. The figure shown above demonstrates the compilation process for a project with two source files. Possibly, they are both including some other header files, but as we have said, header files are not compiled but only included. The first stage of the compiler process is called the preprocessor. The preprocessor acts without knowledge of the C++ syntax and only interchanges text strings based on the directives beginning with # . For us, this means that every #include directive is processed by the preprocessor. For every of those directives, the preprocessor simply includes the content of the given file without knowing if it is syntactically correct or not. After a source file has been preprocessed, the actual compiling of a source file will be done independently of every other source file. Therefore, after this step, external structures or functions which were not defined inside the current file are not yet resolved and kept as so-called symbols. The resulting files are typically called object files and already contain most of the binary code, the final executable will consist of, together with a few symbols to externally defined functions and structures. The last stage, called the linker, then resolves all symbols left and creates the actual binary file. Please note, that only the linker needs all object files to put them together in one larger binary file. The other stages can be done in parallel. Setting Include Paths \u00b6 Using two different inclusion schemes, has proven to be error-prone in my opinion. Hence, we will strive for simplicity and only want to use the library scheme . #include \"gauss_sum.hpp\" #include <gauss_sum.hpp> To validly transform the first directive to the second, we have to add the current path of the project directory to the standard include paths of the compiler when compiling the source files. For GCC (the C++ compiler suite that we are currently using), this can be done on the command line by appending the path to the -I flag. Because we do not use any subfolders in our project, we want to add the current directory where we are calling the compiler. Please remember, the current directory is typically referenced by a single dot . . $ g++ -o gauss main.cpp gauss_sum.cpp -I. From now on, every path given in an include directive has to be relative to the project root and not to the file itself. Errors in Different Stages \u00b6 Based on the knowledge of the different stages involved in the compiling process, it is now possible to analyze error messages more accurately when we as programmers have done mistakes. By determining which of the stages throws an error, it is more likely to know or at least closer guess where the origin of the respective error lies. Manual Compiling Process \u00b6 We can also get a deeper understanding of the compiling process by manually comprehending it stages on the command line. First, we will only run the preprocessor and the compiling stage for every source file to generate the respective object files by providing the flag -c . $ ls gauss_sum.hpp gauss_sum.cpp main.cpp $ g++ -c main.cpp -I. $ g++ -c gauss_sum.cpp $ ls gauss_sum.hpp gauss_sum.cpp gauss_sum.o main.cpp main.o To assemble the object files in a binary file, we the call the following command. $ g++ -o gauss main.o gauss_sum.o $ ls gauss gauss_sum.hpp gauss_sum.cpp gauss_sum.o main.cpp main.o $ ./gauss ... This process takes up a lot more work on the command line and it makes no real sense to do this kind of thing manually for small projects. But for very large projects where compiling all source files can take a few minutes up to hours, it would not be feasible to always call the simpler command g++ -o gauss main.cpp gauss_sum.cpp -I. because this would always force the compiler to recompile every source file. With the process given above, if we would change a source file, let us say gauss_sum.cpp , we would only have to recompile the gauss_sum.cpp file and then link everything again into an executable. For large projects, this idea is able to tremendously speed up the compiling process. $ g++ -c gauss_sum.cpp $ g++ -o gauss main.o gauss_sum.o But even then this process is a cumbersome task. We will later see how in this case build systems can simplify our life. Last but not least, for the more experienced reader, we can of course tweak the above compiling process by using wildcards in the command line. If you do not want to use external build systems or you have no idea about them, this variant may take you further ahead the road. However, you should have really strong reasons not to use a build system. $ g++ -c *.cpp -I. $ g++ -o gauss *.o $ # Make a change to 'gauss_sum.cpp' file $ g++ -c gauss_sum.cpp $ g++ -o gauss *.o","title":"5. The Compilation Process"},{"location":"programming/c%2B%2B/course/05/#5-the-compilation-process","text":"","title":"5. The Compilation Process"},{"location":"programming/c%2B%2B/course/05/#solutions-to-the-exercises","text":"","title":"Solutions to the Exercises"},{"location":"programming/c%2B%2B/course/05/#alternative-include-mechanisms","text":"C++ provides two different ways of including a header file in a source file. To include the C++ standard library for handling input and output on the terminal, we have used the following #include directive with angular brackets <...> . #include <iostream> But to get the declaration of the function gauss_sum in the last project, we have chosen to use another variant with double quotes \"...\" . #include \"gauss_sum.hpp\" Both of these variants are very similar. If the given file could be found, they take the content of it and insert it at the exact position of the #include directive. The subtle difference of these two variants is the search algorithm that has to look for the given file. By using tags <...> in the form #include <...> , the algorithm tries to find the given file in one of the standard include paths of the compiler. By using double quotes \"...\" , the algorithm will first try to find the file in the current directory with respect to the source file and if it could not find the given file, it looks it up in the standard include paths. For this course, we do not want to think about two different alternatives for including files. As a consequence, in the future, we will always use #include directives with angular brackets. This will force us to specify a file path relative to some standard include path of a project. When reading source files, this makes it clearer to us what the specific dependencies of a source file are and where those files can be found. Furthermore, this inclusion scheme generalizes the usage of your own code in form of a library. Shortly, it will be explained how to add more standard include paths to the compiler. Please note, the file extension of a header or source file is not important for the C++ compiler and can be changed arbitrarily. The standard file iostream even is a C++ header file with no additional extension. For the beginning, this may be too much freedom left to the programmer. Hence, we will stick to a typical standard naming scheme. Every source file will get the .cpp extension and every header file will get the .hpp extension.","title":"Alternative Include Mechanisms"},{"location":"programming/c%2B%2B/course/05/#adding-a-factorial-function","text":"Implementing a function, that computes the factorial of a natural number, should be done the same way we have implemented the functions gauss_sum and gauss_sum_eq . Therefore we will start with the declaration in the file gauss_sum.hpp . The factorial of given natural number is again a natural number. Accordingly, the declaration should look like the following. // gauss_sum.hpp int gauss_sum ( int n ); int gauss_sum_eq ( int n ); int factorial ( int n ); Now we copy the declaration into the gauss_sum.cpp source file and will add the implementation. Please note, the computation of the factorial function is extremely similar to the computation of the Gauss sum. The only difference is that instead of an addition with a starting value of zero we have to use a multiplication with a starting value of one. // gauss_sum.cpp int gauss_sum ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result + i ; } return result ; } int gauss_sum_eq ( int n ) { // return n * ( n + 1 ) / 2 ; } int factorial ( int n ){ int result = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { result = result * i ; } return result ; } To completely fulfill the task of the exercise, we have to call the function in the main.cpp source file and output its computation to the terminal. // main.cpp #include <iostream> #include \"gauss_sum.hpp\" using namespace std ; int main () { cout << \"Give me a number: \\n \" ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cout << i << \"! = \" << factorial ( i ) << '\\n' ; } }","title":"Adding a Factorial Function"},{"location":"programming/c%2B%2B/course/05/#compilation-process-and-stages","text":"Click on the image to get the PDF. For efficiently dealing with multiple files in a project, we will now take a deeper look into the actual compilation process and the different stages that are involved when we are calling the compiler on the command line. The figure shown above demonstrates the compilation process for a project with two source files. Possibly, they are both including some other header files, but as we have said, header files are not compiled but only included. The first stage of the compiler process is called the preprocessor. The preprocessor acts without knowledge of the C++ syntax and only interchanges text strings based on the directives beginning with # . For us, this means that every #include directive is processed by the preprocessor. For every of those directives, the preprocessor simply includes the content of the given file without knowing if it is syntactically correct or not. After a source file has been preprocessed, the actual compiling of a source file will be done independently of every other source file. Therefore, after this step, external structures or functions which were not defined inside the current file are not yet resolved and kept as so-called symbols. The resulting files are typically called object files and already contain most of the binary code, the final executable will consist of, together with a few symbols to externally defined functions and structures. The last stage, called the linker, then resolves all symbols left and creates the actual binary file. Please note, that only the linker needs all object files to put them together in one larger binary file. The other stages can be done in parallel.","title":"Compilation Process and Stages"},{"location":"programming/c%2B%2B/course/05/#setting-include-paths","text":"Using two different inclusion schemes, has proven to be error-prone in my opinion. Hence, we will strive for simplicity and only want to use the library scheme . #include \"gauss_sum.hpp\" #include <gauss_sum.hpp> To validly transform the first directive to the second, we have to add the current path of the project directory to the standard include paths of the compiler when compiling the source files. For GCC (the C++ compiler suite that we are currently using), this can be done on the command line by appending the path to the -I flag. Because we do not use any subfolders in our project, we want to add the current directory where we are calling the compiler. Please remember, the current directory is typically referenced by a single dot . . $ g++ -o gauss main.cpp gauss_sum.cpp -I. From now on, every path given in an include directive has to be relative to the project root and not to the file itself.","title":"Setting Include Paths"},{"location":"programming/c%2B%2B/course/05/#errors-in-different-stages","text":"Based on the knowledge of the different stages involved in the compiling process, it is now possible to analyze error messages more accurately when we as programmers have done mistakes. By determining which of the stages throws an error, it is more likely to know or at least closer guess where the origin of the respective error lies.","title":"Errors in Different Stages"},{"location":"programming/c%2B%2B/course/05/#manual-compiling-process","text":"We can also get a deeper understanding of the compiling process by manually comprehending it stages on the command line. First, we will only run the preprocessor and the compiling stage for every source file to generate the respective object files by providing the flag -c . $ ls gauss_sum.hpp gauss_sum.cpp main.cpp $ g++ -c main.cpp -I. $ g++ -c gauss_sum.cpp $ ls gauss_sum.hpp gauss_sum.cpp gauss_sum.o main.cpp main.o To assemble the object files in a binary file, we the call the following command. $ g++ -o gauss main.o gauss_sum.o $ ls gauss gauss_sum.hpp gauss_sum.cpp gauss_sum.o main.cpp main.o $ ./gauss ... This process takes up a lot more work on the command line and it makes no real sense to do this kind of thing manually for small projects. But for very large projects where compiling all source files can take a few minutes up to hours, it would not be feasible to always call the simpler command g++ -o gauss main.cpp gauss_sum.cpp -I. because this would always force the compiler to recompile every source file. With the process given above, if we would change a source file, let us say gauss_sum.cpp , we would only have to recompile the gauss_sum.cpp file and then link everything again into an executable. For large projects, this idea is able to tremendously speed up the compiling process. $ g++ -c gauss_sum.cpp $ g++ -o gauss main.o gauss_sum.o But even then this process is a cumbersome task. We will later see how in this case build systems can simplify our life. Last but not least, for the more experienced reader, we can of course tweak the above compiling process by using wildcards in the command line. If you do not want to use external build systems or you have no idea about them, this variant may take you further ahead the road. However, you should have really strong reasons not to use a build system. $ g++ -c *.cpp -I. $ g++ -o gauss *.o $ # Make a change to 'gauss_sum.cpp' file $ g++ -c gauss_sum.cpp $ g++ -o gauss *.o","title":"Manual Compiling Process"},{"location":"programming/c%2B%2B/course/06/","text":"6. Greatest Common Divisor \u00b6 This time our goal is it to create a new project which allows us to do computations with rational numbers. C++ provides no built-in type able to store the value of a rational number. Instead C++ provides floating-point values which are able to approximate the value of rational numbers. For example, the value \\(\\frac{1}{3}\\) cannot be represented by a floating-point value exactly. In this lecture, we will not be fast enough to actually implement a new structure for rational numbers. Instead we think about an algorithm to compute the greatest common divisor (GCD). The GCD is needed to shorten a rational number after operations like addition or multiplication. As before, the basic project structure will consist of three files, namely main.cpp , rational.hpp , and rational.cpp . So make sure to set it up properly. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files $ mkdir 05-rational $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational $ cd 05-rational $ pwd /home/lyrahgames/projects/cpp-course/05-rational $ touch main.cpp $ touch rational.hpp $ touch rational.cpp $ ls main.cpp rational.hpp rational.cpp Euclid's Algorithm \u00b6 Mathematically spoken, the function of the GCD, which we are calling \\(\\mathrm{gcd}\\) , can be defined by a recursive relation as follows. \\[ \\mathrm{gcd}:\\mathbb{N}\\times\\mathbb{N}\\to\\mathbb{N} \\ ,\\qquad \\mathrm{gcd}(x,y) = \\begin{cases} x &: y = 0 \\\\ \\mathrm{gcd}(y,x\\ \\mathrm{mod}\\ y) &: y\\neq 0 \\end{cases} \\] One of the most popular algorithms to compute the GCD was proposed more than two thousand years ago by Euclid. Actually, Euclid has constructed two different algorithms based on modulo and subtraction respectively. We will restrict our implementation to the modulo-based method. As always, first, we start with the declaration of our own implementation. We want to take two natural numbers and output the GCD which is also a natural number. // rational.hpp unsigned int gcd ( unsigned int x , unsigned int y ); After copying this line into the rational.cpp source file, we have to add the actual implementation. Here, we do not want to talk about the mathematical details. I recommend to read through the according Wikipedia article . // rational.cpp unsigned int gcd ( unsigned int x , unsigned int y ){ while ( y != 0 ){ auto tmp = y ; y = x % y ; x = tmp ; } return x ; } Afterwards, let us use the newly created function inside the main.cpp source file. // main.cpp #include <iostream> #include <rational.hpp> using namespace std ; int main (){ for ( int i = 1 ; i < 20 ; ++ i ) for ( int j = 1 ; j < 20 ; ++ j ) cout << \"gcd(\" << i << \", \" << j << \") = \" << gcd ( i , j ) << '\\n' ; } The project can be compiled by the following command. g++ -o rational main.cpp rational.cpp -I. Include Guard \u00b6 In larger projects, a C++ header file will typically be included in different source files to provide necessary function declarations and other structures for in- and external use. Assume that in our main.cpp we would like to include the files A.hpp and B.hpp . Furthermore, let B.hpp include the file A.hpp . As a result from compiling the main.cpp file, the preprocessor will first insert the contents of the files A.hpp and B.hpp into the main.cpp file. At this point another #include <A.hpp> directive is left from file B.hpp . Therefore the preprocessor has to run one more time and will include the file A.hpp a second time into the main.cpp file. According to the one-definition rule (ODR), this may lead to errors in the compilation process because of multiple occurrences of structures that should only appear once. To prevent this kind of behavior, we will use a #pragma once directive at the start of every header file. // rational.hpp #pragma once unsigned int gcd ( unsigned int x , unsigned int y ); Note The #pragma once directive for the preprocessor is not a standard construct from the C++ language. But it is provided by all the typical C++ compilers we will use in this lecture. Inline \u00b6 Sometimes a function may be too small in its implementation to feasibly separate it into a declaration and definition. To lighten up the development process, we would like to provide function definitions inside a header file, like in the following example. // rational.hpp unsigned int gcd ( unsigned int x , unsigned int y ){ while ( y != 0 ){ auto tmp = y ; y = x % y ; x = tmp ; } return x ; } But due to the one-definition rule (ODR), if at least two source files include the given rational.hpp header file, an error has to occur because the function gcd would be defined in more than one source file. This is a difference to the above discussion about the #pragma once directive. This time we are talking about that a definition is only allowed to occur one single time in the whole project concerning all source and header files. We can loosen up this strict rule by using the C++ keyword inline on our function. // rational.hpp inline unsigned int gcd ( unsigned int x , unsigned int y ){ while ( y != 0 ){ auto tmp = y ; y = x % y ; x = tmp ; } return x ; } The C++ specifier inline allows us to define the same function, in other words the interface or implementation must not change, in multiple source files but in each file the definition is only allowed to occur once. Practically spoken, with inline we can define a function inside a header file regardless of how many times we are including the file in different source files. Exercises \u00b6 Install the build2 build system toolchain according to the instructions . Read the sections 1.1 and 1.3 in the Pro Git book to understand the purpose of a version control system (VCS). References \u00b6 https://en.wikipedia.org/wiki/Euclidean_algorithm https://en.cppreference.com/w/cpp/numeric/gcd https://git-scm.com/book/en/v2 https://build2.org/install.xhtml","title":"6. Greatest Common Divisor"},{"location":"programming/c%2B%2B/course/06/#6-greatest-common-divisor","text":"This time our goal is it to create a new project which allows us to do computations with rational numbers. C++ provides no built-in type able to store the value of a rational number. Instead C++ provides floating-point values which are able to approximate the value of rational numbers. For example, the value \\(\\frac{1}{3}\\) cannot be represented by a floating-point value exactly. In this lecture, we will not be fast enough to actually implement a new structure for rational numbers. Instead we think about an algorithm to compute the greatest common divisor (GCD). The GCD is needed to shorten a rational number after operations like addition or multiplication. As before, the basic project structure will consist of three files, namely main.cpp , rational.hpp , and rational.cpp . So make sure to set it up properly. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files $ mkdir 05-rational $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational $ cd 05-rational $ pwd /home/lyrahgames/projects/cpp-course/05-rational $ touch main.cpp $ touch rational.hpp $ touch rational.cpp $ ls main.cpp rational.hpp rational.cpp","title":"6. Greatest Common Divisor"},{"location":"programming/c%2B%2B/course/06/#euclids-algorithm","text":"Mathematically spoken, the function of the GCD, which we are calling \\(\\mathrm{gcd}\\) , can be defined by a recursive relation as follows. \\[ \\mathrm{gcd}:\\mathbb{N}\\times\\mathbb{N}\\to\\mathbb{N} \\ ,\\qquad \\mathrm{gcd}(x,y) = \\begin{cases} x &: y = 0 \\\\ \\mathrm{gcd}(y,x\\ \\mathrm{mod}\\ y) &: y\\neq 0 \\end{cases} \\] One of the most popular algorithms to compute the GCD was proposed more than two thousand years ago by Euclid. Actually, Euclid has constructed two different algorithms based on modulo and subtraction respectively. We will restrict our implementation to the modulo-based method. As always, first, we start with the declaration of our own implementation. We want to take two natural numbers and output the GCD which is also a natural number. // rational.hpp unsigned int gcd ( unsigned int x , unsigned int y ); After copying this line into the rational.cpp source file, we have to add the actual implementation. Here, we do not want to talk about the mathematical details. I recommend to read through the according Wikipedia article . // rational.cpp unsigned int gcd ( unsigned int x , unsigned int y ){ while ( y != 0 ){ auto tmp = y ; y = x % y ; x = tmp ; } return x ; } Afterwards, let us use the newly created function inside the main.cpp source file. // main.cpp #include <iostream> #include <rational.hpp> using namespace std ; int main (){ for ( int i = 1 ; i < 20 ; ++ i ) for ( int j = 1 ; j < 20 ; ++ j ) cout << \"gcd(\" << i << \", \" << j << \") = \" << gcd ( i , j ) << '\\n' ; } The project can be compiled by the following command. g++ -o rational main.cpp rational.cpp -I.","title":"Euclid's Algorithm"},{"location":"programming/c%2B%2B/course/06/#include-guard","text":"In larger projects, a C++ header file will typically be included in different source files to provide necessary function declarations and other structures for in- and external use. Assume that in our main.cpp we would like to include the files A.hpp and B.hpp . Furthermore, let B.hpp include the file A.hpp . As a result from compiling the main.cpp file, the preprocessor will first insert the contents of the files A.hpp and B.hpp into the main.cpp file. At this point another #include <A.hpp> directive is left from file B.hpp . Therefore the preprocessor has to run one more time and will include the file A.hpp a second time into the main.cpp file. According to the one-definition rule (ODR), this may lead to errors in the compilation process because of multiple occurrences of structures that should only appear once. To prevent this kind of behavior, we will use a #pragma once directive at the start of every header file. // rational.hpp #pragma once unsigned int gcd ( unsigned int x , unsigned int y ); Note The #pragma once directive for the preprocessor is not a standard construct from the C++ language. But it is provided by all the typical C++ compilers we will use in this lecture.","title":"Include Guard"},{"location":"programming/c%2B%2B/course/06/#inline","text":"Sometimes a function may be too small in its implementation to feasibly separate it into a declaration and definition. To lighten up the development process, we would like to provide function definitions inside a header file, like in the following example. // rational.hpp unsigned int gcd ( unsigned int x , unsigned int y ){ while ( y != 0 ){ auto tmp = y ; y = x % y ; x = tmp ; } return x ; } But due to the one-definition rule (ODR), if at least two source files include the given rational.hpp header file, an error has to occur because the function gcd would be defined in more than one source file. This is a difference to the above discussion about the #pragma once directive. This time we are talking about that a definition is only allowed to occur one single time in the whole project concerning all source and header files. We can loosen up this strict rule by using the C++ keyword inline on our function. // rational.hpp inline unsigned int gcd ( unsigned int x , unsigned int y ){ while ( y != 0 ){ auto tmp = y ; y = x % y ; x = tmp ; } return x ; } The C++ specifier inline allows us to define the same function, in other words the interface or implementation must not change, in multiple source files but in each file the definition is only allowed to occur once. Practically spoken, with inline we can define a function inside a header file regardless of how many times we are including the file in different source files.","title":"Inline"},{"location":"programming/c%2B%2B/course/06/#exercises","text":"Install the build2 build system toolchain according to the instructions . Read the sections 1.1 and 1.3 in the Pro Git book to understand the purpose of a version control system (VCS).","title":"Exercises"},{"location":"programming/c%2B%2B/course/06/#references","text":"https://en.wikipedia.org/wiki/Euclidean_algorithm https://en.cppreference.com/w/cpp/numeric/gcd https://git-scm.com/book/en/v2 https://build2.org/install.xhtml","title":"References"},{"location":"programming/c%2B%2B/course/07/","text":"7. Rational Structure \u00b6 Before we start to actually implement a new type representing rational numbers, we will take a look at things that are possible by using built-in types, like int for integral number. The following code snippet demonstrates the declaration of two integer variables, the computation of their multiplication, and the output to the terminal. int x = 2 ; int y = 3 ; auto z = x * y ; cout << \"x = \" << x << '\\n' << \"y = \" << y << '\\n' << \"z = \" << z << '\\n' ; Please remember, the keyword auto in the third line automatically deduces the type of the variable z by setting its type to the return type of the expression x * y . The code itself is straightforward and directly expresses our intention. We would like to have a similar code for our rational numbers. But first, let us take a look at a simpler approach. For this, we have to understand how rational numbers can be represented in a computer program. Rational Numbers \u00b6 In mathematics, a rational number can always be represented by a fraction. And vice versa, every fraction is a rational number. Hence, we can put it the following way. Let \\(r\\in\\mathbb{Q}\\) be a rational number. Then there exists numbers \\(p\\in\\mathbb{Z}\\) and \\(q\\in\\mathbb{N}\\) such that \\(r\\) can be represented in the following way. \\[ r = \\frac{p}{q} \\] We call \\(p\\) the numerator of \\(r\\) and \\(q\\) the denominator of \\(r\\) . Let \\(s\\in\\mathbb{Q}\\) be a second rational number represented by the numbers \\(m\\in\\mathbb{Z}\\) and \\(n\\in\\mathbb{N}\\) acting as its numerator and denominator, respectively. \\[ s = \\frac{m}{n} \\] In this case, the multiplication for the rational numbers \\(r\\) and \\(s\\) can calculated by using the following equation. \\[ r\\cdot s = \\frac{p}{q} \\cdot \\frac{m}{n} = \\frac{p\\cdot m}{q\\cdot n} \\] Assume we would like to compute the multiplication of \\(\\frac{2}{3}\\) and \\(\\frac{3}{7}\\) . \\[ \\frac{2}{3} \\cdot \\frac{3}{7} = \\frac{2\\cdot 3}{3\\cdot 7} = \\frac{6}{21} \\] Simple Multiplication of Rationals \u00b6 According to the mathematical theory, every rational number is represented by two integral numbers. As a consequence, the first step adjusting the above example to use two rational numbers could look like the following. // First Rational Number int x_numerator = 2 ; int x_denominator = 3 ; // Second Rational Number int y_numerator = 3 ; int y_denominator = 7 ; // Result of Multiplication auto z_numerator = x_numerator * y_numerator ; auto z_denominator = x_denominator * y_denominator ; // Output cout << \"x = \" << x_numerator << '/' << x_denominator << '\\n' << \"y = \" << y_numerator << '/' << y_denominator << '\\n' << \"z = \" << z_numerator << '/' << z_denominator << '\\n' ; For every rational number, two variables of type int were taken to act as numerator and denominator, respectively. The multiplication of those rational numbers can then be executed by using the above formula. At the end, the results will be printed to the screen. The output should look like the following. x = 2/3 y = 3/7 z = 6/21 Actual Goal \u00b6 The approach that we have taken to compute the product of rational numbers is very simple. But it does not scale very well. If we would be bound to use many rational numbers, we would have to remember to declare the numerator and denominator for each rational number manually. Furthermore, every operation done with rational numbers acts on both the numerator and denominator. To manually write code like this for many variables would be cumbersome and error-prone. For this reason, we will strive for simplification in the following sense. rational x = { 2 , 3 }; rational y = { 3 , 7 }; auto z = x * y ; cout << \"x = \" << x << '\\n' << \"y = \" << y << '\\n' << \"z = \" << z << '\\n' ; Basic Structure, Initialization, and Members \u00b6 C++ provides and easy alternative. By using the keyword struct , we are able to create a new type with a custom name consisting of one or more other types. Initializing a variable of such a type, stores a variable for each type inside the assembled type. They belong to the assembled type and can be accessed and transferred by using the variable of the assembled type. Therefore those variables are called member variables . // Structure defining a new type with name 'rational' struct rational { int numerator ; // Member variable of type 'int' with name 'numerator' int denominator ; // Member variable of type 'int' with name 'denominator' }; Now, rational describes a new type in C++ and it can be used in a similar way as a built-in type, like int , to declare a variable. Typically, structures cannot be initialized by using a equality sign. C++ uses curly braces { and } for a uniform initialization syntax of all objects. This means that built-in types, too, can be initialized by these curly braces. rational r {}; cout << \"r = \" << r . numerator << \"/\" << r . denominator << '\\n' ; The second line in the above code snippet showed how to access the variables inside the rational structure by using the . operator. Because the variable r was initialized with empty braces, the values of its numerator and denominator could be arbitrary. To prevent such a behavior, we will use default values for them at the start. struct rational { int numerator = 0 ; int denominator = 1 ; }; To not use the default values, we can use a comma-separated list to initialize member variables in the order of their appearance in their structure's definition. rational r { 1 , 2 }; In this case, r.numerator would contain the value 1 and r.denominator the value 2 . Multiplication Operation \u00b6 rational operator * ( rational x , rational y ){ rational r { x . numerator * y . numerator , x . denominator * y . denominator }; return r ; } rational operator * ( rational x , rational y ){ return rational { x . numerator * y . numerator , x . denominator * y . denominator }; } rational operator * ( rational x , rational y ){ return { x . numerator * y . numerator , x . denominator * y . denominator }; } rational x { 3 , 4 }; rational y { 5 , 7 }; auto z = x * y ; Output Operation \u00b6 std :: ostream & operator << ( std :: ostream & os , rational r ){ return os << r . numerator << '/' << r . denominator ; } cout << \"r = \" << r << '\\n' ; Shorten by Using Euclidean Algorithm \u00b6 rational shorten ( rational r ){ const auto divisor = gcd ( r . numerator , r . denominator ); return { r . numerator / divisor , r . denominator / divisor }; } rational p { 6 , 8 }; rational q { 14 , 49 }; p = shorten ( p ); q = shorten ( q ); Where to put everything? \u00b6 Exercises \u00b6 Add the other basic operations with rational numbers.","title":"7. Rational Structure"},{"location":"programming/c%2B%2B/course/07/#7-rational-structure","text":"Before we start to actually implement a new type representing rational numbers, we will take a look at things that are possible by using built-in types, like int for integral number. The following code snippet demonstrates the declaration of two integer variables, the computation of their multiplication, and the output to the terminal. int x = 2 ; int y = 3 ; auto z = x * y ; cout << \"x = \" << x << '\\n' << \"y = \" << y << '\\n' << \"z = \" << z << '\\n' ; Please remember, the keyword auto in the third line automatically deduces the type of the variable z by setting its type to the return type of the expression x * y . The code itself is straightforward and directly expresses our intention. We would like to have a similar code for our rational numbers. But first, let us take a look at a simpler approach. For this, we have to understand how rational numbers can be represented in a computer program.","title":"7. Rational Structure"},{"location":"programming/c%2B%2B/course/07/#rational-numbers","text":"In mathematics, a rational number can always be represented by a fraction. And vice versa, every fraction is a rational number. Hence, we can put it the following way. Let \\(r\\in\\mathbb{Q}\\) be a rational number. Then there exists numbers \\(p\\in\\mathbb{Z}\\) and \\(q\\in\\mathbb{N}\\) such that \\(r\\) can be represented in the following way. \\[ r = \\frac{p}{q} \\] We call \\(p\\) the numerator of \\(r\\) and \\(q\\) the denominator of \\(r\\) . Let \\(s\\in\\mathbb{Q}\\) be a second rational number represented by the numbers \\(m\\in\\mathbb{Z}\\) and \\(n\\in\\mathbb{N}\\) acting as its numerator and denominator, respectively. \\[ s = \\frac{m}{n} \\] In this case, the multiplication for the rational numbers \\(r\\) and \\(s\\) can calculated by using the following equation. \\[ r\\cdot s = \\frac{p}{q} \\cdot \\frac{m}{n} = \\frac{p\\cdot m}{q\\cdot n} \\] Assume we would like to compute the multiplication of \\(\\frac{2}{3}\\) and \\(\\frac{3}{7}\\) . \\[ \\frac{2}{3} \\cdot \\frac{3}{7} = \\frac{2\\cdot 3}{3\\cdot 7} = \\frac{6}{21} \\]","title":"Rational Numbers"},{"location":"programming/c%2B%2B/course/07/#simple-multiplication-of-rationals","text":"According to the mathematical theory, every rational number is represented by two integral numbers. As a consequence, the first step adjusting the above example to use two rational numbers could look like the following. // First Rational Number int x_numerator = 2 ; int x_denominator = 3 ; // Second Rational Number int y_numerator = 3 ; int y_denominator = 7 ; // Result of Multiplication auto z_numerator = x_numerator * y_numerator ; auto z_denominator = x_denominator * y_denominator ; // Output cout << \"x = \" << x_numerator << '/' << x_denominator << '\\n' << \"y = \" << y_numerator << '/' << y_denominator << '\\n' << \"z = \" << z_numerator << '/' << z_denominator << '\\n' ; For every rational number, two variables of type int were taken to act as numerator and denominator, respectively. The multiplication of those rational numbers can then be executed by using the above formula. At the end, the results will be printed to the screen. The output should look like the following. x = 2/3 y = 3/7 z = 6/21","title":"Simple Multiplication of Rationals"},{"location":"programming/c%2B%2B/course/07/#actual-goal","text":"The approach that we have taken to compute the product of rational numbers is very simple. But it does not scale very well. If we would be bound to use many rational numbers, we would have to remember to declare the numerator and denominator for each rational number manually. Furthermore, every operation done with rational numbers acts on both the numerator and denominator. To manually write code like this for many variables would be cumbersome and error-prone. For this reason, we will strive for simplification in the following sense. rational x = { 2 , 3 }; rational y = { 3 , 7 }; auto z = x * y ; cout << \"x = \" << x << '\\n' << \"y = \" << y << '\\n' << \"z = \" << z << '\\n' ;","title":"Actual Goal"},{"location":"programming/c%2B%2B/course/07/#basic-structure-initialization-and-members","text":"C++ provides and easy alternative. By using the keyword struct , we are able to create a new type with a custom name consisting of one or more other types. Initializing a variable of such a type, stores a variable for each type inside the assembled type. They belong to the assembled type and can be accessed and transferred by using the variable of the assembled type. Therefore those variables are called member variables . // Structure defining a new type with name 'rational' struct rational { int numerator ; // Member variable of type 'int' with name 'numerator' int denominator ; // Member variable of type 'int' with name 'denominator' }; Now, rational describes a new type in C++ and it can be used in a similar way as a built-in type, like int , to declare a variable. Typically, structures cannot be initialized by using a equality sign. C++ uses curly braces { and } for a uniform initialization syntax of all objects. This means that built-in types, too, can be initialized by these curly braces. rational r {}; cout << \"r = \" << r . numerator << \"/\" << r . denominator << '\\n' ; The second line in the above code snippet showed how to access the variables inside the rational structure by using the . operator. Because the variable r was initialized with empty braces, the values of its numerator and denominator could be arbitrary. To prevent such a behavior, we will use default values for them at the start. struct rational { int numerator = 0 ; int denominator = 1 ; }; To not use the default values, we can use a comma-separated list to initialize member variables in the order of their appearance in their structure's definition. rational r { 1 , 2 }; In this case, r.numerator would contain the value 1 and r.denominator the value 2 .","title":"Basic Structure, Initialization, and Members"},{"location":"programming/c%2B%2B/course/07/#multiplication-operation","text":"rational operator * ( rational x , rational y ){ rational r { x . numerator * y . numerator , x . denominator * y . denominator }; return r ; } rational operator * ( rational x , rational y ){ return rational { x . numerator * y . numerator , x . denominator * y . denominator }; } rational operator * ( rational x , rational y ){ return { x . numerator * y . numerator , x . denominator * y . denominator }; } rational x { 3 , 4 }; rational y { 5 , 7 }; auto z = x * y ;","title":"Multiplication Operation"},{"location":"programming/c%2B%2B/course/07/#output-operation","text":"std :: ostream & operator << ( std :: ostream & os , rational r ){ return os << r . numerator << '/' << r . denominator ; } cout << \"r = \" << r << '\\n' ;","title":"Output Operation"},{"location":"programming/c%2B%2B/course/07/#shorten-by-using-euclidean-algorithm","text":"rational shorten ( rational r ){ const auto divisor = gcd ( r . numerator , r . denominator ); return { r . numerator / divisor , r . denominator / divisor }; } rational p { 6 , 8 }; rational q { 14 , 49 }; p = shorten ( p ); q = shorten ( q );","title":"Shorten by Using Euclidean Algorithm"},{"location":"programming/c%2B%2B/course/07/#where-to-put-everything","text":"","title":"Where to put everything?"},{"location":"programming/c%2B%2B/course/07/#exercises","text":"Add the other basic operations with rational numbers.","title":"Exercises"},{"location":"programming/c%2B%2B/course/08/","text":"8. Starting with Graphics \u00b6 In this small excursion, we want to create a program which draws a two-dimensional circle filled with green color onto the screen. Afterwards, we shall use the build system to automate the compilation process. SFML as Grahpics Library \u00b6 First of all, we need to install a graphics library. For this small example, the SFML library seems suitable. Read the official SFML documentation to get better insight on how to do this. Drawing two-dimensional shapes, text, and similar objects on the screen is handled by the graphics card of a computer. The graphics card is a component which posseses its own memory, also known as dynamic random-access memory (DRAM), and its own processing unit (GPU). Typically, the information for a screen resides on the DRAM and has to be transferred by the GPU after running customizable programs, called shaders, adjusting the output. Debian/Ubuntu sudo apt-get update && sudo apt-get install libsfml-dev Arch Linux sudo pacman -S sfml Sample Project \u00b6 After a succesful installation of SFML, let us now start with a new project. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational $ mkdir 06-graphics $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics $ cd 06-graphics $ pwd /home/lyrahgames/projects/cpp-course/06-graphics $ touch main.cpp $ ls main.cpp First Graphics \u00b6 We take the code for our small example from the official SFML documentation . #include <SFML/Graphics.hpp> int main () { sf :: RenderWindow window ( sf :: VideoMode ( 800 , 450 ), \"SFML works!\" ); sf :: CircleShape shape ( 100.f ); shape . setOrigin ( 100 , 100 ); shape . setPosition ( 400 , 225 ); shape . setFillColor ( sf :: Color :: Green ); while ( window . isOpen ()) { sf :: Event event ; while ( window . pollEvent ( event )) { if ( event . type == sf :: Event :: Closed ) window . close (); } window . clear (); window . draw ( shape ); window . display (); } } Compiling the project with g++ -o graphics main.cpp will result in a few linker errors. That is because all the special structures and functions in main.cpp are at least declared somehow by including SFML/Graphics.hpp but not defined. For this, we need to actually link the SFML libraries to our project. Library Linking \u00b6 Again, this can be read here . $ g++ -o graphics main.cpp -lsfml-graphics -lsfml-window -lsfml-system ./graphics $ ./graphics Using the Build System \u00b6 We do not want to remember all those libraries and the linker options. Hence, we use a build system, like the build2 toolchain. The build system allows us to script the compiling process and automatically append the difficult flags and options. $ pwd /home/lyrahgames/projects/cpp-course/06-graphics $ ls main.cpp $ touch buildfile $ ls main.cpp buildfile The buildfile is the file read by build2 to generate the executable. For this small project, it looks like the following. using cxx import libs = sfml-graphics%lib{sfml-graphics} exe{graphics}: cxx{main.cpp} $libs Furthe explanations of the buildfile syntax are given in the next lessons. We can start the compiling process by calling the following (very simple) command (at least it is only a single letter). $ b $ ./graphics $ b clean References \u00b6 SFML build2","title":"8. Starting with Graphics"},{"location":"programming/c%2B%2B/course/08/#8-starting-with-graphics","text":"In this small excursion, we want to create a program which draws a two-dimensional circle filled with green color onto the screen. Afterwards, we shall use the build system to automate the compilation process.","title":"8. Starting with Graphics"},{"location":"programming/c%2B%2B/course/08/#sfml-as-grahpics-library","text":"First of all, we need to install a graphics library. For this small example, the SFML library seems suitable. Read the official SFML documentation to get better insight on how to do this. Drawing two-dimensional shapes, text, and similar objects on the screen is handled by the graphics card of a computer. The graphics card is a component which posseses its own memory, also known as dynamic random-access memory (DRAM), and its own processing unit (GPU). Typically, the information for a screen resides on the DRAM and has to be transferred by the GPU after running customizable programs, called shaders, adjusting the output. Debian/Ubuntu sudo apt-get update && sudo apt-get install libsfml-dev Arch Linux sudo pacman -S sfml","title":"SFML as Grahpics Library"},{"location":"programming/c%2B%2B/course/08/#sample-project","text":"After a succesful installation of SFML, let us now start with a new project. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational $ mkdir 06-graphics $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics $ cd 06-graphics $ pwd /home/lyrahgames/projects/cpp-course/06-graphics $ touch main.cpp $ ls main.cpp","title":"Sample Project"},{"location":"programming/c%2B%2B/course/08/#first-graphics","text":"We take the code for our small example from the official SFML documentation . #include <SFML/Graphics.hpp> int main () { sf :: RenderWindow window ( sf :: VideoMode ( 800 , 450 ), \"SFML works!\" ); sf :: CircleShape shape ( 100.f ); shape . setOrigin ( 100 , 100 ); shape . setPosition ( 400 , 225 ); shape . setFillColor ( sf :: Color :: Green ); while ( window . isOpen ()) { sf :: Event event ; while ( window . pollEvent ( event )) { if ( event . type == sf :: Event :: Closed ) window . close (); } window . clear (); window . draw ( shape ); window . display (); } } Compiling the project with g++ -o graphics main.cpp will result in a few linker errors. That is because all the special structures and functions in main.cpp are at least declared somehow by including SFML/Graphics.hpp but not defined. For this, we need to actually link the SFML libraries to our project.","title":"First Graphics"},{"location":"programming/c%2B%2B/course/08/#library-linking","text":"Again, this can be read here . $ g++ -o graphics main.cpp -lsfml-graphics -lsfml-window -lsfml-system ./graphics $ ./graphics","title":"Library Linking"},{"location":"programming/c%2B%2B/course/08/#using-the-build-system","text":"We do not want to remember all those libraries and the linker options. Hence, we use a build system, like the build2 toolchain. The build system allows us to script the compiling process and automatically append the difficult flags and options. $ pwd /home/lyrahgames/projects/cpp-course/06-graphics $ ls main.cpp $ touch buildfile $ ls main.cpp buildfile The buildfile is the file read by build2 to generate the executable. For this small project, it looks like the following. using cxx import libs = sfml-graphics%lib{sfml-graphics} exe{graphics}: cxx{main.cpp} $libs Furthe explanations of the buildfile syntax are given in the next lessons. We can start the compiling process by calling the following (very simple) command (at least it is only a single letter). $ b $ ./graphics $ b clean","title":"Using the Build System"},{"location":"programming/c%2B%2B/course/08/#references","text":"SFML build2","title":"References"},{"location":"programming/c%2B%2B/course/09/","text":"9. Build System Basics \u00b6 In this lesson, we want to learn about the basics of the build2 build system. Everything from this lesson and even more can also be read in the build2 build system manual . Starting with the Simple Project \u00b6 It is understandable that always starting with a bare-bones project becomes boring over time. But one has to consider the benefits of a completely understood procedure when adding external tools to the workflow. The typical hello-world program is not that exciting but this gives us the opportunity to concentrate on the scripting of our build system. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics $ mkdir 07-build $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics 07-build $ cd 07-build $ pwd /home/lyrahgames/projects/cpp-course/07-build $ touch main.cpp $ ls main.cpp So, write the code which prints \"Hello, World!\". // main.cpp #include <iostream> int main (){ std :: cout << \"Hello, World! \\n \" ; } Typically, we would compile and run the given code by using the command lines below. $ g++ -o hello main.cpp $ ./hello Hello, World! Now, we would like to use the build system. At first, create a file, called buildfile . $ touch buildfile $ ls buildfile main.cpp Open the buildfile and add the lines written below. using cxx exe{hello}: cxx{main.cpp} The line using cxx in the buildfile tells build2 that we would like to compile C++ code and that it should use its C++ module to be able to do this. The second line exe{hello}: cxx{main.cpp} defines a so-called target exe{hello} to the left of the colons with its prerequisites cxx{main.cpp} to the right of the colons. Targets and prerequisites are defined by first using a type, like exe for executable or cxx for C++ source files, and then appending the file name in curly braces. The build2 build system then knows: To generate the executable file hello , it needs to compile the C++ source file main.cpp by using a C++ compiler and then link it. Comments can be started by using # . The beginning of a newline ends a comment. At first, the extra effort of writing a buildfile seems to be unnecessary complicated. But please note that the buildfile expresses the same information as the command-line approach. At this point, the build2 build system is able to find the buildfile . So your code should be compiled successfully when calling b . $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! b is the command in the shell which calls the build2 build system. The build2 toolchain mainly consists of three tools, the build system b , also known as build2, the package manager bpkg , and the dependency manager bdep . For this lesson, we will only need b . Running the build system again without changing anything will not recompile the code. build2 automatically checks if the prerequisites of any target have changed over time. $ b info: dir{./} is up to date To force a recompile, we first clean up all files generated by build2 by calling b clean . Then we can run b again. For the advanced user, this can also be achieved in one step by calling b {clean update} . $ ls buildfile main.cpp main.o main.d main.o.d hello $ b clean rm exe{hello} rm obje{main} $ ls buildfile main.cpp $ b c++ cxx{main} ld exe{hello} Adding a Header File \u00b6 We will now add a header file hello.hpp to our project which will provide the inline definition of the function void say_hello () . Please remember, every header file should start with #pragma once and the function has to be marked by inline because its definition is positioned in the header file. // hello.hpp #pragma once #include <iostream> inline void say_hello (){ std :: cout << \"Hello, World! \\n \" ; } Of course, the new routine should be called in the main.cpp file. // main.cpp #include <iostream> #include \"hello.hpp\" int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); } Compiling the program by using the command line does not change in comparison to the last attempt. Every header file is processed by the preprocessor and therefore not given as an actual argument to the compiler. $ g++ -o hello main.cpp $ ./hello Hello, World! Hello, World! This also is true for the buildfile . But build2 offers us a more consistent approach. We can directly state the dependence on a specific header file with the type hxx like we would do it for every other C++ source file with the type cxx . Besides the improved consistency, we will also gain other advantages and features which will be discussed later. The current buildfile is now slightly changed using cxx exe{hello}: cxx{main.cpp} hxx{hello.hpp} Again, compiling and running the program has not changed and keeps simple. $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! Hello, World! Using Standard Include \u00b6 In the last projects, we always wanted to include other header files by using tags. So, we tweak the content of our main.cpp to reflect that decision. // main.cpp #include <iostream> #include <hello.hpp> int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); } For this small change, the command line must be altered to able to compile the program. $ g++ -o hello main.cpp -I. $ ./hello Hello, World! Hello, World! We also have to adjust the buildfile . Think about processing the given flag -I. . The preprocessor makes sure to add the given directory to its standard include paths. Hence, in build2, we call this a C++ preprocessor option and as a result, we use the cxx.poptions variable to set the according flag. In the command line above, the given path is a relative directory pointing to the current folder. The build2 build system does not use relative paths but gives us a variable src_base which resolves to the absolute path of the current folder when evaluated by $ . To prepend the flag to the variable, we write =+ . using cxx exe{hello}: cxx{main.cpp} hxx{hello.hpp} cxx.poptions =+ \"-I$src_base\" Compiling and running the code has not changed at all. $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! Hello, World! Adding another Source File \u00b6 Let us add another function void say_bye () that will be defined in a separate source file hello.cpp . To be able to call this function from main.cpp , we first declare it inside our header file. This time an inline is not needed. // hello.hpp #pragma once #include <iostream> inline void say_hello (){ std :: cout << \"Hello, World! \\n \" ; } void say_bye (); The function must be defined in the according source file. Remember that an according source file should include the appropriate header file, even if we are only dealing with functions. // hello.cpp #include <hello.hpp> void say_bye (){ std :: cout << \"Goodbye, World! \\n \" ; } We want to use the new function in the main.cpp file. // main.cpp #include <iostream> #include <hello.hpp> int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); say_bye (); } The command-line compilation has to add the new source file to the call. $ g++ -o hello main.cpp hello.cpp -I. For the buildfile , it looks similar. Another simple cxx{hello.cpp} as a prerequisite to exe{hello} will be added. using cxx exe{hello}: cxx{main.cpp} hxx{hello.hpp} cxx{hello.cpp} cxx.poptions =+ \"-I$src_base\" Running and compiling still keeps the same. $ b c++ cxx{main} c++ cxx{hello} ld exe{hello} $ ./hello Hello, World! Hello, World! Goodbye, World! Tidying Up \u00b6 At this point, we have written more code for our build system than we would have written in the terminal or shell to manually compile the code. The only advantage seems to be that we no longer have to remember the complicated commands for the manual compilation process. To further optimize the usage of the build system, let us tidy things up. First of all, all C++ header and source files use the same file extensions by our convention. If we give build2 this information, we are allowed to omit all file extensions in the buildfile . cxx{*}: extension = cpp hxx{*}: extension = hpp Now, take a look at the target definition in the code. exe{hello}: cxx{main} hxx{hello} cxx{hello} It still seems to be complicated. build2 offers us several alternative tweaks to optimize the writing of a buildfile . We can group multiple files of the same type by putting them in the same curly braces. exe{hello}: cxx{main hello} hxx{hello} If we have files with the same name of multiple types, we can even group the types of these files in some additional curly braces. exe{hello}: cxx{main} {hxx cxx}{hello} Furthermore, build2 allows the matching of arbitrary files in the current directory with a specific type by using the wildcard * . exe{hello}: hxx{*} cxx{*} Using the grouping of types, an even shorter version evolves. exe{hello}: {hxx cxx}{*} Moreover, this version catches new files in the source tree without explicitly adding them to the buildfile. This is a tremendous advantage in comparison to the manual compilation process. Last but not least, for the future, we would always like to use the latest C++ standard the current compiler implementation is able to provide. In general, this is not the default. We want to learn the modern approach of programming C++ and not stick to the old methods and workarounds. cxx.std = latest The actual buildfile then looks like this. # Set the C++ standard to latest version. cxx.std = latest # Tell the build system you want to compile C++ code. using cxx # Define the standard header and source file extensions of your project. hxx{*}: extension = hpp cxx{*}: extension = cpp # Define the executable 'hello' which depends on all # header and source files in the current directory. exe{hello}: {hxx cxx}{*} # Make sure, files can include themselves by using tags. cxx.poptions =+ \"-I$src_base\" Adding More Files to the Project \u00b6 Adding more files to the project can be considered a piece of cake. Think of a routine void test() declared in test.hpp and defined in test.cpp . // test.hpp #pragma once void test (); // test.cpp #include <test.hpp> #include <iostream> void test (){ std :: cout << \"This is a test message. \\n \" ; } This routine can simply be called in the main.cpp file. // main.cpp #include <iostream> #include <hello.hpp> #include <test.hpp> int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); say_bye (); test (); } Manual compilation involves changing the command line to the following expression. $ g++ -o hello main.cpp hello.cpp test.cpp -I. Compiling and running the code with the build2 build system looks again like the following. $ b c++ cxx{main} c++ cxx{hello} c++ cxx{test} ld exe{hello} $ ./hello Hello, World! Hello, World! Goodbye, World! This is a test message. References \u00b6 build2 Build System Manual","title":"9. Build System Basics"},{"location":"programming/c%2B%2B/course/09/#9-build-system-basics","text":"In this lesson, we want to learn about the basics of the build2 build system. Everything from this lesson and even more can also be read in the build2 build system manual .","title":"9. Build System Basics"},{"location":"programming/c%2B%2B/course/09/#starting-with-the-simple-project","text":"It is understandable that always starting with a bare-bones project becomes boring over time. But one has to consider the benefits of a completely understood procedure when adding external tools to the workflow. The typical hello-world program is not that exciting but this gives us the opportunity to concentrate on the scripting of our build system. $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics $ mkdir 07-build $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics 07-build $ cd 07-build $ pwd /home/lyrahgames/projects/cpp-course/07-build $ touch main.cpp $ ls main.cpp So, write the code which prints \"Hello, World!\". // main.cpp #include <iostream> int main (){ std :: cout << \"Hello, World! \\n \" ; } Typically, we would compile and run the given code by using the command lines below. $ g++ -o hello main.cpp $ ./hello Hello, World! Now, we would like to use the build system. At first, create a file, called buildfile . $ touch buildfile $ ls buildfile main.cpp Open the buildfile and add the lines written below. using cxx exe{hello}: cxx{main.cpp} The line using cxx in the buildfile tells build2 that we would like to compile C++ code and that it should use its C++ module to be able to do this. The second line exe{hello}: cxx{main.cpp} defines a so-called target exe{hello} to the left of the colons with its prerequisites cxx{main.cpp} to the right of the colons. Targets and prerequisites are defined by first using a type, like exe for executable or cxx for C++ source files, and then appending the file name in curly braces. The build2 build system then knows: To generate the executable file hello , it needs to compile the C++ source file main.cpp by using a C++ compiler and then link it. Comments can be started by using # . The beginning of a newline ends a comment. At first, the extra effort of writing a buildfile seems to be unnecessary complicated. But please note that the buildfile expresses the same information as the command-line approach. At this point, the build2 build system is able to find the buildfile . So your code should be compiled successfully when calling b . $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! b is the command in the shell which calls the build2 build system. The build2 toolchain mainly consists of three tools, the build system b , also known as build2, the package manager bpkg , and the dependency manager bdep . For this lesson, we will only need b . Running the build system again without changing anything will not recompile the code. build2 automatically checks if the prerequisites of any target have changed over time. $ b info: dir{./} is up to date To force a recompile, we first clean up all files generated by build2 by calling b clean . Then we can run b again. For the advanced user, this can also be achieved in one step by calling b {clean update} . $ ls buildfile main.cpp main.o main.d main.o.d hello $ b clean rm exe{hello} rm obje{main} $ ls buildfile main.cpp $ b c++ cxx{main} ld exe{hello}","title":"Starting with the Simple Project"},{"location":"programming/c%2B%2B/course/09/#adding-a-header-file","text":"We will now add a header file hello.hpp to our project which will provide the inline definition of the function void say_hello () . Please remember, every header file should start with #pragma once and the function has to be marked by inline because its definition is positioned in the header file. // hello.hpp #pragma once #include <iostream> inline void say_hello (){ std :: cout << \"Hello, World! \\n \" ; } Of course, the new routine should be called in the main.cpp file. // main.cpp #include <iostream> #include \"hello.hpp\" int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); } Compiling the program by using the command line does not change in comparison to the last attempt. Every header file is processed by the preprocessor and therefore not given as an actual argument to the compiler. $ g++ -o hello main.cpp $ ./hello Hello, World! Hello, World! This also is true for the buildfile . But build2 offers us a more consistent approach. We can directly state the dependence on a specific header file with the type hxx like we would do it for every other C++ source file with the type cxx . Besides the improved consistency, we will also gain other advantages and features which will be discussed later. The current buildfile is now slightly changed using cxx exe{hello}: cxx{main.cpp} hxx{hello.hpp} Again, compiling and running the program has not changed and keeps simple. $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! Hello, World!","title":"Adding a Header File"},{"location":"programming/c%2B%2B/course/09/#using-standard-include","text":"In the last projects, we always wanted to include other header files by using tags. So, we tweak the content of our main.cpp to reflect that decision. // main.cpp #include <iostream> #include <hello.hpp> int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); } For this small change, the command line must be altered to able to compile the program. $ g++ -o hello main.cpp -I. $ ./hello Hello, World! Hello, World! We also have to adjust the buildfile . Think about processing the given flag -I. . The preprocessor makes sure to add the given directory to its standard include paths. Hence, in build2, we call this a C++ preprocessor option and as a result, we use the cxx.poptions variable to set the according flag. In the command line above, the given path is a relative directory pointing to the current folder. The build2 build system does not use relative paths but gives us a variable src_base which resolves to the absolute path of the current folder when evaluated by $ . To prepend the flag to the variable, we write =+ . using cxx exe{hello}: cxx{main.cpp} hxx{hello.hpp} cxx.poptions =+ \"-I$src_base\" Compiling and running the code has not changed at all. $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! Hello, World!","title":"Using Standard Include"},{"location":"programming/c%2B%2B/course/09/#adding-another-source-file","text":"Let us add another function void say_bye () that will be defined in a separate source file hello.cpp . To be able to call this function from main.cpp , we first declare it inside our header file. This time an inline is not needed. // hello.hpp #pragma once #include <iostream> inline void say_hello (){ std :: cout << \"Hello, World! \\n \" ; } void say_bye (); The function must be defined in the according source file. Remember that an according source file should include the appropriate header file, even if we are only dealing with functions. // hello.cpp #include <hello.hpp> void say_bye (){ std :: cout << \"Goodbye, World! \\n \" ; } We want to use the new function in the main.cpp file. // main.cpp #include <iostream> #include <hello.hpp> int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); say_bye (); } The command-line compilation has to add the new source file to the call. $ g++ -o hello main.cpp hello.cpp -I. For the buildfile , it looks similar. Another simple cxx{hello.cpp} as a prerequisite to exe{hello} will be added. using cxx exe{hello}: cxx{main.cpp} hxx{hello.hpp} cxx{hello.cpp} cxx.poptions =+ \"-I$src_base\" Running and compiling still keeps the same. $ b c++ cxx{main} c++ cxx{hello} ld exe{hello} $ ./hello Hello, World! Hello, World! Goodbye, World!","title":"Adding another Source File"},{"location":"programming/c%2B%2B/course/09/#tidying-up","text":"At this point, we have written more code for our build system than we would have written in the terminal or shell to manually compile the code. The only advantage seems to be that we no longer have to remember the complicated commands for the manual compilation process. To further optimize the usage of the build system, let us tidy things up. First of all, all C++ header and source files use the same file extensions by our convention. If we give build2 this information, we are allowed to omit all file extensions in the buildfile . cxx{*}: extension = cpp hxx{*}: extension = hpp Now, take a look at the target definition in the code. exe{hello}: cxx{main} hxx{hello} cxx{hello} It still seems to be complicated. build2 offers us several alternative tweaks to optimize the writing of a buildfile . We can group multiple files of the same type by putting them in the same curly braces. exe{hello}: cxx{main hello} hxx{hello} If we have files with the same name of multiple types, we can even group the types of these files in some additional curly braces. exe{hello}: cxx{main} {hxx cxx}{hello} Furthermore, build2 allows the matching of arbitrary files in the current directory with a specific type by using the wildcard * . exe{hello}: hxx{*} cxx{*} Using the grouping of types, an even shorter version evolves. exe{hello}: {hxx cxx}{*} Moreover, this version catches new files in the source tree without explicitly adding them to the buildfile. This is a tremendous advantage in comparison to the manual compilation process. Last but not least, for the future, we would always like to use the latest C++ standard the current compiler implementation is able to provide. In general, this is not the default. We want to learn the modern approach of programming C++ and not stick to the old methods and workarounds. cxx.std = latest The actual buildfile then looks like this. # Set the C++ standard to latest version. cxx.std = latest # Tell the build system you want to compile C++ code. using cxx # Define the standard header and source file extensions of your project. hxx{*}: extension = hpp cxx{*}: extension = cpp # Define the executable 'hello' which depends on all # header and source files in the current directory. exe{hello}: {hxx cxx}{*} # Make sure, files can include themselves by using tags. cxx.poptions =+ \"-I$src_base\"","title":"Tidying Up"},{"location":"programming/c%2B%2B/course/09/#adding-more-files-to-the-project","text":"Adding more files to the project can be considered a piece of cake. Think of a routine void test() declared in test.hpp and defined in test.cpp . // test.hpp #pragma once void test (); // test.cpp #include <test.hpp> #include <iostream> void test (){ std :: cout << \"This is a test message. \\n \" ; } This routine can simply be called in the main.cpp file. // main.cpp #include <iostream> #include <hello.hpp> #include <test.hpp> int main (){ std :: cout << \"Hello, World! \\n \" ; say_hello (); say_bye (); test (); } Manual compilation involves changing the command line to the following expression. $ g++ -o hello main.cpp hello.cpp test.cpp -I. Compiling and running the code with the build2 build system looks again like the following. $ b c++ cxx{main} c++ cxx{hello} c++ cxx{test} ld exe{hello} $ ./hello Hello, World! Hello, World! Goodbye, World! This is a test message.","title":"Adding More Files to the Project"},{"location":"programming/c%2B%2B/course/09/#references","text":"build2 Build System Manual","title":"References"},{"location":"programming/c%2B%2B/course/10/","text":"10. Version Control \u00b6 We strongly recommend to at least read Chapter 1 and 2 of the official Git book and maybe the seven rules of a great Git commit message . Setup for the First Time \u00b6 $ git config --global user.name lyrahgames $ git config --global user.email lyrahgames@mailbox.org $ git config --global core.editor nano New Project \u00b6 $ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics 07-build $ mkdir 08-git $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics 07-build 08-git $ cd 08-git $ pwd /home/lyrahgames/projects/cpp-course/08-git Git Initialization \u00b6 $ git init Initialized empty Git repository in /home/lyrahgames/projects/cpp-course/08-git/.git/ Git created a new folder .git inside the current directory. Because of the preceding dot, this folder is typically hidden. To print it to the screen, we use an additional flag for ls . $ ls -a .git/ For now, the content of this folder is not interesting for us. Status \u00b6 $ git status On branch master No commits yet nothing to commit (create/copy files and use \"git add\" to track) Untracked Files \u00b6 $ touch main.cpp $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) main.cpp nothing added to commit but untracked files present (use \"git add\" to track) Preparing for Commit \u00b6 $ git add main.cpp $ git status On branch master No commits yet Changes to be committed: (use \"git rm --cached <file>...\" to unstage) new file: main.cpp Commit \u00b6 $ git commit -m \"Initial commit\" [master (root-commit) 63588d9] Initial commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 main.cpp Clean Repository and History \u00b6 $ git status On branch master nothing to commit, working tree clean $ git log commit 63588d9bb330ba9edb2d6f7bf664a445ec53a457 (HEAD -> master) Author: lyrahgames <lyrahgames@mailbox.org> Date: Tue Oct 20 20:11:10 2020 +0200 Initial commit Modified and Modified after Stage \u00b6 // main.cpp #include <iostream> int main (){ std :: cout << \"Hello, World! \\n \" ; } $ g++ -o hello main.cpp $ ./hello Hello, World! $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello no changes added to commit (use \"git add\" and/or \"git commit -a\") $ git add main.cpp $ git status On branch master Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello Change main.cpp again before committing. // main.cpp #include <iostream> int main (){ using namespace std ; cout << \"Hello, World! \\n \" ; } $ git status On branch master Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: main.cpp Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello git add adds a snapshot of the file at the time the command was called. If the file has changed after git add , it has to be added again. $ git add main.cpp $ git status On branch master Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello Now let us do another commit. $ git commit This one opens the nano editor. Type in your commit message. Printing the Log \u00b6 $ git log commit 37123eab509e177d2f7d7449b2dfde686bb8393a (HEAD -> master) Author: lyrahgames <lyrahgames@mailbox.org> Date: Tue Oct 20 20:35:27 2020 +0200 Add hello-world program commit 63588d9bb330ba9edb2d6f7bf664a445ec53a457 Author: lyrahgames <lyrahgames@mailbox.org> Date: Tue Oct 20 20:11:10 2020 +0200 Initial commit Checkout Other Commits \u00b6 $ git checkout 63588d Return to the last commit. $ git checkout master Ignoring Specific Files: Black and White Listing \u00b6 Let us now add a typical template buildfile from the last project to be able to automatically compile the program by using build2. $ touch buildfile cxx.std = latest using cxx hxx{*}: extension = hpp cxx{*}: extension = cpp exe{hello}: {hxx cxx}{*} cxx.poptions =+ \"-I$src_base\" Test the compilation. $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! $ git status On branch master Untracked files: (use \"git add <file>...\" to include in what will be committed) buildfile hello hello.d main.o main.o.d nothing added to commit but untracked files present (use \"git add\" to track) From these given files, only buildfile should be tracked by Git. To not always manually decide which files to add to the commit or the history, we will use a .gitignore file. $ touch .gitignore Black listing approach: List every file or file pattern you do not want to track. # .gitignore hello hello.d main.o main.o.d with patterns: # .gitignore hello *.d *.o Both of these files gives us the following output when git status is called. $ git status On branch master Untracked files: (use \"git add <file>...\" to include in what will be committed) .gitignore buildfile nothing added to commit but untracked files present (use \"git add\" to track) Black listing, in my opinion is not ideal. Therefore we will use white listing. We will first ignore every possible file by using * and invert ignoring files by using ! . #.gitignore # Ignore everything. * # Allow any subfolder. !*/ # Allow C++ header and source files. !*.hpp !*.cpp # Allow build2 buildfiles. !buildfile # Allow .gitignore file. !.gitignore Now make the commit by adding everything that is not ignored. $ git add . $ git commit References \u00b6 Git Official Git Book How to Write a Git Commit Message","title":"10. Version Control"},{"location":"programming/c%2B%2B/course/10/#10-version-control","text":"We strongly recommend to at least read Chapter 1 and 2 of the official Git book and maybe the seven rules of a great Git commit message .","title":"10. Version Control"},{"location":"programming/c%2B%2B/course/10/#setup-for-the-first-time","text":"$ git config --global user.name lyrahgames $ git config --global user.email lyrahgames@mailbox.org $ git config --global core.editor nano","title":"Setup for the First Time"},{"location":"programming/c%2B%2B/course/10/#new-project","text":"$ pwd /home/lyrahgames/projects/cpp-course $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics 07-build $ mkdir 08-git $ ls 01-hello 02-input 03-fibonacci 04-files 05-rational 06-graphics 07-build 08-git $ cd 08-git $ pwd /home/lyrahgames/projects/cpp-course/08-git","title":"New Project"},{"location":"programming/c%2B%2B/course/10/#git-initialization","text":"$ git init Initialized empty Git repository in /home/lyrahgames/projects/cpp-course/08-git/.git/ Git created a new folder .git inside the current directory. Because of the preceding dot, this folder is typically hidden. To print it to the screen, we use an additional flag for ls . $ ls -a .git/ For now, the content of this folder is not interesting for us.","title":"Git Initialization"},{"location":"programming/c%2B%2B/course/10/#status","text":"$ git status On branch master No commits yet nothing to commit (create/copy files and use \"git add\" to track)","title":"Status"},{"location":"programming/c%2B%2B/course/10/#untracked-files","text":"$ touch main.cpp $ git status On branch master No commits yet Untracked files: (use \"git add <file>...\" to include in what will be committed) main.cpp nothing added to commit but untracked files present (use \"git add\" to track)","title":"Untracked Files"},{"location":"programming/c%2B%2B/course/10/#preparing-for-commit","text":"$ git add main.cpp $ git status On branch master No commits yet Changes to be committed: (use \"git rm --cached <file>...\" to unstage) new file: main.cpp","title":"Preparing for Commit"},{"location":"programming/c%2B%2B/course/10/#commit","text":"$ git commit -m \"Initial commit\" [master (root-commit) 63588d9] Initial commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 main.cpp","title":"Commit"},{"location":"programming/c%2B%2B/course/10/#clean-repository-and-history","text":"$ git status On branch master nothing to commit, working tree clean $ git log commit 63588d9bb330ba9edb2d6f7bf664a445ec53a457 (HEAD -> master) Author: lyrahgames <lyrahgames@mailbox.org> Date: Tue Oct 20 20:11:10 2020 +0200 Initial commit","title":"Clean Repository and History"},{"location":"programming/c%2B%2B/course/10/#modified-and-modified-after-stage","text":"// main.cpp #include <iostream> int main (){ std :: cout << \"Hello, World! \\n \" ; } $ g++ -o hello main.cpp $ ./hello Hello, World! $ git status On branch master Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello no changes added to commit (use \"git add\" and/or \"git commit -a\") $ git add main.cpp $ git status On branch master Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello Change main.cpp again before committing. // main.cpp #include <iostream> int main (){ using namespace std ; cout << \"Hello, World! \\n \" ; } $ git status On branch master Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: main.cpp Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git restore <file>...\" to discard changes in working directory) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello git add adds a snapshot of the file at the time the command was called. If the file has changed after git add , it has to be added again. $ git add main.cpp $ git status On branch master Changes to be committed: (use \"git restore --staged <file>...\" to unstage) modified: main.cpp Untracked files: (use \"git add <file>...\" to include in what will be committed) hello Now let us do another commit. $ git commit This one opens the nano editor. Type in your commit message.","title":"Modified and Modified after Stage"},{"location":"programming/c%2B%2B/course/10/#printing-the-log","text":"$ git log commit 37123eab509e177d2f7d7449b2dfde686bb8393a (HEAD -> master) Author: lyrahgames <lyrahgames@mailbox.org> Date: Tue Oct 20 20:35:27 2020 +0200 Add hello-world program commit 63588d9bb330ba9edb2d6f7bf664a445ec53a457 Author: lyrahgames <lyrahgames@mailbox.org> Date: Tue Oct 20 20:11:10 2020 +0200 Initial commit","title":"Printing the Log"},{"location":"programming/c%2B%2B/course/10/#checkout-other-commits","text":"$ git checkout 63588d Return to the last commit. $ git checkout master","title":"Checkout Other Commits"},{"location":"programming/c%2B%2B/course/10/#ignoring-specific-files-black-and-white-listing","text":"Let us now add a typical template buildfile from the last project to be able to automatically compile the program by using build2. $ touch buildfile cxx.std = latest using cxx hxx{*}: extension = hpp cxx{*}: extension = cpp exe{hello}: {hxx cxx}{*} cxx.poptions =+ \"-I$src_base\" Test the compilation. $ b c++ cxx{main} ld exe{hello} $ ./hello Hello, World! $ git status On branch master Untracked files: (use \"git add <file>...\" to include in what will be committed) buildfile hello hello.d main.o main.o.d nothing added to commit but untracked files present (use \"git add\" to track) From these given files, only buildfile should be tracked by Git. To not always manually decide which files to add to the commit or the history, we will use a .gitignore file. $ touch .gitignore Black listing approach: List every file or file pattern you do not want to track. # .gitignore hello hello.d main.o main.o.d with patterns: # .gitignore hello *.d *.o Both of these files gives us the following output when git status is called. $ git status On branch master Untracked files: (use \"git add <file>...\" to include in what will be committed) .gitignore buildfile nothing added to commit but untracked files present (use \"git add\" to track) Black listing, in my opinion is not ideal. Therefore we will use white listing. We will first ignore every possible file by using * and invert ignoring files by using ! . #.gitignore # Ignore everything. * # Allow any subfolder. !*/ # Allow C++ header and source files. !*.hpp !*.cpp # Allow build2 buildfiles. !buildfile # Allow .gitignore file. !.gitignore Now make the commit by adding everything that is not ignored. $ git add . $ git commit","title":"Ignoring Specific Files: Black and White Listing"},{"location":"programming/c%2B%2B/course/10/#references","text":"Git Official Git Book How to Write a Git Commit Message","title":"References"},{"location":"programming/c%2B%2B/course/11/","text":"11. GitHub as Git Hosting Platform \u00b6","title":"11. GitHub as Git Hosting Platform"},{"location":"programming/c%2B%2B/course/11/#11-github-as-git-hosting-platform","text":"","title":"11. GitHub as Git Hosting Platform"},{"location":"programming/c%2B%2B/course/12/","text":"12. Monte-Carlo \u03c0 \u00b6 In the last few sections, we have introduced the tools for a basic toolchain every C++ project will eventually need. But even for a basic toolchain, it seemed to be overwhelming. Hence, we will use the next project to actually get back to rules and learn how to integrate those tools in our workflow without thinking too much about them. For this, we will get our hands on random numbers and in the next lesson on time measurement facilities. It seems to be weird, to use random numbers in a computer program and the question arises, why we would actually care about them. Indeed, the topic of random number generation is not simple. The answer lies again in mathematics. Using probability and complexity theory, it can be shown that algorithms using random numbers are sometimes much more efficient than their deterministic counterparts. Let us get clear on the technical terms. We call an algorithm which somehow uses random numbers a Monte-Carlo algorithm. All other algorithms are called deterministic algorithms. This is based on a simple but powerful observation. Deterministic algorithms will at all times give you the same output for the same input value. On the other hand, every call of a Monte-Carlo algorithm may return a slightly changed end result which approximates the actual solution to a problem. Random Numbers and the Estimation of \u03c0 \u00b6 To get in touch with Monte-Carlo algorithms, we will implement the \"Hello, World!\" example of randomized algorithms. We will try to estimate \\(\\pi\\) . Take a look at the image and consider the upper-right sector of the unit circle. The area \\(A\\) of a circle with radius \\(r\\) is given by a simple formula. \\[ A = \\pi r^2 \\] For the upper-right sector of the unit circle, the radius \\(r=1\\) and the area is reduced by \\(4\\) . As a result, the area of this sector, let us call it \\(A_\\circ\\) , is then given as follows. \\[ A_\\circ = \\frac{\\pi}{4} \\] This formula gives you the feeling that we already know \\(\\pi\\) . But currently, there is no way to compute the area of the circle. Now, consider the bounding unit square in the image. Obviously, its area is \\(1\\) . If there is a routine in our program, like random () , which allows us to draw a random number uniformly distributed in the interval \\([0,1]\\) , then we can easily generate uniformly distributed random points in the unit square by calling random () once for the \\(x\\) coordinate of the point and once for the \\(y\\) coordinate of the point. Uniformly distributed in this sense means that every possible value has the same probability to be generated. You have to think of the function random () as an oracle which magically tells you \"the right\" random numbers when you ask it. To this point, we have no clue on how to guess the area \\(A_\\circ\\) . But there is a straightforward characteristic of the circle which can be used. The distance to the origin \\(d\\) for every point \\(p\\) that lies in the circle has to be smaller than its radius, here \\(1\\) . This distance can be computed by the famous Pythagorean theorem. \\[ d = \\sqrt{p_x^2 + p_y^2} \\] The idea is to count the number \\(n_\\circ\\) of randomly generated points that lie inside the circle. We will then relate the quotient of the number \\(n_\\circ\\) of points inside the circle and the whole number \\(n\\) of points to the quotient of their respective areas \\(A_\\circ\\) and \\(A_\\square\\) . Because the area of the square is \\(1\\) , the \"equation\" would look like the following. \\[ \\frac{n_\\circ}{n} \\stackrel{\\sim}{=} \\frac{A_\\circ}{A_\\square} = \\frac{\\pi}{4} \\] Of course, this statement is not a real equation. We are not allowed to construct equations how we would like them to be. But in probability theory, the variable \\(\\frac{n_\\circ}{n}\\) is typically seen as a random variable with an abstract expectation value. To not go into too much details, it can be shown that in a statistical sense for a very large amount of points \\(n\\) this variable indeed approaches the value of \\(\\frac{\\pi}{4}\\) . So, for us, this means, we will generate a huge amount of random points in the square and test them if they are lying inside the circle. Getting the number of points inside the circle will then allow us to provide an estimation of \\(\\pi\\) . Starting a New Project with Other Tools in Mind \u00b6 After this small excursion in the theory of Monte-Carlo methods, let us start a new project. This time, we will directly start with Git. $ git init monte-carlo-pi $ cd monte-carlo-pi We have created a new repository for our project. This should always be the starting point. But for the next few thoughts, we can forget about Git. We will only use it when we really need it. For nearly all C++ projects, the focus should lie on the development of the C++ code itself. So please, create a main.cpp file. $ touch main.cpp It sounds a little bit silly, but to test if everything on the computer is working fine, let us start AGAIN with a \"Hello, World!\" program. main.cpp #include <iostream> using namespace std ; int main (){ cout << \"Hello, World! \\n \" ; } Compile and run it. $ g++ -o main main.cpp $ ./main Hello, World! Let us now start with the generation of random numbers. The header file random of the C++ standard template library already gives us a lots of facilities to generate them. main.cpp #include <iostream> #include <random> using namespace std ; int main () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist { 0 , 1 }; const int n = 10 ; for ( int i = 0 ; i < n ; ++ i ) cout << dist ( rng ) << '\\n' ; } Now, that is a lot. We will go through every detail but first compile and run the code to make sure there are no typos. $ g++ -o main main.cpp $ ./main 0.864357 0.523781 0.276156 0.33275 0.397129 0.407622 0.519735 0.187027 0.568677 0.923395 When running the program it outputs ten random numbers uniformly distributed in the interval \\([0,1]\\) . Hopefully, every time the program is called, different random numbers should appear. This is the typical characteristic of our oracle routine. So, what happens here? For this, we need to understand how the computer is generating random numbers. The process is separated into three stages. The first one attains a so-called seed, an initial value that should be truly random. Truly random means that this value typically results from a chaotic physical process, such as temperature fluctuations. At this point, we could ask why we do even bother with two other stages when we already got a possibility to draw truly random numbers. The true random number generators built into a computer are typically much too slow for Monte-Carlo simulations. Furthermore, there are other reasons why we would not like to have only truly random numbers. In C++, we do this by constructing an object rd of type random_device and by using its function operator. The second stage is a so-called pseudorandom number generator because it computes random numbers based on an algorithm which are then by definition not truly random. But the algorithm is designed to be in some sense unpredictable and to generate a sequence of numbers which is hard to distinguish from a truly random sequence of numbers. And as said before, a pseudorandom number generator can generate \"random\" numbers much faster. Nevertheless, the pseuderandom number generator uses the truly random seed from the first stage to introduce actual randomness in its own output. But it is expanding this randomness from one value to a whole sequence of values. In C++, one typically uses the Mersenne twister which is de-facto standard of pseudorandom number generators. We construct an object rng of type mt19937 and initialize it with a value from rd by calling rd() . At this point, we can forget about rd . Last but not least, we have to consider the third stage. Until now, the random number generators are only working with abstract integer numbers that have nothing in common with real numbers uniformly distributed in \\([0,1]\\) . As a consequence, in most cases, we have to use distributions. They are providing a transformation from those abstract integral numbers to our target domain. In C++, many distributions are possible and not only the uniform distribution. But we will only construct an object dist of type uniform_real_distribution<float> . The arguments provide the interval for random numbers. Please note, we do not use any seed value or random number from the other two stages. The distribution has to be applied every time we want to get random numbers from rng . Hence, we construct a random number by calling dist(rng) . Now, we have cleared one goal for our new project: To successfully generate random numbers. Let us seal the deal by making a commit to have a backup if something in the future goes wrong. Currently, there is no need for .gitignore file. Let us only add the newly created main.cpp file. $ git status # optional $ git add main.cpp $ git status # optional $ git commit -m \"Initial commit\" $ git status # optional $ git log # optional Again, we have used Git at the right time only for a short moment and are now forgetting about it again. Let us head over to the next part. Lambda Expression as Simplification \u00b6 In C++, our current oracle function is not straightforward to use. We have to remember that a distribution, like dist , only transforms a given random number to our target domain. Putting rng in the function operator of dist , we can imagine that dist draws an abstract integral number from rng by using (again) the function operator rng() , performs the according transformation, and outputs the result to the user. As a consequence, we have to generate a new random number by calling dist(rng) . In my opinion, this seems to be a little bit counter-intuitive. To make the code more readable, we would like to use a function, like random() . You already know about functions and therefore you should be able to implement a function with such a property. But there are some peculiarities. Consider the following function implementation. float random () { return dist ( rng ); } This will definitely not compile because for the function random the variables dist and rng are unknown. So you could to do the following. float random () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist {}; return dist ( rng ); } This code results in no compiler error but will completely mess up your random number generation process. Remember, we want to construct a variable of type mt19937 only once to take advantage of its speed and the properties of its pseudorandom number sequence. The code above not only eradicates all speed advantages by constructing and seeding the pseudorandom number generator all over again every time we call the function. Furthermore, it also destroys all properties of the generated sequence of pseudorandom numbers that make them somehow indistinguishable from truly random numbers. There are of course multiple solutions to this problem. We could define the variables rng and dist in the global namespace of C++. random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist {}; // ... float random () { return dist ( rng ); } Now, every function can see these variables and therefore it is considered to be a bad solution. Let us think about a more advanced feature of the C++ language to solve this problem. Lambda expressions are unnamed functions with a state which can be defined in any expression. You have to understand them as variables with the type of a function. This is exactly what we need to overcome the global definition problem. We will use a lambda expression inside the main function instead of a global function. main.cpp #include <iostream> #include <random> using namespace std ; int main () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist { 0 , 1 }; const auto random = [ & ]() { return dist ( rng ); }; const int n = 10 ; for ( int i = 0 ; i < n ; ++ i ) cout << random () << '\\n' ; } In this code, [ & ]() { return dist ( rng ); } is the actual lambda expression which defines an in-place function inside the main routine. Because there is there is no name for a lambda expression, another syntax in C++ has to be used. Lambdas are introduced by box brackets [] with no content or some other characters, such as [&] in our case. After those box brackets, we can think of it as every other function definition. In parentheses ( and ) , we provide the parameters of the function. And in the curly braces { and } , we provide its implementation. The C++ compiler is able to automatically deduce the return of a lambda expression. Therefore no return type is provided at the beginning. The ampersand inside the box brackets means that the state of the lambda expression captures all until this moment defined variables inside the main function. Because of this, the lambda expression knows about rng and dist . Now, there would be one last problem. A function without any name cannot be called by the user but only from the compiler. Accordingly, we use a variable random to explicitly name the lambda expression. Again, the type of random will automatically deduced by the compiler. In the last part of the main routine, we are then able to use random as a function by calling random() . Please, commit the latest changes with Git by the commands given above and provide and appropriate commit message, like \"Use lambda expression for random numbers\". Estimating \u03c0 \u00b6 After the generation of random numbers, the actual algorithm for estimating \\(\\pi\\) can directly be implemented. #include <iostream> #include <random> using namespace std ; int main () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist { 0 , 1 }; const auto random = [ & ]() { return dist ( rng ); }; const int n = 10 ' 000 ' 000 ; int c = 0 ; for ( int i = 0 ; i < n ; ++ i ){ auto x = random (); auto y = random (); auto r2 = x * x + y * y ; if ( r2 < 1 ) ++ c ; } auto pi = 4 * float ( c ) / float ( n ); cout << \"pi = \" << pi << '\\n' ; } The variable c counts the number of points inside the unit circle. n stands for count of all points. We only compute the squared distance of all points. This makes sure, we do not have to compute the square root. The inequality does not change. Furthermore, we have used integers of type int to count the amount of points. A division between int means integer division. So, we explicitly transform both integers to a floating-point value of type float . Please, commit the latest changes with Git by the commands given above and provide and appropriate commit message, like \"Add Monte-Carlo pi computation\". Tweaking the Program \u00b6 No program is ever perfect. But there are now some obvious possibilities to tweak the code slightly. main.cpp #include <iostream> #include <random> using namespace std ; int main () { mt19937 rng { random_device {}()}; uniform_real_distribution < float > dist { 0 , 1 }; const auto random = [ & ]() { return dist ( rng ); }; const int n = 10 ' 000 ' 000 ; int c = 0 ; for ( int i = 0 ; i < n ; ++ i ){ const auto x = random (); const auto y = random (); if ( x * x + y * y < 1 ) ++ c ; } const auto pi = 4.0f * c / n ; cout << \"pi = \" << pi << '\\n' ; } Every variable, that is initialized when defined and never changed, should typically be declared const . This gives the compiler more freedom to optimize the code. To shorten the code, we can remove explicitly defined temporary variables, like rd and r2 . Instead, the code now directly constructs those data inside the expressions. Additionally, the explicit type casting (also type conversion) from int to float can removed by relying on a neat trick. The literal 4 from the program before introduces a new integer number to the program. Here, we have changed the literal to 4.0f which introduces a float . Every int that is multiplied with float is implicitly converted to float . The same is true for division, addition, and subtraction. Please, commit the latest changes with Git by the commands given above and provide and appropriate commit message, like \"Tweak the code\".","title":"12. Monte-Carlo \u03c0"},{"location":"programming/c%2B%2B/course/12/#12-monte-carlo","text":"In the last few sections, we have introduced the tools for a basic toolchain every C++ project will eventually need. But even for a basic toolchain, it seemed to be overwhelming. Hence, we will use the next project to actually get back to rules and learn how to integrate those tools in our workflow without thinking too much about them. For this, we will get our hands on random numbers and in the next lesson on time measurement facilities. It seems to be weird, to use random numbers in a computer program and the question arises, why we would actually care about them. Indeed, the topic of random number generation is not simple. The answer lies again in mathematics. Using probability and complexity theory, it can be shown that algorithms using random numbers are sometimes much more efficient than their deterministic counterparts. Let us get clear on the technical terms. We call an algorithm which somehow uses random numbers a Monte-Carlo algorithm. All other algorithms are called deterministic algorithms. This is based on a simple but powerful observation. Deterministic algorithms will at all times give you the same output for the same input value. On the other hand, every call of a Monte-Carlo algorithm may return a slightly changed end result which approximates the actual solution to a problem.","title":"12. Monte-Carlo \u03c0"},{"location":"programming/c%2B%2B/course/12/#random-numbers-and-the-estimation-of","text":"To get in touch with Monte-Carlo algorithms, we will implement the \"Hello, World!\" example of randomized algorithms. We will try to estimate \\(\\pi\\) . Take a look at the image and consider the upper-right sector of the unit circle. The area \\(A\\) of a circle with radius \\(r\\) is given by a simple formula. \\[ A = \\pi r^2 \\] For the upper-right sector of the unit circle, the radius \\(r=1\\) and the area is reduced by \\(4\\) . As a result, the area of this sector, let us call it \\(A_\\circ\\) , is then given as follows. \\[ A_\\circ = \\frac{\\pi}{4} \\] This formula gives you the feeling that we already know \\(\\pi\\) . But currently, there is no way to compute the area of the circle. Now, consider the bounding unit square in the image. Obviously, its area is \\(1\\) . If there is a routine in our program, like random () , which allows us to draw a random number uniformly distributed in the interval \\([0,1]\\) , then we can easily generate uniformly distributed random points in the unit square by calling random () once for the \\(x\\) coordinate of the point and once for the \\(y\\) coordinate of the point. Uniformly distributed in this sense means that every possible value has the same probability to be generated. You have to think of the function random () as an oracle which magically tells you \"the right\" random numbers when you ask it. To this point, we have no clue on how to guess the area \\(A_\\circ\\) . But there is a straightforward characteristic of the circle which can be used. The distance to the origin \\(d\\) for every point \\(p\\) that lies in the circle has to be smaller than its radius, here \\(1\\) . This distance can be computed by the famous Pythagorean theorem. \\[ d = \\sqrt{p_x^2 + p_y^2} \\] The idea is to count the number \\(n_\\circ\\) of randomly generated points that lie inside the circle. We will then relate the quotient of the number \\(n_\\circ\\) of points inside the circle and the whole number \\(n\\) of points to the quotient of their respective areas \\(A_\\circ\\) and \\(A_\\square\\) . Because the area of the square is \\(1\\) , the \"equation\" would look like the following. \\[ \\frac{n_\\circ}{n} \\stackrel{\\sim}{=} \\frac{A_\\circ}{A_\\square} = \\frac{\\pi}{4} \\] Of course, this statement is not a real equation. We are not allowed to construct equations how we would like them to be. But in probability theory, the variable \\(\\frac{n_\\circ}{n}\\) is typically seen as a random variable with an abstract expectation value. To not go into too much details, it can be shown that in a statistical sense for a very large amount of points \\(n\\) this variable indeed approaches the value of \\(\\frac{\\pi}{4}\\) . So, for us, this means, we will generate a huge amount of random points in the square and test them if they are lying inside the circle. Getting the number of points inside the circle will then allow us to provide an estimation of \\(\\pi\\) .","title":"Random Numbers and the Estimation of \u03c0"},{"location":"programming/c%2B%2B/course/12/#starting-a-new-project-with-other-tools-in-mind","text":"After this small excursion in the theory of Monte-Carlo methods, let us start a new project. This time, we will directly start with Git. $ git init monte-carlo-pi $ cd monte-carlo-pi We have created a new repository for our project. This should always be the starting point. But for the next few thoughts, we can forget about Git. We will only use it when we really need it. For nearly all C++ projects, the focus should lie on the development of the C++ code itself. So please, create a main.cpp file. $ touch main.cpp It sounds a little bit silly, but to test if everything on the computer is working fine, let us start AGAIN with a \"Hello, World!\" program. main.cpp #include <iostream> using namespace std ; int main (){ cout << \"Hello, World! \\n \" ; } Compile and run it. $ g++ -o main main.cpp $ ./main Hello, World! Let us now start with the generation of random numbers. The header file random of the C++ standard template library already gives us a lots of facilities to generate them. main.cpp #include <iostream> #include <random> using namespace std ; int main () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist { 0 , 1 }; const int n = 10 ; for ( int i = 0 ; i < n ; ++ i ) cout << dist ( rng ) << '\\n' ; } Now, that is a lot. We will go through every detail but first compile and run the code to make sure there are no typos. $ g++ -o main main.cpp $ ./main 0.864357 0.523781 0.276156 0.33275 0.397129 0.407622 0.519735 0.187027 0.568677 0.923395 When running the program it outputs ten random numbers uniformly distributed in the interval \\([0,1]\\) . Hopefully, every time the program is called, different random numbers should appear. This is the typical characteristic of our oracle routine. So, what happens here? For this, we need to understand how the computer is generating random numbers. The process is separated into three stages. The first one attains a so-called seed, an initial value that should be truly random. Truly random means that this value typically results from a chaotic physical process, such as temperature fluctuations. At this point, we could ask why we do even bother with two other stages when we already got a possibility to draw truly random numbers. The true random number generators built into a computer are typically much too slow for Monte-Carlo simulations. Furthermore, there are other reasons why we would not like to have only truly random numbers. In C++, we do this by constructing an object rd of type random_device and by using its function operator. The second stage is a so-called pseudorandom number generator because it computes random numbers based on an algorithm which are then by definition not truly random. But the algorithm is designed to be in some sense unpredictable and to generate a sequence of numbers which is hard to distinguish from a truly random sequence of numbers. And as said before, a pseudorandom number generator can generate \"random\" numbers much faster. Nevertheless, the pseuderandom number generator uses the truly random seed from the first stage to introduce actual randomness in its own output. But it is expanding this randomness from one value to a whole sequence of values. In C++, one typically uses the Mersenne twister which is de-facto standard of pseudorandom number generators. We construct an object rng of type mt19937 and initialize it with a value from rd by calling rd() . At this point, we can forget about rd . Last but not least, we have to consider the third stage. Until now, the random number generators are only working with abstract integer numbers that have nothing in common with real numbers uniformly distributed in \\([0,1]\\) . As a consequence, in most cases, we have to use distributions. They are providing a transformation from those abstract integral numbers to our target domain. In C++, many distributions are possible and not only the uniform distribution. But we will only construct an object dist of type uniform_real_distribution<float> . The arguments provide the interval for random numbers. Please note, we do not use any seed value or random number from the other two stages. The distribution has to be applied every time we want to get random numbers from rng . Hence, we construct a random number by calling dist(rng) . Now, we have cleared one goal for our new project: To successfully generate random numbers. Let us seal the deal by making a commit to have a backup if something in the future goes wrong. Currently, there is no need for .gitignore file. Let us only add the newly created main.cpp file. $ git status # optional $ git add main.cpp $ git status # optional $ git commit -m \"Initial commit\" $ git status # optional $ git log # optional Again, we have used Git at the right time only for a short moment and are now forgetting about it again. Let us head over to the next part.","title":"Starting a New Project with Other Tools in Mind"},{"location":"programming/c%2B%2B/course/12/#lambda-expression-as-simplification","text":"In C++, our current oracle function is not straightforward to use. We have to remember that a distribution, like dist , only transforms a given random number to our target domain. Putting rng in the function operator of dist , we can imagine that dist draws an abstract integral number from rng by using (again) the function operator rng() , performs the according transformation, and outputs the result to the user. As a consequence, we have to generate a new random number by calling dist(rng) . In my opinion, this seems to be a little bit counter-intuitive. To make the code more readable, we would like to use a function, like random() . You already know about functions and therefore you should be able to implement a function with such a property. But there are some peculiarities. Consider the following function implementation. float random () { return dist ( rng ); } This will definitely not compile because for the function random the variables dist and rng are unknown. So you could to do the following. float random () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist {}; return dist ( rng ); } This code results in no compiler error but will completely mess up your random number generation process. Remember, we want to construct a variable of type mt19937 only once to take advantage of its speed and the properties of its pseudorandom number sequence. The code above not only eradicates all speed advantages by constructing and seeding the pseudorandom number generator all over again every time we call the function. Furthermore, it also destroys all properties of the generated sequence of pseudorandom numbers that make them somehow indistinguishable from truly random numbers. There are of course multiple solutions to this problem. We could define the variables rng and dist in the global namespace of C++. random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist {}; // ... float random () { return dist ( rng ); } Now, every function can see these variables and therefore it is considered to be a bad solution. Let us think about a more advanced feature of the C++ language to solve this problem. Lambda expressions are unnamed functions with a state which can be defined in any expression. You have to understand them as variables with the type of a function. This is exactly what we need to overcome the global definition problem. We will use a lambda expression inside the main function instead of a global function. main.cpp #include <iostream> #include <random> using namespace std ; int main () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist { 0 , 1 }; const auto random = [ & ]() { return dist ( rng ); }; const int n = 10 ; for ( int i = 0 ; i < n ; ++ i ) cout << random () << '\\n' ; } In this code, [ & ]() { return dist ( rng ); } is the actual lambda expression which defines an in-place function inside the main routine. Because there is there is no name for a lambda expression, another syntax in C++ has to be used. Lambdas are introduced by box brackets [] with no content or some other characters, such as [&] in our case. After those box brackets, we can think of it as every other function definition. In parentheses ( and ) , we provide the parameters of the function. And in the curly braces { and } , we provide its implementation. The C++ compiler is able to automatically deduce the return of a lambda expression. Therefore no return type is provided at the beginning. The ampersand inside the box brackets means that the state of the lambda expression captures all until this moment defined variables inside the main function. Because of this, the lambda expression knows about rng and dist . Now, there would be one last problem. A function without any name cannot be called by the user but only from the compiler. Accordingly, we use a variable random to explicitly name the lambda expression. Again, the type of random will automatically deduced by the compiler. In the last part of the main routine, we are then able to use random as a function by calling random() . Please, commit the latest changes with Git by the commands given above and provide and appropriate commit message, like \"Use lambda expression for random numbers\".","title":"Lambda Expression as Simplification"},{"location":"programming/c%2B%2B/course/12/#estimating","text":"After the generation of random numbers, the actual algorithm for estimating \\(\\pi\\) can directly be implemented. #include <iostream> #include <random> using namespace std ; int main () { random_device rd {}; mt19937 rng { rd ()}; uniform_real_distribution < float > dist { 0 , 1 }; const auto random = [ & ]() { return dist ( rng ); }; const int n = 10 ' 000 ' 000 ; int c = 0 ; for ( int i = 0 ; i < n ; ++ i ){ auto x = random (); auto y = random (); auto r2 = x * x + y * y ; if ( r2 < 1 ) ++ c ; } auto pi = 4 * float ( c ) / float ( n ); cout << \"pi = \" << pi << '\\n' ; } The variable c counts the number of points inside the unit circle. n stands for count of all points. We only compute the squared distance of all points. This makes sure, we do not have to compute the square root. The inequality does not change. Furthermore, we have used integers of type int to count the amount of points. A division between int means integer division. So, we explicitly transform both integers to a floating-point value of type float . Please, commit the latest changes with Git by the commands given above and provide and appropriate commit message, like \"Add Monte-Carlo pi computation\".","title":"Estimating \u03c0"},{"location":"programming/c%2B%2B/course/12/#tweaking-the-program","text":"No program is ever perfect. But there are now some obvious possibilities to tweak the code slightly. main.cpp #include <iostream> #include <random> using namespace std ; int main () { mt19937 rng { random_device {}()}; uniform_real_distribution < float > dist { 0 , 1 }; const auto random = [ & ]() { return dist ( rng ); }; const int n = 10 ' 000 ' 000 ; int c = 0 ; for ( int i = 0 ; i < n ; ++ i ){ const auto x = random (); const auto y = random (); if ( x * x + y * y < 1 ) ++ c ; } const auto pi = 4.0f * c / n ; cout << \"pi = \" << pi << '\\n' ; } Every variable, that is initialized when defined and never changed, should typically be declared const . This gives the compiler more freedom to optimize the code. To shorten the code, we can remove explicitly defined temporary variables, like rd and r2 . Instead, the code now directly constructs those data inside the expressions. Additionally, the explicit type casting (also type conversion) from int to float can removed by relying on a neat trick. The literal 4 from the program before introduces a new integer number to the program. Here, we have changed the literal to 4.0f which introduces a float . Every int that is multiplied with float is implicitly converted to float . The same is true for division, addition, and subtraction. Please, commit the latest changes with Git by the commands given above and provide and appropriate commit message, like \"Tweak the code\".","title":"Tweaking the Program"},{"location":"server/nextcloud_with_nginx_reverse_proxy/","text":"Set Up Nextcloud with NGINX Reverse Proxy \u00b6 This is for private use. Therefore we have to ask when we should use Docker and when we should keep the old style of installing our programs to the bare-metal server. We have decided to directly install the NGINX reverse proxy on the server itself. Every service itself will run in a Docker container. Port Forwarding \u00b6 LetsEncrypt SSL Certificates \u00b6 Let's Encrypt is a free, automated, and open certificate authority (CA). It is a service provided by the Internet Security Research Group (ISRG) to give people the digital certificates they need in order to enable HTTPS (SSL/TLS) for websites, for free. Certbot is a free, open source software tool for automatically using Let's Encrypt certificates on manually-administrated websites. To make sure we understand every step, we only generated the certificate and do the configurations by ourselves. sudo certbot certonly --standalone If we already have a web server running and do not want to quit it, then we will use the following command. sudo certbot certonly --webroot TODO: Automatic Renewal NGINX Reverse Proxy \u00b6 sudo pacman -S nginx sudo systemctl enable --now nginx Substitute your hostname, such as example.com , with <your_hostname> . server { listen 80; server_name <your_hostname>; return 301 https://<your_hostname>$request_uri; } server { listen 443 ssl; server_name <your_hostname>; ssl_certificate /etc/letsencrypt/live/<your_hostname>/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/<your_hostname>/privkey.pem; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; location /nextcloud { proxy_pass http://localhost:8080; rewrite /nextcloud/(.*) /$1 break; } } Think about maximal upload file size. Measure internal file upload vs external file upload. Make sure not to use internet connection internally. Nextcloud in Docker Container \u00b6 docker-compose.yml file version : '2' volumes : nextcloud : db : services : db : image : mariadb command : --transaction-isolation=READ-COMMITTED --binlog-format=ROW restart : always volumes : - db:/var/lib/mysql environment : - MYSQL_ROOT_PASSWORD=nextcloud - MYSQL_PASSWORD=nextcloud - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud app : image : nextcloud:latest ports : - 8080:80 links : - db depends_on : - db volumes : - nextcloud:/var/www/html environment : - APACHE_DISABLE_REWRITE_IP=1 - TRUSTED_PROXIES=localhost - OVERWRITEWEBROOT=/nextcloud restart : always TURN Server for Nextcloud Talk \u00b6 sudo pacman -S install coturn sudo sed -i '/TURNSERVER_ENABLED/c\\TURNSERVER_ENABLED=1' /etc/default/coturn /etc/turnserver.conf listening-port=3478 fingerprint lt-cred-mech # Only on coTURN below v4.5.0.8! use-auth-secret static-auth-secret=<secretSecret> realm=your.domain.org total-quota=100 bps-capacity=0 stale-nonce no-loopback-peers # Only on coTURN below v4.5.1.0! no-multicast-peers systemctl restart coturn","title":"Set Up Nextcloud with NGINX Reverse Proxy"},{"location":"server/nextcloud_with_nginx_reverse_proxy/#set-up-nextcloud-with-nginx-reverse-proxy","text":"This is for private use. Therefore we have to ask when we should use Docker and when we should keep the old style of installing our programs to the bare-metal server. We have decided to directly install the NGINX reverse proxy on the server itself. Every service itself will run in a Docker container.","title":"Set Up Nextcloud with NGINX Reverse Proxy"},{"location":"server/nextcloud_with_nginx_reverse_proxy/#port-forwarding","text":"","title":"Port Forwarding"},{"location":"server/nextcloud_with_nginx_reverse_proxy/#letsencrypt-ssl-certificates","text":"Let's Encrypt is a free, automated, and open certificate authority (CA). It is a service provided by the Internet Security Research Group (ISRG) to give people the digital certificates they need in order to enable HTTPS (SSL/TLS) for websites, for free. Certbot is a free, open source software tool for automatically using Let's Encrypt certificates on manually-administrated websites. To make sure we understand every step, we only generated the certificate and do the configurations by ourselves. sudo certbot certonly --standalone If we already have a web server running and do not want to quit it, then we will use the following command. sudo certbot certonly --webroot TODO: Automatic Renewal","title":"LetsEncrypt SSL Certificates"},{"location":"server/nextcloud_with_nginx_reverse_proxy/#nginx-reverse-proxy","text":"sudo pacman -S nginx sudo systemctl enable --now nginx Substitute your hostname, such as example.com , with <your_hostname> . server { listen 80; server_name <your_hostname>; return 301 https://<your_hostname>$request_uri; } server { listen 443 ssl; server_name <your_hostname>; ssl_certificate /etc/letsencrypt/live/<your_hostname>/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/<your_hostname>/privkey.pem; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; location /nextcloud { proxy_pass http://localhost:8080; rewrite /nextcloud/(.*) /$1 break; } } Think about maximal upload file size. Measure internal file upload vs external file upload. Make sure not to use internet connection internally.","title":"NGINX Reverse Proxy"},{"location":"server/nextcloud_with_nginx_reverse_proxy/#nextcloud-in-docker-container","text":"docker-compose.yml file version : '2' volumes : nextcloud : db : services : db : image : mariadb command : --transaction-isolation=READ-COMMITTED --binlog-format=ROW restart : always volumes : - db:/var/lib/mysql environment : - MYSQL_ROOT_PASSWORD=nextcloud - MYSQL_PASSWORD=nextcloud - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud app : image : nextcloud:latest ports : - 8080:80 links : - db depends_on : - db volumes : - nextcloud:/var/www/html environment : - APACHE_DISABLE_REWRITE_IP=1 - TRUSTED_PROXIES=localhost - OVERWRITEWEBROOT=/nextcloud restart : always","title":"Nextcloud in Docker Container"},{"location":"server/nextcloud_with_nginx_reverse_proxy/#turn-server-for-nextcloud-talk","text":"sudo pacman -S install coturn sudo sed -i '/TURNSERVER_ENABLED/c\\TURNSERVER_ENABLED=1' /etc/default/coturn /etc/turnserver.conf listening-port=3478 fingerprint lt-cred-mech # Only on coTURN below v4.5.0.8! use-auth-secret static-auth-secret=<secretSecret> realm=your.domain.org total-quota=100 bps-capacity=0 stale-nonce no-loopback-peers # Only on coTURN below v4.5.1.0! no-multicast-peers systemctl restart coturn","title":"TURN Server for Nextcloud Talk"},{"location":"server/self_hosting/","text":"Set up a Self-Hosted Server \u00b6 Internet and Network Basics \u00b6 ISP, Static and Dynamic IP Addresses \u00b6 Domain Names, Dynamic DNS, Domain Registrars \u00b6 Domain Name Domain Name System Domain Name Registrar DDNS Server (duckdns) Top-Level Domains Generic Top-Level Domains Fully Qualified Domain Name Router and Port Forwarding Domain Name Aliases Internet Service Provider Application to Self-Hosted Servers Server Hardware \u00b6 Power Consumption CPU Performance Memory Performance Storage Capacity and Performance Network Performance Raspberry Pi Laptop Desktop Computer https://www.tuxfamily.org/ SSH Server \u00b6 VPN vs Direct SSH \u00b6 Host Configuration and SSH Keys \u00b6 X11 Forwarding \u00b6 Trusted Untrusted SSHFS \u00b6 Arch Linux Wiki - OpenSSH Arch Linux Wike - SSHFS HTTP Web Server \u00b6 Apache \u00b6 Nginx \u00b6 Others \u00b6 LetsEncrypt SSL Certificates for HTTPS Web Server \u00b6 HTTPS Redirection \u00b6 Docker \u00b6 It works on my machine! New developers Microservice Architecture Legacy Apps to Container Docker Compose \u00b6 Fast Setup Frequently Changing and Experimenting Frequently turning on and off different services Mail Server \u00b6 Mailing Lists \u00b6 Git Server \u00b6 NextCloud \u00b6 Jitsi \u00b6 Privat: Docker-based with frequently turning it on and off","title":"Set up a Self-Hosted Server"},{"location":"server/self_hosting/#set-up-a-self-hosted-server","text":"","title":"Set up a Self-Hosted Server"},{"location":"server/self_hosting/#internet-and-network-basics","text":"","title":"Internet and Network Basics"},{"location":"server/self_hosting/#isp-static-and-dynamic-ip-addresses","text":"","title":"ISP, Static and Dynamic IP Addresses"},{"location":"server/self_hosting/#domain-names-dynamic-dns-domain-registrars","text":"Domain Name Domain Name System Domain Name Registrar DDNS Server (duckdns) Top-Level Domains Generic Top-Level Domains Fully Qualified Domain Name Router and Port Forwarding Domain Name Aliases Internet Service Provider Application to Self-Hosted Servers","title":"Domain Names, Dynamic DNS, Domain Registrars"},{"location":"server/self_hosting/#server-hardware","text":"Power Consumption CPU Performance Memory Performance Storage Capacity and Performance Network Performance Raspberry Pi Laptop Desktop Computer https://www.tuxfamily.org/","title":"Server Hardware"},{"location":"server/self_hosting/#ssh-server","text":"","title":"SSH Server"},{"location":"server/self_hosting/#vpn-vs-direct-ssh","text":"","title":"VPN vs Direct SSH"},{"location":"server/self_hosting/#host-configuration-and-ssh-keys","text":"","title":"Host Configuration and SSH Keys"},{"location":"server/self_hosting/#x11-forwarding","text":"Trusted Untrusted","title":"X11 Forwarding"},{"location":"server/self_hosting/#sshfs","text":"Arch Linux Wiki - OpenSSH Arch Linux Wike - SSHFS","title":"SSHFS"},{"location":"server/self_hosting/#http-web-server","text":"","title":"HTTP Web Server"},{"location":"server/self_hosting/#apache","text":"","title":"Apache"},{"location":"server/self_hosting/#nginx","text":"","title":"Nginx"},{"location":"server/self_hosting/#others","text":"","title":"Others"},{"location":"server/self_hosting/#letsencrypt-ssl-certificates-for-https-web-server","text":"","title":"LetsEncrypt SSL Certificates for HTTPS Web Server"},{"location":"server/self_hosting/#https-redirection","text":"","title":"HTTPS Redirection"},{"location":"server/self_hosting/#docker","text":"It works on my machine! New developers Microservice Architecture Legacy Apps to Container","title":"Docker"},{"location":"server/self_hosting/#docker-compose","text":"Fast Setup Frequently Changing and Experimenting Frequently turning on and off different services","title":"Docker Compose"},{"location":"server/self_hosting/#mail-server","text":"","title":"Mail Server"},{"location":"server/self_hosting/#mailing-lists","text":"","title":"Mailing Lists"},{"location":"server/self_hosting/#git-server","text":"","title":"Git Server"},{"location":"server/self_hosting/#nextcloud","text":"","title":"NextCloud"},{"location":"server/self_hosting/#jitsi","text":"Privat: Docker-based with frequently turning it on and off","title":"Jitsi"}]}